---
title: Welcome
---

## Announcements

- **Welcome** to Systems in Rust
  - What is in point of fact a systems cryptography course.
  - But it's in Rust so you have to take it.
- **Action Items**:
  - Access the [course webpage](https://cd-c89.github.io/rs/)
  - Join the Discord!
    - You should have gotten an email...
  - Set up Linux/Rust/Git.

## Homework

- The first homework, "Hello", is ready after this class.
  - It is comically trivial.
  - Mostly makes sure you have everything set up.
- Due Friday, 5 Sept. at 1440 PT.

## Today

- Logistics
- On Systems
- On Rust
- On Git
- Course Sketch

# Logistics

## It me

- **Name** 
  - (Prof. )?Calvin
- **Credentials**
  - B.A. Mathematics
  - B.S., M.S., Ph.D. Computer Science
- **Pronouns** 
  - they/them 

## The Great Work

- Thesis Title
  - Mining Secure Behavior of Hardware Designs 
- Plain English
  - Just as there are bugs in code that makes software, modern hardware is also written in code and therefore may contain bugs. I find these bugs. 

## Course Format

- Lecture Monday
- Lab Wednesday
- Homework due Friday 1440 PT (the *next* Friday)
- In-class midterm week of 10/06
- Final project due whenever the final is scheduled.
    - Waiting on registrar to announce.

## Ungrading++

- Your voices have been heard:
> I think failing my systems class was the best thing that happened to me.

> This course demanded strong self-motivation... Thus, I didn't learn as much as I might've if grading mattered more.

## Proposal

- I will offer two option
    - Ungrading
    - Specification Grading
- Vote as a class (anonymously)
- I update syllabus before add/drop ends.

## 1. Ungrading

- I provide autograders for all assignments except final.
    - Or a reference solution with a rubric, if automated testing is too weird (with spoiler alerts).
    - I will have a final reference solution but will at most share snippets individually.
- You do whatever you want.
- Enrolled students get an A.

## 2. Specification Grading

- All the rage. I was never fan but tell me what you think.
- Basically, I will assign some stuff but you don't have to do all of it perfectly.
    - No partial credit, everything is yes/no grading.
- I took distributions over final, midterm, and Lab/HW

## It pays to get A's

|Grade|Requirements|
|:----------:|------|
|A|Final meets spec|
|A|90% ave HW/Lab/Midterm, Final compiles|
|A-|90% ave HW/Lab, Midterm/Final compile|
|A-|Midterm meets spec, Final compiles|

## But B's are the Knees

|Grade|Requirements|
|:----------:|------|
|B+|90% ave HW/Lab, Midterm compiles|
|B| 80% ave HW/Lab, Midterm compiles|
|B-|80% ave HW/Lab|

## These may (???) earn degrees

|Grade|Requirements|
|:----------:|------|
|C|80% ave Lab|
|D|60% ave Lab|
|F|Anything else|

## Lab Grading

- A (=100%)
    - Meets spec by end of class
- B (=90%)
    - Compiles at end of class
        - Can be turned into an executable.
- F (=0%)
    - Anything else
    
## HW Grading

- A (=100%)
    - On time
    - Passes autograder.
- B (=90%)
    - On time
    - Compiles
        - Can be turned into an executable.
- F (=0%)
    - Anything else
    
## Final

- Create, document, and publish a self-hosting version control system.
- Entire codebase in Rust.
- Minimum specifications:
    - Support nested directory structures.
    - Support text-based files (.rs, .py, .txt)
    - Allow reverting to named changes (commits).
    - Completed by you and at most a partner.
    
## Late Work Policy

- Late work is not accepted.
    - Turning in anything at all for on 90% of assignments yields B.
    - Miss 100% of assignments and midterm but do the final for an A.

## AI Policy

- I would be shocked if it is helpful to you.
- If you think it is helpful, that is probably not a good sign.
- You can use it (I wouldn't)

## Collaboration Policy

- Non-final:
    - Any size group via enthusiastic consent.
    - Turn in your own code/copy.
- Final:
    - Partners via enthusiastic consent.
    - Turn in your own code/copy.

## Vote

- If there's not a Forms link here I should add one quickly.
- [https://forms.gle/Cu3FDLHvhHJ1EjYW9](https://forms.gle/Cu3FDLHvhHJ1EjYW9)
<br>
<img src="data:image/png;base64, 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">

# On Systems

## The Hard Part

- After ~10 years of systems research I've convinced myself [only two things](https://www.joelonsoftware.com/2005/12/29/the-perils-of-javaschools-2/) really matter:

  - Pointers, and
  - Recursion 

- Recursion isn't too bad... 

```py
>>> exp = lambda b, n : b if n == 1 else b*exp(b,n-1)
>>> exp(2,8)
256
```

## Pointers

- Pointers are a beast, but without them nothing makes sense! 

:::: {.columns}

::: {.column width="50%"}
```py
>>> x = 1
>>> def addx():
...     x += 1
...
>>> addx()
UnboundLocalError:
<blah blah blah error messages>
```
::: 

::: {.column width="50%"}

```py
>>> x = [1]
>>> def addx():
...     x[0] += 1
...
>>> addx()
>>> x
[2]
```
:::

::::

## Insight

- **Definition:**
  - Pointers: Variables that store memory addresses.
  - Recursion: Functions calling themselves to solve sub-problems.
- **Importance:**
  - Core to efficient algorithms and memory management in low-level programming.

## Python and Pointers

- **Why not .py (.js, .java, .cs, .cpp, etc)?**
  - These languages _abstract_ memory.
  - This abstraction makes computation **unclear**
  - This lack of clarity:
    - Adversely impacts education
    - Complicates low-level design
    - Leads to low performance
  - Good languages (except Java) but not for us

# On Rust

## Rust and Pointers

- Rust:
    - Obscures pointers, but...
    - *Does not* obscure memory.
- This is good!
    - Memory matters, but pointers are historical accident.
- You should probably use Rust in every application where correctness or performance matters.

## Rust and Recursion

- Separately, Rust is built on one of the most exciting ongoing computer science research efforts:
- **LLVM** (stands for LLVM)
- Basically, a way of turning human-readable code into machine-executable code.
    - Very good at turning recursion into iteration and/or vice versa.
- So Rust experiences less costs on recursion than many other languages.

# On Git

## Git

- If you don't know `git`, you should soon.
- Git corresponds, like the others, to a command: `git`
  - It is common now to use other techniques, but the command remains extremely **stable**
- Quoth GitHub, the first and greatest of the collaboration tools:

> [If you want a lot of control and flexibility, you can use the command line.](https://docs.github.com/en/get-started/using-github/connecting-to-github)

## Git Example

- So basically, you have things called repositories or "repos"

```{mermaid}
%%| theme: Darkly
flowchart LR
  A(My Ô∏è‚Äçüî• code repo)
```

## Git Example

- Then you realize you wrote an infinite loop so you update it

```{mermaid}
%%| theme: Darkly
flowchart LR
  A(My Ô∏è‚Äçüî• code repo v0 ) --> B(My Ô∏è‚Äçüî• code repo v1)
```

## Git Example

- Then you come to class and realize your code is on your gaming rig in your apartment.

```{mermaid}
%%| theme: Darkly
flowchart LR
  A(<s>My Ô∏è‚Äçüî• code repo v0</s>) --> B(<s>My Ô∏è‚Äçüî• code repo v1</s>)
```

## Git Example

- So you save your code on GitHub
  - GH = GitHub, GR = Gaming Rig

```{mermaid}
%%| theme: Darkly
flowchart LR
  A(GR.Ô∏è‚Äçüî• v0) --> B(GR.Ô∏è‚Äçüî• v1)
  B --> C(GH.‚Äçüî• v0)
```

## Git Example

- But you realize you didn't sanitize your inputs so you update again.

```{mermaid}
%%| theme: Darkly
flowchart LR
  A(GR.Ô∏è‚Äçüî• v0) --> B(GR.Ô∏è‚Äçüî• v1)
  B --> C(GR.Ô∏è‚Äçüî• v2)
  B --> D(GH.‚Äçüî• v0)
```

## Git Example

- Then you have class again and grab the GitHub version onto your LT = Laptop

```{mermaid}
%%| theme: Darkly
flowchart LR
  A(GR.Ô∏è‚Äçüî• v0) --> B(GR.Ô∏è‚Äçüî• v1)
  B --> C(GR.Ô∏è‚Äçüî• v2)
  B --> D(GH.‚Äçüî• v0)
  D --> E(LT.‚Äçüî• v0)
```

## Git Example

- You notice it has the bug so you fix it again on your laptop in almost the same way

```{mermaid}
%%| theme: Darkly
flowchart LR
  A(GR.Ô∏è‚Äçüî• v0) --> B(GR.Ô∏è‚Äçüî• v1)
  B --> C(GR.Ô∏è‚Äçüî• v2)
  B --> D(GH.‚Äçüî• v0)
  D --> E(LT.‚Äçüî• v0)
  E --> F(LT.‚Äçüî• v1)
```

## Git Example

- And save that back to GitHub then head back home to play Nethack on your 12000USD Gaming PC

```{mermaid}
%%| theme: Darkly
flowchart LR
  A(GR.Ô∏è‚Äçüî• v0) --> B(GR.Ô∏è‚Äçüî• v1)
  B --> C(GR.Ô∏è‚Äçüî• v2)
  B --> D(GH.‚Äçüî• v0)
  D --> E(LT.‚Äçüî• v0)
  E --> F(LT.‚Äçüî• v1)
  F --> G(GH.‚Äçüî• v1)
```

## Git Example

- You realize you also added some ASCII art and try to send that to GitHub

```{mermaid}
%%| theme: Darkly
flowchart LR
  A(GR.Ô∏è‚Äçüî• v0) --> B(GR.Ô∏è‚Äçüî• v1)
  B --> C(GR.Ô∏è‚Äçüî• v2)
  B --> D(GH.‚Äçüî• v0)
  D --> E(LT.‚Äçüî• v0)
  E --> F(LT.‚Äçüî• v1)
  F --> G(GH.‚Äçüî• v1)
  G --> H(GH.‚Äçüî• v2)
  C --> H
```

## Git Example

- Two arrows into one thing is a merge conflict and out-of-scope for now.

```{mermaid}
%%| theme: Darkly
flowchart LR
  A(GR.Ô∏è‚Äçüî• v0) --> B(GR.Ô∏è‚Äçüî• v1)
  B --> C(GR.Ô∏è‚Äçüî• v2)
  B --> D(GH.‚Äçüî• v0)
  D --> E(LT.‚Äçüî• v0)
  E --> F(LT.‚Äçüî• v1)
  F --> G(GH.‚Äçüî• v1)
  G --> H{üí•}
  C --> H
```

## Git Example

- Basically versions of code can live in more than one place.
  - Ah, versions, our old friend...

```{mermaid}
%%| theme: Darkly
flowchart LR
  A(GR.Ô∏è‚Äçüî• v0) --> B(GR.Ô∏è‚Äçüî• v1)
  B --> C(GR.Ô∏è‚Äçüî• v2)
  B --> D(GH.‚Äçüî• v0)
  D --> E(LT.‚Äçüî• v0)
  E --> F(LT.‚Äçüî• v1)
  F --> G(GH.‚Äçüî• v1)
  G --> H{üí•}
  C --> H
```

# In Brief

- Generally create repositories + tokens in browser on GitHub
- Use command line to configure a repository
- Authenticate via access token from browser
- Then use `git add`, `git commit`, `git push` to save work
- Use `git pull` to grab saved work
- Use a `.gitignore` file so only code (**NOT** executables) live on GitHub

# Course Sketch

## Visually


```{mermaid}
%%| theme: Darkly
flowchart LR
  B(Wordle)
  B --> C(SHA512)
  C --> D(Ed25519)
  B --> F(Graphs)
  C --> H(Merkle)
  F --> H
  F --> G(LCS)
  H --> I(VCS)
  G --> I
  D --> I
```

- LCS = Longest common subsequence, like `diff`
- VCS = Version Control System, like `git`

## SHA

- **SHA Basics:**
  - Cryptographic hash function family.
  - Input data into fixed-size hash values.
- **Use Cases:**
  - Data integrity.
- **Learning Objectives:**
  - Reason about bits and bytes.

## Ed25519

- **Ed25519 Basics:**
    - Public-key signature system.
    - Based on elliptic curve cryptography (specifically, Edwards curves).
    - Uses SHA-512 and Curve25519.
- **Use Cases:**
    - Confidentiality and authentication.
- **Learning Objectives:**
    - Reason about numerical computing.

## Graphs

- Introduce graphs as a way to:
    - Organize files
    - Compare files
    - Track changes.
   
  
## Longest Common Subseq. (LCS)

- **LCS Basics:**
    - Find longest sequence of characters in the same relative order in two or more sequences, but not necessarily contiguously.
    - Often solved using dynamic programming.
- **Use Cases:**
    - File comparison (e.g., `diff` utility).
- **Learning Objectives:**
    - Linear data structure.

##  Merkle Trees

- **Merkle Trees:**
  - Tree structure using SHA for data integrity.
  - Hashes stored as nodes; pointers link them.
  - Leaf nodes are RSA signatures!
- Merkle Trees are **balanced**
  - Hierarchical data structure embedded in linear data structure.
  
## File System

- The file system a tree that cannot (easily) be embedded in a linear data structure.

```{.bash}
r
‚îú‚îÄ‚îÄ DESCRIPTION
‚îú‚îÄ‚îÄ Makefile
‚îú‚îÄ‚îÄ NAMESPACE
‚îú‚îÄ‚îÄ R
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ vcd2df.R
‚îú‚îÄ‚îÄ man
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ vcd2df.Rd
‚îú‚îÄ‚îÄ r
‚îú‚îÄ‚îÄ vcd2df.Rcheck
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ 00_pkg_src
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ vcd2df
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ DESCRIPTION
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ NAMESPACE
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ R
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ vcd2df.R
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ build
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ vignette.rds
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ inst
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ doc
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ index.R
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ index.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ index.qmd
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ man
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ vcd2df.Rd
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ vignettes
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ index.qmd
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ 00check.log
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ 00install.out
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Rdlatex.log
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ vcd2df
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ DESCRIPTION
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ INDEX
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Meta
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Rd.rds
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ features.rds
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ hsearch.rds
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ links.rds
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ nsInfo.rds
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ package.rds
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ vignette.rds
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ NAMESPACE
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ R
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ vcd2df
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ vcd2df.rdb
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ vcd2df.rdx
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ doc
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.R
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.html
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.qmd
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ help
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ AnIndex
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ aliases.rds
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ paths.rds
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ vcd2df.rdb
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ vcd2df.rdx
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ 00Index.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ R.css
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ vcd2df-Ex.R
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ vcd2df-Ex.Rout
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ vcd2df-Ex.pdf
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ vcd2df-manual.log
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ vcd2df-manual.pdf
‚îú‚îÄ‚îÄ vcd2df_1.0.1.tar.gz
‚îî‚îÄ‚îÄ vignettes
    ‚îî‚îÄ‚îÄ index.qmd
```

# Final

- **Implement Minimal `git` in Rust**
  - Must be *self-hosted* - able to track versions of itself.
  
# On `vim`

## Vim

- You should use `vim` or another console-based editor as a component of your learning in this class.
- This will not be assessed (how can it be) but will *likely* be expected in a non-trivial subset of settings this course material will be useful.
- I will live-code in either `vim` or `helix`

# Fin
