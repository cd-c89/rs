[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Systems in Rust",
    "section": "",
    "text": "CS 271 “Systems in Rust”\n\nCalled:\n\nCS 271: Systems Programming\nCS 271: Sys Programming, Computer Arch\n\nThe first semester class in a:\n\nCompiled language, with\nNo garbage collector.\n\nTerm these “systems” languages.\n\nSuitable to write an operating system.\n\nTaught this year in Rust.\n\nSo to me, “Systems in Rust”\n\n\n\nMW 1310-1440\n\n\nProf. Calvin\n\n\nSyllabus TBD\n\nUngrade++\nLec/Lab/HW\n\n\n\n\nCalendar\n\n\n\nWeek\nDate (M)\nLecture (M)\nLab (W)\nHW (F)\n\n\n\n\n0x0\n08/25\nWelcome\nRustup\nHi world\n\n\n0x1\n09/01\nOff\nBuild\nHi cargo\n\n\n0x2\n09/08\nOptions\nGuess\nWordle\n\n\n0x3\n09/15\nBits\nHamming\nSigmas\n\n\n0x4\n09/22\nSHA2\nEndian\nChunk\n\n\n0x5\n09/29\nIEEE754\nConstants\nSHA512\n\n\n0x6\n10/06\nReview\nMidterm\nOff\n\n\n0x7\n10/13\nBigInt\nBigAdd\nu512\n\n\n0x8\n10/20\nECDSA\nPython\nECDSA\n\n\n0x9\n10/27\nStacks\nList\nTree\n\n\n0xA\n11/03\nGraphs\nBFS\nDjikstra\n\n\n0xB\n11/10\nMerkle\n\n\n\n\n0xC\n11/17\nVCS\n\n\n\n\n0xD\n11/24\nSpectre\nOff\n\n\n\n0xE\n11/24\nMeltdown\nHypers\nVCS.rs\n\n\n\n\n\n\nLecture Recordings"
  },
  {
    "objectID": "02_hiworld.html",
    "href": "02_hiworld.html",
    "title": "Hi world",
    "section": "",
    "text": "By convention, the first program in a new language is “Hello, world!”\nRust follows this convention in the Rust Book.\n\nWe basically do Chapter 1.2\n\n\n\n\n\n\nYou should have\n\ngit installed and working.\nA repository named 271rs, both a local repository on your device and a remote repository on GitHub.\nAn editor, which really should be text-based, in-console text editor, but I can’t actually ban you from using VS Code.\nrustc installed and working.\n\nIf you miss any of this, back to lab.\n\n\n\n\n\nTo complete this assignment, you must:\n\nCreate a 02/hiworld.rs file in your 271rs repository.\nEnsure this file:\n\nIs present in the remote repository on GitHub, to which I have access after the lab, and…\nThat the file can be compiled, as specified below, and…\nThe executable produced by compilation prints “Hi world”.",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#sketch",
    "href": "02_hiworld.html#sketch",
    "title": "Hi world",
    "section": "",
    "text": "By convention, the first program in a new language is “Hello, world!”\nRust follows this convention in the Rust Book.\n\nWe basically do Chapter 1.2",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#pre-flight-checks",
    "href": "02_hiworld.html#pre-flight-checks",
    "title": "Hi world",
    "section": "",
    "text": "You should have\n\ngit installed and working.\nA repository named 271rs, both a local repository on your device and a remote repository on GitHub.\nAn editor, which really should be text-based, in-console text editor, but I can’t actually ban you from using VS Code.\nrustc installed and working.\n\nIf you miss any of this, back to lab.",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#requirements",
    "href": "02_hiworld.html#requirements",
    "title": "Hi world",
    "section": "",
    "text": "To complete this assignment, you must:\n\nCreate a 02/hiworld.rs file in your 271rs repository.\nEnsure this file:\n\nIs present in the remote repository on GitHub, to which I have access after the lab, and…\nThat the file can be compiled, as specified below, and…\nThe executable produced by compilation prints “Hi world”.",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#new-folder",
    "href": "02_hiworld.html#new-folder",
    "title": "Hi world",
    "section": "New Folder",
    "text": "New Folder\n\nYou will need to make an 02 folder in 271rs to save your work.\nEnsure your shell/terminal/console/command line is in the 271rs repository.\n\nReview the lab.\nReview the shell.\n\nUse:\n\nmkdir 02",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#new-file",
    "href": "02_hiworld.html#new-file",
    "title": "Hi world",
    "section": "New File",
    "text": "New File\n\nYou will need to edit a hi_world.rs file in the 02 folder.\nUse something like:\n\nvim 02/hi_world.rs\n\nOr perhaps:\n\ncd 02\nvim hi_world.rs\n\nWe recall that to save and exit vim we press the ESC key then type :x then press ENTER.\n\nRead more here",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#new-program",
    "href": "02_hiworld.html#new-program",
    "title": "Hi world",
    "section": "New Program",
    "text": "New Program\n\nYou should have rustc installed.\nIf I were you, I’d leave open a terminal window with vim and create another to use rustc\nFor example, when you first create and save an empty file as hiworld.rs, you can use rustc:\n\nrustc hi_world.rs\n\nYou’ll see the following:\n\nerror[E0601]: `main` function not found in crate `hi_world`\n  |\n  = note: consider adding a `main` function to `hi_world.rs`\n\nerror: aborting due to 1 previous error\n\nFor more information about this error, try `rustc --explain E0601`.\n\nThis is good enough for now.",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#citation",
    "href": "02_hiworld.html#citation",
    "title": "Hi world",
    "section": "Citation",
    "text": "Citation\n\nThe following content is lifted directly from the Rust Book",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#writing-and-running-a-rust-program",
    "href": "02_hiworld.html#writing-and-running-a-rust-program",
    "title": "Hi world",
    "section": "Writing and Running a Rust Program",
    "text": "Writing and Running a Rust Program\n\n.rs\n\nRust files always end with the .rs extension.\nIf you’re using more than one word in your filename, the convention is to use an underscore to separate them. For example, use hi_world.rs rather than hi_world.rs.\nIn hi_world.rs enter the following:\n\n\n\nhi_world.rs\n\nfn main() {\n    println!(\"Hello, world!\");\n}\n\n\n\nrustc\n\nSave (ESC + :w in vim) the file and go back to your terminal window.\nEnter the following commands to compile the file:\n\nrustc hi_world.c\n\n\n\n\n\n\nNote\n\n\n\nRust is a compiled language, unlike Python, bash, or R. To create programs in Rust, we first “compile” the source code in an executable. We do not “run” .rs files, as we do with .py files using the python3 command.\n\n\n\n\nVerify\n\nVerify that compilation was successful by using ls to list the files in your folder.\n\nls\n\nYou should see the following.\n\nhi_world  hi_world.rs\n\nhi_world is a program, and hi_world.rs is source code.\n\n\n\nRun\n\nTo use a Rust program, we do not have to call rustc like we do with Python .py scripts!\nWe use ./ notation to have the shell interpret hi_world as a program to be run\n\n. means use the current folder (should be 02)\n/ means find the file by name in the current folder.\n\n./hi_world\nYou should see:\n\nHello, world!\n\n\n\n\n\n\nNote\n\n\n\nIf you created your hi_world.rs file using e.g. vim 02/hi_world.rs, then the file will be in a different folder. You may need to run rustc 02/hi_world.rs or ./02/hi_world. Review the file system if you get stuck.",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#the-first-piece",
    "href": "02_hiworld.html#the-first-piece",
    "title": "Hi world",
    "section": "The first piece",
    "text": "The first piece\nfn main() {\n\n}\n\nThese lines define a function named main.\nThe main function is special:\n\nIt is always the first code that runs in every executable Rust program.\n\nThe first line declares a function named main that has no parameters and returns nothing.\nIf there were parameters, they would go inside the parentheses ().",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#white-space-and",
    "href": "02_hiworld.html#white-space-and",
    "title": "Hi world",
    "section": "White space and {}",
    "text": "White space and {}\nfn main() {\n\n}\n\nThe function body is wrapped in {}.\nRust requires curly brackets around all function bodies. It’s good style to place the opening curly bracket on the same line as the function declaration, adding one space in between.",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#rustfmt",
    "href": "02_hiworld.html#rustfmt",
    "title": "Hi world",
    "section": "rustfmt",
    "text": "rustfmt\n\nNote: If you want to stick to a standard style across Rust projects, you can use an automatic formatter tool called rustfmt to format your code in a particular style. The Rust team has included this tool with the standard Rust distribution, as rustc is, so it should already be installed on your computer!",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#function-body",
    "href": "02_hiworld.html#function-body",
    "title": "Hi world",
    "section": "Function Body",
    "text": "Function Body\n\nThe body of the main function holds the following code:\n\nprintln!(\"Hello, world!\");\n\nThis line does all the work in this little program: it prints text to the screen.\nThere are three important details to notice here.",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#printing",
    "href": "02_hiworld.html#printing",
    "title": "Hi world",
    "section": "Printing",
    "text": "Printing\n\nFirst, println! calls a Rust macro.\nIf it had called a function instead, it would be entered as println (without the !).\nRust macros are a way to writecode that generates code to extend Rust syntax, a latter topic.\nIt is common for printing to be uncommonly complex when learning new programming languages; Rust follows this trend.\nFor now, you just need to know that using a ! means that you’re calling a macro instead of a normal function and that macros don’t always follow the same rules as functions.",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#strings",
    "href": "02_hiworld.html#strings",
    "title": "Hi world",
    "section": "Strings",
    "text": "Strings\n\nSecond, you see the \"Hello, world!\" string.\nWe pass this string as an argument to println!.\nThen string is printed to the screen.",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#semicolons",
    "href": "02_hiworld.html#semicolons",
    "title": "Hi world",
    "section": "Semicolons",
    "text": "Semicolons\n\nThird, we end the line with a semicolon (;), which indicates that this expression is over and the next one is ready to begin.\n\nAn expression is the atomic unit of code.\n\nThis is an expression:\nx = 1\nThis is not, it is divisible into valid code (two expressions)\nx = 1\nprint(x)\nTHis is not, it is not independently valid code.\nx = \n\n\nMost lines of Rust code end with a semicolon.\n\nThis is legal in Python:\nx = 1;\nprint(x);",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "00_welcome.html",
    "href": "00_welcome.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to Systems in Rust\n\nWhat is in point of fact a systems cryptography course.\nBut it’s in Rust so you have to take it.\n\nAction Items:\n\nAccess the course webpage\nJoin the Discord!\n\nYou should have gotten an email…\n\nSet up Linux/Rust/Git.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#announcements",
    "href": "00_welcome.html#announcements",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to Systems in Rust\n\nWhat is in point of fact a systems cryptography course.\nBut it’s in Rust so you have to take it.\n\nAction Items:\n\nAccess the course webpage\nJoin the Discord!\n\nYou should have gotten an email…\n\nSet up Linux/Rust/Git.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#homework",
    "href": "00_welcome.html#homework",
    "title": "Welcome",
    "section": "Homework",
    "text": "Homework\n\nThe first homework, “Hello”, is ready after this class.\n\nIt is comically trivial.\nMostly makes sure you have everything set up.\n\nDue Friday, 5 Sept. at 1440 PT.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#today",
    "href": "00_welcome.html#today",
    "title": "Welcome",
    "section": "Today",
    "text": "Today\n\nLogistics\nOn Systems\nOn Rust\nOn Git\nCourse Sketch",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#it-me",
    "href": "00_welcome.html#it-me",
    "title": "Welcome",
    "section": "It me",
    "text": "It me\n\nName\n\n(Prof. )?Calvin\n\nCredentials\n\nB.A. Mathematics\nB.S., M.S., Ph.D. Computer Science\n\nPronouns\n\nthey/them",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#the-great-work",
    "href": "00_welcome.html#the-great-work",
    "title": "Welcome",
    "section": "The Great Work",
    "text": "The Great Work\n\nThesis Title\n\nMining Secure Behavior of Hardware Designs\n\nPlain English\n\nJust as there are bugs in code that makes software, modern hardware is also written in code and therefore may contain bugs. I find these bugs.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#course-format",
    "href": "00_welcome.html#course-format",
    "title": "Welcome",
    "section": "Course Format",
    "text": "Course Format\n\nLecture Monday\nLab Wednesday\nHomework due Friday 1440 PT (the next Friday)\nIn-class midterm week of 10/06\nFinal project due whenever the final is scheduled.\n\nWaiting on registrar to announce.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#ungrading",
    "href": "00_welcome.html#ungrading",
    "title": "Welcome",
    "section": "Ungrading++",
    "text": "Ungrading++\n\nYour voices have been heard: &gt; I think failing my systems class was the best thing that happened to me.\n\n\nThis course demanded strong self-motivation… Thus, I didn’t learn as much as I might’ve if grading mattered more.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#proposal",
    "href": "00_welcome.html#proposal",
    "title": "Welcome",
    "section": "Proposal",
    "text": "Proposal\n\nI will offer two option\n\nUngrading\nSpecification Grading\n\nVote as a class (anonymously)\nI update syllabus before add/drop ends.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#ungrading-1",
    "href": "00_welcome.html#ungrading-1",
    "title": "Welcome",
    "section": "1. Ungrading",
    "text": "1. Ungrading\n\nI provide autograders for all assignments except final.\n\nOr a reference solution with a rubric, if automated testing is too weird (with spoiler alerts).\nI will have a final reference solution but will at most share snippets individually.\n\nYou do whatever you want.\nEnrolled students get an A.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#specification-grading",
    "href": "00_welcome.html#specification-grading",
    "title": "Welcome",
    "section": "2. Specification Grading",
    "text": "2. Specification Grading\n\nAll the rage. I was never fan but tell me what you think.\nBasically, I will assign some stuff but you don’t have to do all of it perfectly.\n\nNo partial credit, everything is yes/no grading.\n\nI took distributions over final, midterm, and Lab/HW",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#it-pays-to-get-as",
    "href": "00_welcome.html#it-pays-to-get-as",
    "title": "Welcome",
    "section": "It pays to get A’s",
    "text": "It pays to get A’s\n\n\n\nGrade\nRequirements\n\n\n\n\nA\nFinal meets spec\n\n\nA\n90% ave HW/Lab/Midterm, Final compiles\n\n\nA-\n90% ave HW/Lab, Midterm/Final compile\n\n\nA-\nMidterm meets spec, Final compiles",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#but-bs-are-the-knees",
    "href": "00_welcome.html#but-bs-are-the-knees",
    "title": "Welcome",
    "section": "But B’s are the Knees",
    "text": "But B’s are the Knees\n\n\n\nGrade\nRequirements\n\n\n\n\nB+\n90% ave HW/Lab, Midterm compiles\n\n\nB\n80% ave HW/Lab, Midterm compiles\n\n\nB-\n80% ave HW/Lab",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#these-may-earn-degrees",
    "href": "00_welcome.html#these-may-earn-degrees",
    "title": "Welcome",
    "section": "These may (???) earn degrees",
    "text": "These may (???) earn degrees\n\n\n\nGrade\nRequirements\n\n\n\n\nC\n80% ave Lab\n\n\nD\n60% ave Lab\n\n\nF\nAnything else",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#lab-grading",
    "href": "00_welcome.html#lab-grading",
    "title": "Welcome",
    "section": "Lab Grading",
    "text": "Lab Grading\n\nA (=100%)\n\nMeets spec by end of class\n\nB (=90%)\n\nCompiles at end of class\n\nCan be turned into an executable.\n\n\nF (=0%)\n\nAnything else",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#hw-grading",
    "href": "00_welcome.html#hw-grading",
    "title": "Welcome",
    "section": "HW Grading",
    "text": "HW Grading\n\nA (=100%)\n\nOn time\nPasses autograder.\n\nB (=90%)\n\nOn time\nCompiles\n\nCan be turned into an executable.\n\n\nF (=0%)\n\nAnything else",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#final",
    "href": "00_welcome.html#final",
    "title": "Welcome",
    "section": "Final",
    "text": "Final\n\nCreate, document, and publish a self-hosting version control system.\nEntire codebase in Rust.\nMinimum specifications:\n\nSupport nested directory structures.\nSupport text-based files (.rs, .py, .txt)\nAllow reverting to named changes (commits).\nCompleted by you and at most a partner.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#late-work-policy",
    "href": "00_welcome.html#late-work-policy",
    "title": "Welcome",
    "section": "Late Work Policy",
    "text": "Late Work Policy\n\nLate work is not accepted.\n\nTurning in anything at all for on 90% of assignments yields B.\nMiss 100% of assignments and midterm but do the final for an A.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#ai-policy",
    "href": "00_welcome.html#ai-policy",
    "title": "Welcome",
    "section": "AI Policy",
    "text": "AI Policy\n\nI would be shocked if it is helpful to you.\nIf you think it is helpful, that is probably not a good sign.\nYou can use it (I wouldn’t)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#collaboration-policy",
    "href": "00_welcome.html#collaboration-policy",
    "title": "Welcome",
    "section": "Collaboration Policy",
    "text": "Collaboration Policy\n\nNon-final:\n\nAny size group via enthusiastic consent.\nTurn in your own code/copy.\n\nFinal:\n\nPartners via enthusiastic consent.\nTurn in your own code/copy.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#vote",
    "href": "00_welcome.html#vote",
    "title": "Welcome",
    "section": "Vote",
    "text": "Vote\n\nIf there’s not a Forms link here I should add one quickly.\nhttps://forms.gle/Cu3FDLHvhHJ1EjYW9",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#the-hard-part",
    "href": "00_welcome.html#the-hard-part",
    "title": "Welcome",
    "section": "The Hard Part",
    "text": "The Hard Part\n\nAfter ~10 years of systems research I’ve convinced myself only two things really matter:\n\nPointers, and\nRecursion\n\nRecursion isn’t too bad…\n\n&gt;&gt;&gt; exp = lambda b, n : b if n == 1 else b*exp(b,n-1)\n&gt;&gt;&gt; exp(2,8)\n256",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#pointers",
    "href": "00_welcome.html#pointers",
    "title": "Welcome",
    "section": "Pointers",
    "text": "Pointers\n\nPointers are a beast, but without them nothing makes sense!\n\n\n\n&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; def addx():\n...     x += 1\n...\n&gt;&gt;&gt; addx()\nUnboundLocalError:\n&lt;blah blah blah error messages&gt;\n\n&gt;&gt;&gt; x = [1]\n&gt;&gt;&gt; def addx():\n...     x[0] += 1\n...\n&gt;&gt;&gt; addx()\n&gt;&gt;&gt; x\n[2]",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#insight",
    "href": "00_welcome.html#insight",
    "title": "Welcome",
    "section": "Insight",
    "text": "Insight\n\nDefinition:\n\nPointers: Variables that store memory addresses.\nRecursion: Functions calling themselves to solve sub-problems.\n\nImportance:\n\nCore to efficient algorithms and memory management in low-level programming.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#python-and-pointers",
    "href": "00_welcome.html#python-and-pointers",
    "title": "Welcome",
    "section": "Python and Pointers",
    "text": "Python and Pointers\n\nWhy not .py (.js, .java, .cs, .cpp, etc)?\n\nThese languages abstract memory.\nThis abstraction makes computation unclear\nThis lack of clarity:\n\nAdversely impacts education\nComplicates low-level design\nLeads to low performance\n\nGood languages (except Java) but not for us",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#rust-and-pointers",
    "href": "00_welcome.html#rust-and-pointers",
    "title": "Welcome",
    "section": "Rust and Pointers",
    "text": "Rust and Pointers\n\nRust:\n\nObscures pointers, but…\nDoes not obscure memory.\n\nThis is good!\n\nMemory matters, but pointers are historical accident.\n\nYou should probably use Rust in every application where correctness or performance matters.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#rust-and-recursion",
    "href": "00_welcome.html#rust-and-recursion",
    "title": "Welcome",
    "section": "Rust and Recursion",
    "text": "Rust and Recursion\n\nSeparately, Rust is built on one of the most exciting ongoing computer science research efforts:\nLLVM (stands for LLVM)\nBasically, a way of turning human-readable code into machine-executable code.\n\nVery good at turning recursion into iteration and/or vice versa.\n\nSo Rust experiences less costs on recursion than many other languages.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git",
    "href": "00_welcome.html#git",
    "title": "Welcome",
    "section": "Git",
    "text": "Git\n\nIf you don’t know git, you should soon.\nGit corresponds, like the others, to a command: git\n\nIt is common now to use other techniques, but the command remains extremely stable\n\nQuoth GitHub, the first and greatest of the collaboration tools:\n\n\nIf you want a lot of control and flexibility, you can use the command line.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example",
    "href": "00_welcome.html#git-example",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nSo basically, you have things called repositories or “repos”\n\n\n\n\n\n\nflowchart LR\n  A(My ️‍🔥 code repo)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-1",
    "href": "00_welcome.html#git-example-1",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nThen you realize you wrote an infinite loop so you update it\n\n\n\n\n\n\nflowchart LR\n  A(My ️‍🔥 code repo v0 ) --&gt; B(My ️‍🔥 code repo v1)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-2",
    "href": "00_welcome.html#git-example-2",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nThen you come to class and realize your code is on your gaming rig in your apartment.\n\n\n\n\n\n\nflowchart LR\n  A(&lt;s&gt;My ️‍🔥 code repo v0&lt;/s&gt;) --&gt; B(&lt;s&gt;My ️‍🔥 code repo v1&lt;/s&gt;)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-3",
    "href": "00_welcome.html#git-example-3",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nSo you save your code on GitHub\n\nGH = GitHub, GR = Gaming Rig\n\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GH.‍🔥 v0)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-4",
    "href": "00_welcome.html#git-example-4",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nBut you realize you didn’t sanitize your inputs so you update again.\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-5",
    "href": "00_welcome.html#git-example-5",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nThen you have class again and grab the GitHub version onto your LT = Laptop\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-6",
    "href": "00_welcome.html#git-example-6",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nYou notice it has the bug so you fix it again on your laptop in almost the same way\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-7",
    "href": "00_welcome.html#git-example-7",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nAnd save that back to GitHub then head back home to play Nethack on your 12000USD Gaming PC\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-8",
    "href": "00_welcome.html#git-example-8",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nYou realize you also added some ASCII art and try to send that to GitHub\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)\n  G --&gt; H(GH.‍🔥 v2)\n  C --&gt; H",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-9",
    "href": "00_welcome.html#git-example-9",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nTwo arrows into one thing is a merge conflict and out-of-scope for now.\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)\n  G --&gt; H{💥}\n  C --&gt; H",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-10",
    "href": "00_welcome.html#git-example-10",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nBasically versions of code can live in more than one place.\n\nAh, versions, our old friend…\n\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)\n  G --&gt; H{💥}\n  C --&gt; H",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#visually",
    "href": "00_welcome.html#visually",
    "title": "Welcome",
    "section": "Visually",
    "text": "Visually\n\n\n\n\n\nflowchart LR\n  B(Wordle)\n  B --&gt; C(SHA512)\n  C --&gt; D(Ed25519)\n  B --&gt; F(Graphs)\n  C --&gt; H(Merkle)\n  F --&gt; H\n  F --&gt; G(LCS)\n  H --&gt; I(VCS)\n  G --&gt; I\n  D --&gt; I\n\n\n\n\n\n\n\nLCS = Longest common subsequence, like diff\nVCS = Version Control System, like git",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#sha",
    "href": "00_welcome.html#sha",
    "title": "Welcome",
    "section": "SHA",
    "text": "SHA\n\nSHA Basics:\n\nCryptographic hash function family.\nInput data into fixed-size hash values.\n\nUse Cases:\n\nData integrity.\n\nLearning Objectives:\n\nReason about bits and bytes.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#ed25519",
    "href": "00_welcome.html#ed25519",
    "title": "Welcome",
    "section": "Ed25519",
    "text": "Ed25519\n\nEd25519 Basics:\n\nPublic-key signature system.\nBased on elliptic curve cryptography (specifically, Edwards curves).\nUses SHA-512 and Curve25519.\n\nUse Cases:\n\nConfidentiality and authentication.\n\nLearning Objectives:\n\nReason about numerical computing.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#graphs",
    "href": "00_welcome.html#graphs",
    "title": "Welcome",
    "section": "Graphs",
    "text": "Graphs\n\nIntroduce graphs as a way to:\n\nOrganize files\nCompare files\nTrack changes.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#longest-common-subseq.-lcs",
    "href": "00_welcome.html#longest-common-subseq.-lcs",
    "title": "Welcome",
    "section": "Longest Common Subseq. (LCS)",
    "text": "Longest Common Subseq. (LCS)\n\nLCS Basics:\n\nFind longest sequence of characters in the same relative order in two or more sequences, but not necessarily contiguously.\nOften solved using dynamic programming.\n\nUse Cases:\n\nFile comparison (e.g., diff utility).\n\nLearning Objectives:\n\nLinear data structure.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#merkle-trees",
    "href": "00_welcome.html#merkle-trees",
    "title": "Welcome",
    "section": "Merkle Trees",
    "text": "Merkle Trees\n\nMerkle Trees:\n\nTree structure using SHA for data integrity.\nHashes stored as nodes; pointers link them.\nLeaf nodes are RSA signatures!\n\nMerkle Trees are balanced\n\nHierarchical data structure embedded in linear data structure.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#file-system",
    "href": "00_welcome.html#file-system",
    "title": "Welcome",
    "section": "File System",
    "text": "File System\n\nThe file system a tree that cannot (easily) be embedded in a linear data structure.\n\nr\n├── DESCRIPTION\n├── Makefile\n├── NAMESPACE\n├── R\n│   └── vcd2df.R\n├── man\n│   └── vcd2df.Rd\n├── r\n├── vcd2df.Rcheck\n│   ├── 00_pkg_src\n│   │   └── vcd2df\n│   │       ├── DESCRIPTION\n│   │       ├── NAMESPACE\n│   │       ├── R\n│   │       │   └── vcd2df.R\n│   │       ├── build\n│   │       │   └── vignette.rds\n│   │       ├── inst\n│   │       │   └── doc\n│   │       │       ├── index.R\n│   │       │       ├── index.html\n│   │       │       └── index.qmd\n│   │       ├── man\n│   │       │   └── vcd2df.Rd\n│   │       └── vignettes\n│   │           └── index.qmd\n│   ├── 00check.log\n│   ├── 00install.out\n│   ├── Rdlatex.log\n│   ├── vcd2df\n│   │   ├── DESCRIPTION\n│   │   ├── INDEX\n│   │   ├── Meta\n│   │   │   ├── Rd.rds\n│   │   │   ├── features.rds\n│   │   │   ├── hsearch.rds\n│   │   │   ├── links.rds\n│   │   │   ├── nsInfo.rds\n│   │   │   ├── package.rds\n│   │   │   └── vignette.rds\n│   │   ├── NAMESPACE\n│   │   ├── R\n│   │   │   ├── vcd2df\n│   │   │   ├── vcd2df.rdb\n│   │   │   └── vcd2df.rdx\n│   │   ├── doc\n│   │   │   ├── index.R\n│   │   │   ├── index.html\n│   │   │   └── index.qmd\n│   │   ├── help\n│   │   │   ├── AnIndex\n│   │   │   ├── aliases.rds\n│   │   │   ├── paths.rds\n│   │   │   ├── vcd2df.rdb\n│   │   │   └── vcd2df.rdx\n│   │   └── html\n│   │       ├── 00Index.html\n│   │       └── R.css\n│   ├── vcd2df-Ex.R\n│   ├── vcd2df-Ex.Rout\n│   ├── vcd2df-Ex.pdf\n│   ├── vcd2df-manual.log\n│   └── vcd2df-manual.pdf\n├── vcd2df_1.0.1.tar.gz\n└── vignettes\n    └── index.qmd",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#vim",
    "href": "00_welcome.html#vim",
    "title": "Welcome",
    "section": "Vim",
    "text": "Vim\n\nYou should use vim or another console-based editor as a component of your learning in this class.\nThis will not be assessed (how can it be) but will likely be expected in a non-trivial subset of settings this course material will be useful.\nI will live-code in either vim or helix",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.rjs.html#announcements",
    "href": "00_welcome.rjs.html#announcements",
    "title": "Welcome",
    "section": "Announcements",
    "text": "Announcements\n\nWelcome to Systems in Rust\n\nWhat is in point of fact a systems cryptography course.\nBut it’s in Rust so you have to take it.\n\nAction Items:\n\nAccess the course webpage\nJoin the Discord!\n\nYou should have gotten an email…\n\nSet up Linux/Rust/Git."
  },
  {
    "objectID": "00_welcome.rjs.html#homework",
    "href": "00_welcome.rjs.html#homework",
    "title": "Welcome",
    "section": "Homework",
    "text": "Homework\n\nThe first homework, “Hello”, is ready after this class.\n\nIt is comically trivial.\nMostly makes sure you have everything set up.\n\nDue Friday, 5 Sept. at 1440 PT."
  },
  {
    "objectID": "00_welcome.rjs.html#today",
    "href": "00_welcome.rjs.html#today",
    "title": "Welcome",
    "section": "Today",
    "text": "Today\n\nLogistics\nOn Systems\nOn Rust\nOn Git\nCourse Sketch"
  },
  {
    "objectID": "00_welcome.rjs.html#it-me",
    "href": "00_welcome.rjs.html#it-me",
    "title": "Welcome",
    "section": "It me",
    "text": "It me\n\nName\n\n(Prof. )?Calvin\n\nCredentials\n\nB.A. Mathematics\nB.S., M.S., Ph.D. Computer Science\n\nPronouns\n\nthey/them"
  },
  {
    "objectID": "00_welcome.rjs.html#the-great-work",
    "href": "00_welcome.rjs.html#the-great-work",
    "title": "Welcome",
    "section": "The Great Work",
    "text": "The Great Work\n\nThesis Title\n\nMining Secure Behavior of Hardware Designs\n\nPlain English\n\nJust as there are bugs in code that makes software, modern hardware is also written in code and therefore may contain bugs. I find these bugs."
  },
  {
    "objectID": "00_welcome.rjs.html#course-format",
    "href": "00_welcome.rjs.html#course-format",
    "title": "Welcome",
    "section": "Course Format",
    "text": "Course Format\n\nLecture Monday\nLab Wednesday\nHomework due Friday 1440 PT (the next Friday)\nIn-class midterm week of 10/06\nFinal project due whenever the final is scheduled.\n\nWaiting on registrar to announce."
  },
  {
    "objectID": "00_welcome.rjs.html#ungrading",
    "href": "00_welcome.rjs.html#ungrading",
    "title": "Welcome",
    "section": "Ungrading++",
    "text": "Ungrading++\n\nYour voices have been heard: &gt; I think failing my systems class was the best thing that happened to me.\n\n\nThis course demanded strong self-motivation… Thus, I didn’t learn as much as I might’ve if grading mattered more."
  },
  {
    "objectID": "00_welcome.rjs.html#proposal",
    "href": "00_welcome.rjs.html#proposal",
    "title": "Welcome",
    "section": "Proposal",
    "text": "Proposal\n\nI will offer two option\n\nUngrading\nSpecification Grading\n\nVote as a class (anonymously)\nI update syllabus before add/drop ends."
  },
  {
    "objectID": "00_welcome.rjs.html#ungrading-1",
    "href": "00_welcome.rjs.html#ungrading-1",
    "title": "Welcome",
    "section": "1. Ungrading",
    "text": "1. Ungrading\n\nI provide autograders for all assignments except final.\n\nOr a reference solution with a rubric, if automated testing is too weird (with spoiler alerts).\nI will have a final reference solution but will at most share snippets individually.\n\nYou do whatever you want.\nEnrolled students get an A."
  },
  {
    "objectID": "00_welcome.rjs.html#specification-grading",
    "href": "00_welcome.rjs.html#specification-grading",
    "title": "Welcome",
    "section": "2. Specification Grading",
    "text": "2. Specification Grading\n\nAll the rage. I was never fan but tell me what you think.\nBasically, I will assign some stuff but you don’t have to do all of it perfectly.\n\nNo partial credit, everything is yes/no grading.\n\nI took distributions over final, midterm, and Lab/HW"
  },
  {
    "objectID": "00_welcome.rjs.html#it-pays-to-get-as",
    "href": "00_welcome.rjs.html#it-pays-to-get-as",
    "title": "Welcome",
    "section": "It pays to get A’s",
    "text": "It pays to get A’s\n\n\n\nGrade\nRequirements\n\n\n\n\nA\nFinal meets spec\n\n\nA\n90% ave HW/Lab/Midterm, Final compiles\n\n\nA-\n90% ave HW/Lab, Midterm/Final compile\n\n\nA-\nMidterm meets spec, Final compiles"
  },
  {
    "objectID": "00_welcome.rjs.html#but-bs-are-the-knees",
    "href": "00_welcome.rjs.html#but-bs-are-the-knees",
    "title": "Welcome",
    "section": "But B’s are the Knees",
    "text": "But B’s are the Knees\n\n\n\nGrade\nRequirements\n\n\n\n\nB+\n90% ave HW/Lab, Midterm compiles\n\n\nB\n80% ave HW/Lab, Midterm compiles\n\n\nB-\n80% ave HW/Lab"
  },
  {
    "objectID": "00_welcome.rjs.html#these-may-earn-degrees",
    "href": "00_welcome.rjs.html#these-may-earn-degrees",
    "title": "Welcome",
    "section": "These may (???) earn degrees",
    "text": "These may (???) earn degrees\n\n\n\nGrade\nRequirements\n\n\n\n\nC\n80% ave Lab\n\n\nD\n60% ave Lab\n\n\nF\nAnything else"
  },
  {
    "objectID": "00_welcome.rjs.html#lab-grading",
    "href": "00_welcome.rjs.html#lab-grading",
    "title": "Welcome",
    "section": "Lab Grading",
    "text": "Lab Grading\n\nA (=100%)\n\nMeets spec by end of class\n\nB (=90%)\n\nCompiles at end of class\n\nCan be turned into an executable.\n\n\nF (=0%)\n\nAnything else"
  },
  {
    "objectID": "00_welcome.rjs.html#hw-grading",
    "href": "00_welcome.rjs.html#hw-grading",
    "title": "Welcome",
    "section": "HW Grading",
    "text": "HW Grading\n\nA (=100%)\n\nOn time\nPasses autograder.\n\nB (=90%)\n\nOn time\nCompiles\n\nCan be turned into an executable.\n\n\nF (=0%)\n\nAnything else"
  },
  {
    "objectID": "00_welcome.rjs.html#final",
    "href": "00_welcome.rjs.html#final",
    "title": "Welcome",
    "section": "Final",
    "text": "Final\n\nCreate, document, and publish a self-hosting version control system.\nEntire codebase in Rust.\nMinimum specifications:\n\nSupport nested directory structures.\nSupport text-based files (.rs, .py, .txt)\nAllow reverting to named changes (commits).\nCompleted by you and at most a partner."
  },
  {
    "objectID": "00_welcome.rjs.html#late-work-policy",
    "href": "00_welcome.rjs.html#late-work-policy",
    "title": "Welcome",
    "section": "Late Work Policy",
    "text": "Late Work Policy\n\nLate work is not accepted.\n\nTurning in anything at all for on 90% of assignments yields B.\nMiss 100% of assignments and midterm but do the final for an A."
  },
  {
    "objectID": "00_welcome.rjs.html#ai-policy",
    "href": "00_welcome.rjs.html#ai-policy",
    "title": "Welcome",
    "section": "AI Policy",
    "text": "AI Policy\n\nI would be shocked if it is helpful to you.\nIf you think it is helpful, that is probably not a good sign.\nYou can use it (I wouldn’t)"
  },
  {
    "objectID": "00_welcome.rjs.html#collaboration-policy",
    "href": "00_welcome.rjs.html#collaboration-policy",
    "title": "Welcome",
    "section": "Collaboration Policy",
    "text": "Collaboration Policy\n\nNon-final:\n\nAny size group via enthusiastic consent.\nTurn in your own code/copy.\n\nFinal:\n\nPartners via enthusiastic consent.\nTurn in your own code/copy."
  },
  {
    "objectID": "00_welcome.rjs.html#vote",
    "href": "00_welcome.rjs.html#vote",
    "title": "Welcome",
    "section": "Vote",
    "text": "Vote\n\nIf there’s not a Forms link here I should add one quickly.\nhttps://forms.gle/Cu3FDLHvhHJ1EjYW9"
  },
  {
    "objectID": "00_welcome.rjs.html#the-hard-part",
    "href": "00_welcome.rjs.html#the-hard-part",
    "title": "Welcome",
    "section": "The Hard Part",
    "text": "The Hard Part\n\nAfter ~10 years of systems research I’ve convinced myself only two things really matter:\n\nPointers, and\nRecursion\n\nRecursion isn’t too bad…\n\n&gt;&gt;&gt; exp = lambda b, n : b if n == 1 else b*exp(b,n-1)\n&gt;&gt;&gt; exp(2,8)\n256"
  },
  {
    "objectID": "00_welcome.rjs.html#pointers",
    "href": "00_welcome.rjs.html#pointers",
    "title": "Welcome",
    "section": "Pointers",
    "text": "Pointers\n\nPointers are a beast, but without them nothing makes sense!\n\n\n\n&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; def addx():\n...     x += 1\n...\n&gt;&gt;&gt; addx()\nUnboundLocalError:\n&lt;blah blah blah error messages&gt;\n\n&gt;&gt;&gt; x = [1]\n&gt;&gt;&gt; def addx():\n...     x[0] += 1\n...\n&gt;&gt;&gt; addx()\n&gt;&gt;&gt; x\n[2]"
  },
  {
    "objectID": "00_welcome.rjs.html#insight",
    "href": "00_welcome.rjs.html#insight",
    "title": "Welcome",
    "section": "Insight",
    "text": "Insight\n\nDefinition:\n\nPointers: Variables that store memory addresses.\nRecursion: Functions calling themselves to solve sub-problems.\n\nImportance:\n\nCore to efficient algorithms and memory management in low-level programming."
  },
  {
    "objectID": "00_welcome.rjs.html#python-and-pointers",
    "href": "00_welcome.rjs.html#python-and-pointers",
    "title": "Welcome",
    "section": "Python and Pointers",
    "text": "Python and Pointers\n\nWhy not .py (.js, .java, .cs, .cpp, etc)?\n\nThese languages abstract memory.\nThis abstraction makes computation unclear\nThis lack of clarity:\n\nAdversely impacts education\nComplicates low-level design\nLeads to low performance\n\nGood languages (except Java) but not for us"
  },
  {
    "objectID": "00_welcome.rjs.html#rust-and-pointers",
    "href": "00_welcome.rjs.html#rust-and-pointers",
    "title": "Welcome",
    "section": "Rust and Pointers",
    "text": "Rust and Pointers\n\nRust:\n\nObscures pointers, but…\nDoes not obscure memory.\n\nThis is good!\n\nMemory matters, but pointers are historical accident.\n\nYou should probably use Rust in every application where correctness or performance matters."
  },
  {
    "objectID": "00_welcome.rjs.html#rust-and-recursion",
    "href": "00_welcome.rjs.html#rust-and-recursion",
    "title": "Welcome",
    "section": "Rust and Recursion",
    "text": "Rust and Recursion\n\nSeparately, Rust is built on one of the most exciting ongoing computer science research efforts:\nLLVM (stands for LLVM)\nBasically, a way of turning human-readable code into machine-executable code.\n\nVery good at turning recursion into iteration and/or vice versa.\n\nSo Rust experiences less costs on recursion than many other languages."
  },
  {
    "objectID": "00_welcome.rjs.html#git",
    "href": "00_welcome.rjs.html#git",
    "title": "Welcome",
    "section": "Git",
    "text": "Git\n\nIf you don’t know git, you should soon.\nGit corresponds, like the others, to a command: git\n\nIt is common now to use other techniques, but the command remains extremely stable\n\nQuoth GitHub, the first and greatest of the collaboration tools:\n\n\nIf you want a lot of control and flexibility, you can use the command line."
  },
  {
    "objectID": "00_welcome.rjs.html#git-example",
    "href": "00_welcome.rjs.html#git-example",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nSo basically, you have things called repositories or “repos”\n\n\n\n\n\n\nflowchart LR\n  A(My ️‍🔥 code repo)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-1",
    "href": "00_welcome.rjs.html#git-example-1",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nThen you realize you wrote an infinite loop so you update it\n\n\n\n\n\n\nflowchart LR\n  A(My ️‍🔥 code repo v0 ) --&gt; B(My ️‍🔥 code repo v1)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-2",
    "href": "00_welcome.rjs.html#git-example-2",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nThen you come to class and realize your code is on your gaming rig in your apartment.\n\n\n\n\n\n\nflowchart LR\n  A(&lt;s&gt;My ️‍🔥 code repo v0&lt;/s&gt;) --&gt; B(&lt;s&gt;My ️‍🔥 code repo v1&lt;/s&gt;)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-3",
    "href": "00_welcome.rjs.html#git-example-3",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nSo you save your code on GitHub\n\nGH = GitHub, GR = Gaming Rig\n\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GH.‍🔥 v0)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-4",
    "href": "00_welcome.rjs.html#git-example-4",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nBut you realize you didn’t sanitize your inputs so you update again.\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-5",
    "href": "00_welcome.rjs.html#git-example-5",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nThen you have class again and grab the GitHub version onto your LT = Laptop\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-6",
    "href": "00_welcome.rjs.html#git-example-6",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nYou notice it has the bug so you fix it again on your laptop in almost the same way\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-7",
    "href": "00_welcome.rjs.html#git-example-7",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nAnd save that back to GitHub then head back home to play Nethack on your 12000USD Gaming PC\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-8",
    "href": "00_welcome.rjs.html#git-example-8",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nYou realize you also added some ASCII art and try to send that to GitHub\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)\n  G --&gt; H(GH.‍🔥 v2)\n  C --&gt; H"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-9",
    "href": "00_welcome.rjs.html#git-example-9",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nTwo arrows into one thing is a merge conflict and out-of-scope for now.\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)\n  G --&gt; H{💥}\n  C --&gt; H"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-10",
    "href": "00_welcome.rjs.html#git-example-10",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nBasically versions of code can live in more than one place.\n\nAh, versions, our old friend…\n\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)\n  G --&gt; H{💥}\n  C --&gt; H"
  },
  {
    "objectID": "00_welcome.rjs.html#visually",
    "href": "00_welcome.rjs.html#visually",
    "title": "Welcome",
    "section": "Visually",
    "text": "Visually\n\n\n\n\n\nflowchart LR\n  B(Wordle)\n  B --&gt; C(SHA512)\n  C --&gt; D(Ed25519)\n  B --&gt; F(Graphs)\n  C --&gt; H(Merkle)\n  F --&gt; H\n  F --&gt; G(LCS)\n  H --&gt; I(VCS)\n  G --&gt; I\n  D --&gt; I\n\n\n\n\n\n\n\nLCS = Longest common subsequence, like diff\nVCS = Version Control System, like git"
  },
  {
    "objectID": "00_welcome.rjs.html#sha",
    "href": "00_welcome.rjs.html#sha",
    "title": "Welcome",
    "section": "SHA",
    "text": "SHA\n\nSHA Basics:\n\nCryptographic hash function family.\nInput data into fixed-size hash values.\n\nUse Cases:\n\nData integrity.\n\nLearning Objectives:\n\nReason about bits and bytes."
  },
  {
    "objectID": "00_welcome.rjs.html#ed25519",
    "href": "00_welcome.rjs.html#ed25519",
    "title": "Welcome",
    "section": "Ed25519",
    "text": "Ed25519\n\nEd25519 Basics:\n\nPublic-key signature system.\nBased on elliptic curve cryptography (specifically, Edwards curves).\nUses SHA-512 and Curve25519.\n\nUse Cases:\n\nConfidentiality and authentication.\n\nLearning Objectives:\n\nReason about numerical computing."
  },
  {
    "objectID": "00_welcome.rjs.html#graphs",
    "href": "00_welcome.rjs.html#graphs",
    "title": "Welcome",
    "section": "Graphs",
    "text": "Graphs\n\nIntroduce graphs as a way to:\n\nOrganize files\nCompare files\nTrack changes."
  },
  {
    "objectID": "00_welcome.rjs.html#longest-common-subseq.-lcs",
    "href": "00_welcome.rjs.html#longest-common-subseq.-lcs",
    "title": "Welcome",
    "section": "Longest Common Subseq. (LCS)",
    "text": "Longest Common Subseq. (LCS)\n\nLCS Basics:\n\nFind longest sequence of characters in the same relative order in two or more sequences, but not necessarily contiguously.\nOften solved using dynamic programming.\n\nUse Cases:\n\nFile comparison (e.g., diff utility).\n\nLearning Objectives:\n\nLinear data structure."
  },
  {
    "objectID": "00_welcome.rjs.html#merkle-trees",
    "href": "00_welcome.rjs.html#merkle-trees",
    "title": "Welcome",
    "section": "Merkle Trees",
    "text": "Merkle Trees\n\nMerkle Trees:\n\nTree structure using SHA for data integrity.\nHashes stored as nodes; pointers link them.\nLeaf nodes are RSA signatures!\n\nMerkle Trees are balanced\n\nHierarchical data structure embedded in linear data structure."
  },
  {
    "objectID": "00_welcome.rjs.html#file-system",
    "href": "00_welcome.rjs.html#file-system",
    "title": "Welcome",
    "section": "File System",
    "text": "File System\n\nThe file system a tree that cannot (easily) be embedded in a linear data structure.\n\nr\n├── DESCRIPTION\n├── Makefile\n├── NAMESPACE\n├── R\n│   └── vcd2df.R\n├── man\n│   └── vcd2df.Rd\n├── r\n├── vcd2df.Rcheck\n│   ├── 00_pkg_src\n│   │   └── vcd2df\n│   │       ├── DESCRIPTION\n│   │       ├── NAMESPACE\n│   │       ├── R\n│   │       │   └── vcd2df.R\n│   │       ├── build\n│   │       │   └── vignette.rds\n│   │       ├── inst\n│   │       │   └── doc\n│   │       │       ├── index.R\n│   │       │       ├── index.html\n│   │       │       └── index.qmd\n│   │       ├── man\n│   │       │   └── vcd2df.Rd\n│   │       └── vignettes\n│   │           └── index.qmd\n│   ├── 00check.log\n│   ├── 00install.out\n│   ├── Rdlatex.log\n│   ├── vcd2df\n│   │   ├── DESCRIPTION\n│   │   ├── INDEX\n│   │   ├── Meta\n│   │   │   ├── Rd.rds\n│   │   │   ├── features.rds\n│   │   │   ├── hsearch.rds\n│   │   │   ├── links.rds\n│   │   │   ├── nsInfo.rds\n│   │   │   ├── package.rds\n│   │   │   └── vignette.rds\n│   │   ├── NAMESPACE\n│   │   ├── R\n│   │   │   ├── vcd2df\n│   │   │   ├── vcd2df.rdb\n│   │   │   └── vcd2df.rdx\n│   │   ├── doc\n│   │   │   ├── index.R\n│   │   │   ├── index.html\n│   │   │   └── index.qmd\n│   │   ├── help\n│   │   │   ├── AnIndex\n│   │   │   ├── aliases.rds\n│   │   │   ├── paths.rds\n│   │   │   ├── vcd2df.rdb\n│   │   │   └── vcd2df.rdx\n│   │   └── html\n│   │       ├── 00Index.html\n│   │       └── R.css\n│   ├── vcd2df-Ex.R\n│   ├── vcd2df-Ex.Rout\n│   ├── vcd2df-Ex.pdf\n│   ├── vcd2df-manual.log\n│   └── vcd2df-manual.pdf\n├── vcd2df_1.0.1.tar.gz\n└── vignettes\n    └── index.qmd"
  },
  {
    "objectID": "00_welcome.rjs.html#vim",
    "href": "00_welcome.rjs.html#vim",
    "title": "Welcome",
    "section": "Vim",
    "text": "Vim\n\nYou should use vim or another console-based editor as a component of your learning in this class.\nThis will not be assessed (how can it be) but will likely be expected in a non-trivial subset of settings this course material will be useful.\nI will live-code in either vim or helix"
  },
  {
    "objectID": "01_rustup.rjs.html#announcements",
    "href": "01_rustup.rjs.html#announcements",
    "title": "Rustup",
    "section": "Announcements",
    "text": "Announcements\n\nLab Day\n\nSet up environment"
  },
  {
    "objectID": "01_rustup.rjs.html#homework",
    "href": "01_rustup.rjs.html#homework",
    "title": "Rustup",
    "section": "Homework",
    "text": "Homework\n\nThe first homework, “Hi world”, is ready after this class.\n\nIt is comically trivial.\nMostly makes sure you have everything set up.\n\nDue Friday, 1 Sept. at 1440 ET."
  },
  {
    "objectID": "01_rustup.rjs.html#today",
    "href": "01_rustup.rjs.html#today",
    "title": "Rustup",
    "section": "Today",
    "text": "Today\n\nSet up your operating system, if it is not UNIX-based.\nInstall Rust.\nInstall Git\nBonus!\n\nInstall Vim, Neovim, or Helix."
  },
  {
    "objectID": "01_rustup.rjs.html#windows",
    "href": "01_rustup.rjs.html#windows",
    "title": "Rustup",
    "section": "Windows",
    "text": "Windows\n\nWindows usage is not supported in the course.\nIf you are using Windows, you must:\n\nUse Windows Subsystem for Linux (Recommended)\nUse Docker or Podman\nUse Git Bash or Mingw in some other way (Discouraged)\nUse Cygwin (Discouraged)"
  },
  {
    "objectID": "01_rustup.rjs.html#rustup",
    "href": "01_rustup.rjs.html#rustup",
    "title": "Rustup",
    "section": "Rustup",
    "text": "Rustup\n\nOn your UNIX-based OS:\n\nLinux\nMacOS\nWSL 2\nFreeBSD\n\nOpen the command line and run the following:\n\ncurl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n\nRead more"
  },
  {
    "objectID": "01_rustup.rjs.html#verify",
    "href": "01_rustup.rjs.html#verify",
    "title": "Rustup",
    "section": "Verify",
    "text": "Verify\n\nTo ensure you have a Rust installation, run:\n\nrustc --version\n\nAt time of slide creation, I saw this version:\n\nrustc 1.87.0 (17067e9ac 2025-05-09)"
  },
  {
    "objectID": "01_rustup.rjs.html#git-installation",
    "href": "01_rustup.rjs.html#git-installation",
    "title": "Rustup",
    "section": "Git Installation",
    "text": "Git Installation\n\nEnsure you have a Git installation:\n\nWindows:\n\nLaunch WSL\n\nwsl ~\n\nInstall git within WSL\n\nsudo apt install git\nMacOS:\n\nLaunch the terminal and then:\n\nxcode-select --install"
  },
  {
    "objectID": "01_rustup.rjs.html#verify-1",
    "href": "01_rustup.rjs.html#verify-1",
    "title": "Rustup",
    "section": "Verify",
    "text": "Verify\n\nVerify install via:\n\ngit --version\n\nI had:\n\ngit version 2.34.1"
  },
  {
    "objectID": "01_rustup.rjs.html#account",
    "href": "01_rustup.rjs.html#account",
    "title": "Rustup",
    "section": "Account",
    "text": "Account\n\nEnsure you have an account on GitHub.\nRead More"
  },
  {
    "objectID": "01_rustup.rjs.html#repository",
    "href": "01_rustup.rjs.html#repository",
    "title": "Rustup",
    "section": "Repository",
    "text": "Repository\n\nCreate a repository for this class.\nRequirements\n\nName is 271rs\nUse this template\nMay be public or private to you and me (cd-public).\n\nRead more\n\nMust email me a link to your repository from your @willamette.edu email.\n\nhttps://github.com/cd-example/271rs"
  },
  {
    "objectID": "01_rustup.rjs.html#remote",
    "href": "01_rustup.rjs.html#remote",
    "title": "Rustup",
    "section": "Remote",
    "text": "Remote\n\nWe have now created a remote repository on GitHub.\n\nRemote as in “not on our computer we are using right now”\nAs in “on a web server somewhere”\n\nNo we will make a local repository on our own computer.\nThen connect them!"
  },
  {
    "objectID": "01_rustup.rjs.html#security-concession",
    "href": "01_rustup.rjs.html#security-concession",
    "title": "Rustup",
    "section": "Security Concession",
    "text": "Security Concession\n\nWe will use SSH, the “Secure Shell Protocol”\nIt is supported by git/GitHub and all major operating systems."
  },
  {
    "objectID": "01_rustup.rjs.html#keygen",
    "href": "01_rustup.rjs.html#keygen",
    "title": "Rustup",
    "section": "Keygen",
    "text": "Keygen\n\nSSH is based around having “keys”\n\nUnder the hood, these are special numbers with special properties related to primes, basically.\n\nWe generate a special unique key we can use as a password or signature.\n\nssh-keygen"
  },
  {
    "objectID": "01_rustup.rjs.html#prompts",
    "href": "01_rustup.rjs.html#prompts",
    "title": "Rustup",
    "section": "Prompts",
    "text": "Prompts\n\nThis example uses (1) the default location and (2) no passphrase.\n\nThis is less secure but easier to manage.\nWork in a passphrase as soon as you can!\n\n\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/home/calvin/.ssh/id_ed25519): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/calvin/.ssh/id_ed25519\n$ cat ~/.ssh/id_ed25519.pub \nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIE5cnx/tgBp8v/LnuHz28evmnRPrnlz3cvYaAAM4G0ik calvin@calvin-Precision-3490\n\nYou now have a key! Let’s find a lock."
  },
  {
    "objectID": "01_rustup.rjs.html#github-1",
    "href": "01_rustup.rjs.html#github-1",
    "title": "Rustup",
    "section": "GitHub",
    "text": "GitHub\n\nThe purpose of this exercise is to connect to GitHub!\nWe will mostly use git for that, but we can check if we have a connection easily:\n\nssh -T git@github.com\n\nRead more"
  },
  {
    "objectID": "01_rustup.rjs.html#example",
    "href": "01_rustup.rjs.html#example",
    "title": "Rustup",
    "section": "Example",
    "text": "Example\n\nThis is what I see:\n\nThe authenticity of host 'github.com (140.82.116.3)' can't be established.\nED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])?\n\nBefore saying “yes” or “no” compare versus the “public SSH key fingerprints”\n\nCheck them here\n\nBy default, the modern keygen uses “Ed25519” so compare those keys, and click “yes” if they match!"
  },
  {
    "objectID": "01_rustup.rjs.html#connecting",
    "href": "01_rustup.rjs.html#connecting",
    "title": "Rustup",
    "section": "Connecting",
    "text": "Connecting\n\nAfter confirming the key correctness, you will likely see this.\n\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added 'github.com' (ED25519) to the list of known hosts.\ngit@github.com: Permission denied (publickey)."
  },
  {
    "objectID": "01_rustup.rjs.html#one-way",
    "href": "01_rustup.rjs.html#one-way",
    "title": "Rustup",
    "section": "One Way",
    "text": "One Way\n\nNow we have instructed our computer to trust GitHub.\nTo save our code to GitHub, we must also get GitHub to trust our computer.\nWe generated our key, now we must match it to our lock on GitHub!"
  },
  {
    "objectID": "01_rustup.rjs.html#github-pt-1",
    "href": "01_rustup.rjs.html#github-pt-1",
    "title": "Rustup",
    "section": "GitHub pt 1",
    "text": "GitHub pt 1\n\nWe follow this guide\nReturn to GitHub and in the top right click your profile.\n\nFor me, a picture of myself.\n\nScroll down to “Settings” and click.\n\nLast in 2nd grouping, for me."
  },
  {
    "objectID": "01_rustup.rjs.html#github-pt-2",
    "href": "01_rustup.rjs.html#github-pt-2",
    "title": "Rustup",
    "section": "GitHub pt 2",
    "text": "GitHub pt 2\n\nWithin settings left-side menu click “SSH and GPG keys”\n\nMiddle of 2nd group (Access) for me.\n\nWithin the center block click New SSH key in the top right of the block."
  },
  {
    "objectID": "01_rustup.rjs.html#prompt",
    "href": "01_rustup.rjs.html#prompt",
    "title": "Rustup",
    "section": "Prompt",
    "text": "Prompt\n\nI get a page “Add new SSH Key”.\nI provide a title (like “For 271rs class” or “Laptop”)\nNow we’ll get our key from our system to use.\nRecall we previously generated a key to the default location, like /home/calvin/.ssh/id_ed25519\n\nIf you don’t remember, just type ssh-keygen and it’ll show you."
  },
  {
    "objectID": "01_rustup.rjs.html#copypaste",
    "href": "01_rustup.rjs.html#copypaste",
    "title": "Rustup",
    "section": "Copy/Paste",
    "text": "Copy/Paste\n\nTo get the key for GitHub, we can can\n\ncat that file in the command line\nCopy from the command line\nPaste into the GitHub “Key” field\nClick Add SSH key"
  },
  {
    "objectID": "01_rustup.rjs.html#ssh-test",
    "href": "01_rustup.rjs.html#ssh-test",
    "title": "Rustup",
    "section": "SSH Test",
    "text": "SSH Test\n\nAfter adding the key to the account, I confirm via SSH like so:\n\nssh -T git@github.com\n\nI see the following:\n\nHi cd-public! You've successfully authenticated, but GitHub does not provide shell access."
  },
  {
    "objectID": "01_rustup.rjs.html#clone-pt1",
    "href": "01_rustup.rjs.html#clone-pt1",
    "title": "Rustup",
    "section": "Clone pt1",
    "text": "Clone pt1\n\nNavigate to the repository webpage, like github.com/cd-example/271rs\nFind the &lt;&gt; Code button in the top right.\nClick it:\n\nSelect the top “local” tab (for or local repository)\nSelect the SSH option (for our SSH key)\nCopy the name, like\n\n\n\ngit@github.com:cd-example/271rs"
  },
  {
    "objectID": "01_rustup.rjs.html#clone-pt2",
    "href": "01_rustup.rjs.html#clone-pt2",
    "title": "Rustup",
    "section": "Clone pt2",
    "text": "Clone pt2\n\nWithin terminal, where you keep files for this class.\n\nProbably just do\n\ncd ~\ngit clone git@github.com:cd-example/271rs \nVerify by listing the contents of the 271rs directory via:\n\nls 271rs\n\nYou should see a README.md and a LICENSE"
  },
  {
    "objectID": "01_rustup.rjs.html#enter-the-repository",
    "href": "01_rustup.rjs.html#enter-the-repository",
    "title": "Rustup",
    "section": "Enter the Repository",
    "text": "Enter the Repository\n\nTo change the directory within which you are working in the commandline from your home to the repository for this class, do:\n\ncd 271rs\n\nVerify the change via\n\npwd\n\nThis will give the full address of your class folder, ending in 271rs"
  },
  {
    "objectID": "01_rustup.rjs.html#today-1",
    "href": "01_rustup.rjs.html#today-1",
    "title": "Rustup",
    "section": "Today",
    "text": "Today\n\nTo complete the lab today, add a 01/rustup.md file to your 271rs\nSend me a link to a 271rs repository I have permission to view.\n\nTo be clear:\n\nI must receive an email with a hyperlink to a GitHub repository.\nI must have view access to public repository or a repository on which I am added as a collaborator."
  },
  {
    "objectID": "01_rustup.rjs.html#names-matter",
    "href": "01_rustup.rjs.html#names-matter",
    "title": "Rustup",
    "section": "Names Matter",
    "text": "Names Matter\n\nYour submission will be tested be a script.\n\nThe file must be named rustup.md\nIt must be in a folder named 01\nThe repository must be named 271rs\nNo other arrangement constitutes a lab submission.\nThe contents of rustup.md are not relevant. &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD"
  },
  {
    "objectID": "01_rustup.rjs.html#useful-commands",
    "href": "01_rustup.rjs.html#useful-commands",
    "title": "Rustup",
    "section": "Useful commands",
    "text": "Useful commands\n\nYou may use ls to list files/folders.\nYou make use mkdir 01 to creat the 01 folder.\nYou may use vim 01/rustup.md to edit the rustup.md file in the 01 folder.\n\nThe 01 folder must exist to do this.\n\nLearn more here\n\n\n\n\n\n\n\n88d5569f117a55a2960939684283dc3f8d56383e"
  },
  {
    "objectID": "01_rustup.rjs.html#file-editor",
    "href": "01_rustup.rjs.html#file-editor",
    "title": "Rustup",
    "section": "File Editor",
    "text": "File Editor\n\nLet’s make a new file.\nI recommend using vim, neovim, or helix.\nProbably already have it on MacOS.\nOn WSL install via\n\nsudo apt install vim"
  },
  {
    "objectID": "01_rustup.rjs.html#file-editting",
    "href": "01_rustup.rjs.html#file-editting",
    "title": "Rustup",
    "section": "File Editting",
    "text": "File Editting\n\nTo create said file, type vim then the name of the file.\nIf you just cloned 271rs, there will be a 271rs folder into which you should create a 01 folder.\n\nStands for week 0, day 1\n\nvim 01/rustup.md\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n======= &gt;&gt;&gt;&gt;&gt;&gt;&gt; 88d5569f117a55a2960939684283dc3f8d56383e"
  },
  {
    "objectID": "01_rustup.rjs.html#using-vim",
    "href": "01_rustup.rjs.html#using-vim",
    "title": "Rustup",
    "section": "Using vim",
    "text": "Using vim\n\nThere’s more to life that using vim but basically:\n\nPress i to enter “insert mode” (so you can type)\nWhen you are done typing, press ESC then type :x to save and exit.\nRead more\n\nJust type some notes you have from today."
  },
  {
    "objectID": "01_rustup.rjs.html#check-status",
    "href": "01_rustup.rjs.html#check-status",
    "title": "Rustup",
    "section": "Check Status",
    "text": "Check Status\n\nYou have now added a new file to your repository.\nI consult status often, yours will likely look like this:\n\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        01/rustup.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
  },
  {
    "objectID": "01_rustup.rjs.html#add",
    "href": "01_rustup.rjs.html#add",
    "title": "Rustup",
    "section": "Add",
    "text": "Add\n\nThe first thing we not is that there are “Untracked files”\nWhile we made a hello.py and have it in our hello-world directory, it isn’t yet “tracked” by git!\nBy default, git only keeps track of what we tell it to!\nSo, we tell it to track our code!\n\ngit add 01/rustup.md"
  },
  {
    "objectID": "01_rustup.rjs.html#status",
    "href": "01_rustup.rjs.html#status",
    "title": "Rustup",
    "section": "Status",
    "text": "Status\n\nI check status again\n\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   01_rustup.md"
  },
  {
    "objectID": "01_rustup.rjs.html#commit",
    "href": "01_rustup.rjs.html#commit",
    "title": "Rustup",
    "section": "Commit",
    "text": "Commit\n\nWith git now aware of hello.py, we need to commit or changes for git to save them.\n\nSimilar to saving files to the file system.\nThere are, of course, ways to automate this.\n\nThis probably won’t work at first (next slide!) but try:\n\ngit commit -a -m \"first commit\""
  },
  {
    "objectID": "01_rustup.rjs.html#a--m",
    "href": "01_rustup.rjs.html#a--m",
    "title": "Rustup",
    "section": "“-a -m”",
    "text": "“-a -m”\n\nCommits require a commit message (like a version name or number) so specify with -m\nUsually I provide -a to commit “all” files.\nI usually make some effort to make my life easier with specific commit messages, perhaps listing:\n\nWhat I’m trying to do\nWhy?"
  },
  {
    "objectID": "01_rustup.rjs.html#config",
    "href": "01_rustup.rjs.html#config",
    "title": "Rustup",
    "section": "Config",
    "text": "Config\n\nIf you haven’t used git on your system before, you’ll have to tell git who you are.\n\nIn git there are no anonymous changes - you have to sign every change you make.\n\nYou’ll be prompted to provide something like this:\n\ngit config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\""
  },
  {
    "objectID": "01_rustup.rjs.html#my-name",
    "href": "01_rustup.rjs.html#my-name",
    "title": "Rustup",
    "section": "My name",
    "text": "My name\n\nI often include which computer I’m using in my name and also don’t use a real email address.\n\nMy GitHub account is already attached to an email address, so I use a throwaway for commits.\n\n\ngit config --global user.email \"prof_calvin@c89&gt;rs.edu\"\ngit config --global user.name \"Calvin for Class\""
  },
  {
    "objectID": "01_rustup.rjs.html#looping-back",
    "href": "01_rustup.rjs.html#looping-back",
    "title": "Rustup",
    "section": "Looping Back",
    "text": "Looping Back\n\nOnce you have provided your identity, you can successfuly complete a commit.\n\ngit commit -a -m \"first commit\"\n\nThis will:\n\nMark current code as a version, named by your commit message.\n\nThis won’t:\n\nDo anything to GitHub."
  },
  {
    "objectID": "01_rustup.rjs.html#push",
    "href": "01_rustup.rjs.html#push",
    "title": "Rustup",
    "section": "Push",
    "text": "Push\n\nA commit saves changing on your computer.\nTo save on GitHub, push changes to the cloud\n\ngit push\n\nAfter a moment and some diagnostic text, you should be able to see your code on GitHub, possibly after refreshing the page!"
  },
  {
    "objectID": "01_rustup.rjs.html#diagnostics",
    "href": "01_rustup.rjs.html#diagnostics",
    "title": "Rustup",
    "section": "Diagnostics",
    "text": "Diagnostics\n\nFor example, you might see the following:\n\nEnumerating objects: 27, done.\nCounting objects: 100% (27/27), done.\nDelta compression using up to 22 threads\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (16/16), 98.54 KiB | 2.46 MiB/s, done.\nTotal 16 (delta 11), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (11/11), completed with 10 local objects.\nTo github.com:cd-example/271rs.git\n   adaa3a7..ba3c794  main -&gt; main"
  },
  {
    "objectID": "01_rustup.rjs.html#verify-2",
    "href": "01_rustup.rjs.html#verify-2",
    "title": "Rustup",
    "section": "Verify",
    "text": "Verify\n\nEnsure you have a 01/rustup.md\nEmail me."
  },
  {
    "objectID": "01_rustup.rjs.html#easier-after",
    "href": "01_rustup.rjs.html#easier-after",
    "title": "Rustup",
    "section": "Easier After",
    "text": "Easier After\n\nA lot of what we did, we only have to do once:\n\ngit config\nssh-keygen\nset origin\n\nMany are special cases:\n\nOnly have to make new repositories for… new repositories (likely projects)\nOnly have to git add for new files."
  },
  {
    "objectID": "01_rustup.rjs.html#quick-example",
    "href": "01_rustup.rjs.html#quick-example",
    "title": "Rustup",
    "section": "Quick Example",
    "text": "Quick Example\n\nLet’s add 02/hi_world.rs\nWe’ll create a new file at the command line.\n\nvim 02/hi_world.rs\n\nAdd any text\n\n\n\nhi_world.rs\n\nWait I don't know rust yet."
  },
  {
    "objectID": "01_rustup.rjs.html#add-commit-push",
    "href": "01_rustup.rjs.html#add-commit-push",
    "title": "Rustup",
    "section": "Add, Commit, Push",
    "text": "Add, Commit, Push\n\nTo get the code onto Github, add to the repo:\n\ngit add hi_world.rs \n\nCommit changes to a version:\n\ngit commit -a -m \"You say hello, I say goodbye\"\n\nPush to GitHub\n\ngit push\n\nAnd that’s that!"
  },
  {
    "objectID": "01_rustup.rjs.html#altogether",
    "href": "01_rustup.rjs.html#altogether",
    "title": "Rustup",
    "section": "Altogether",
    "text": "Altogether\n\nFor a single copy/paste\n\ngit add bye.py\ngit commit -a -m \"You say hello, I say goodbye\"\ngit push\n\nIf it works, you’ll see the change on GitHub!"
  },
  {
    "objectID": "01_rustup.rjs.html#again",
    "href": "01_rustup.rjs.html#again",
    "title": "Rustup",
    "section": "Again",
    "text": "Again\n\nPerhaps we wish to be more correct with a well-formed Rust comment.\n\n\n\nbye.py\n\n// TODO: Homework 0 \n\n\nWe’ll learn Rust latter."
  },
  {
    "objectID": "01_rustup.rjs.html#no-add",
    "href": "01_rustup.rjs.html#no-add",
    "title": "Rustup",
    "section": "No Add",
    "text": "No Add\n\nDon’t need an add this time!\n\ngit commit -a -m \"Rust comment\"\ngit push"
  },
  {
    "objectID": "01_rustup.rjs.html#pulling",
    "href": "01_rustup.rjs.html#pulling",
    "title": "Rustup",
    "section": "Pulling",
    "text": "Pulling\n\nTo get remote changes reflected locally, simply use\n\ngit pull\n\nThis will be how assignment feedback is distributed.\nJust git pull every time you start working, basically.\nAlso good when you are working on multiple devices."
  },
  {
    "objectID": "01_rustup.html",
    "href": "01_rustup.html",
    "title": "Rustup",
    "section": "",
    "text": "Lab Day\n\nSet up environment",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#announcements",
    "href": "01_rustup.html#announcements",
    "title": "Rustup",
    "section": "",
    "text": "Lab Day\n\nSet up environment",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#homework",
    "href": "01_rustup.html#homework",
    "title": "Rustup",
    "section": "Homework",
    "text": "Homework\n\nThe first homework, “Hi world”, is ready after this class.\n\nIt is comically trivial.\nMostly makes sure you have everything set up.\n\nDue Friday, 1 Sept. at 1440 ET.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#today",
    "href": "01_rustup.html#today",
    "title": "Rustup",
    "section": "Today",
    "text": "Today\n\nSet up your operating system, if it is not UNIX-based.\nInstall Rust.\nInstall Git\nBonus!\n\nInstall Vim, Neovim, or Helix.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#windows",
    "href": "01_rustup.html#windows",
    "title": "Rustup",
    "section": "Windows",
    "text": "Windows\n\nWindows usage is not supported in the course.\nIf you are using Windows, you must:\n\nUse Windows Subsystem for Linux (Recommended)\nUse Docker or Podman\nUse Git Bash or Mingw in some other way (Discouraged)\nUse Cygwin (Discouraged)\n\n\n\n\nWSL 2\n\nWindows Subsystem for Linux\nFollow this guide\nNotes:\n\nUse WSL 2. It is the default.\nI recommend using Ubuntu distribution. You will be asked.\nI prefer Windows Terminal.\n\nWindows key -&gt; “Terminal” -&gt; Enter -&gt; wsl\n\n\n\n\n\n\nDocker or Podman\n\nBoth will require WSL 2, but install for you\nDocker has better Windows support, I believe Podman is seeing more use.\nFollow this guide.\nNotes:\n\nUse WSL 2 backend.\nYou are responsible for teaching yourself containers.\nSlides for last year.\n\n\n\n\n\nGit Bash\n\nI have set up guide for Git Bash for another course\nThis seemed like it could work. I won’t be checking.\n\n\n\n\nCygwin\n\nI have no idea how Cygwin works but it’s pretty cool.\nBasically no longer in use due to WSL 2 and Docker.\nFollow this guide",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#rustup",
    "href": "01_rustup.html#rustup",
    "title": "Rustup",
    "section": "Rustup",
    "text": "Rustup\n\nOn your UNIX-based OS:\n\nLinux\nMacOS\nWSL 2\nFreeBSD\n\nOpen the command line and run the following:\n\ncurl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n\nRead more",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#verify",
    "href": "01_rustup.html#verify",
    "title": "Rustup",
    "section": "Verify",
    "text": "Verify\n\nTo ensure you have a Rust installation, run:\n\nrustc --version\n\nAt time of slide creation, I saw this version:\n\nrustc 1.87.0 (17067e9ac 2025-05-09)",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#git-installation",
    "href": "01_rustup.html#git-installation",
    "title": "Rustup",
    "section": "Git Installation",
    "text": "Git Installation\n\nEnsure you have a Git installation:\n\nWindows:\n\nLaunch WSL\n\nwsl ~\n\nInstall git within WSL\n\nsudo apt install git\nMacOS:\n\nLaunch the terminal and then:\n\nxcode-select --install",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#verify-1",
    "href": "01_rustup.html#verify-1",
    "title": "Rustup",
    "section": "Verify",
    "text": "Verify\n\nVerify install via:\n\ngit --version\n\nI had:\n\ngit version 2.34.1",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#account",
    "href": "01_rustup.html#account",
    "title": "Rustup",
    "section": "Account",
    "text": "Account\n\nEnsure you have an account on GitHub.\nRead More",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#repository",
    "href": "01_rustup.html#repository",
    "title": "Rustup",
    "section": "Repository",
    "text": "Repository\n\nCreate a repository for this class.\nRequirements\n\nName is 271rs\nUse this template\nMay be public or private to you and me (cd-public).\n\nRead more\n\nMust email me a link to your repository from your @willamette.edu email.\n\nhttps://github.com/cd-example/271rs",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#remote",
    "href": "01_rustup.html#remote",
    "title": "Rustup",
    "section": "Remote",
    "text": "Remote\n\nWe have now created a remote repository on GitHub.\n\nRemote as in “not on our computer we are using right now”\nAs in “on a web server somewhere”\n\nNo we will make a local repository on our own computer.\nThen connect them!",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#security-concession",
    "href": "01_rustup.html#security-concession",
    "title": "Rustup",
    "section": "Security Concession",
    "text": "Security Concession\n\nWe will use SSH, the “Secure Shell Protocol”\nIt is supported by git/GitHub and all major operating systems.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#keygen",
    "href": "01_rustup.html#keygen",
    "title": "Rustup",
    "section": "Keygen",
    "text": "Keygen\n\nSSH is based around having “keys”\n\nUnder the hood, these are special numbers with special properties related to primes, basically.\n\nWe generate a special unique key we can use as a password or signature.\n\nssh-keygen",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#prompts",
    "href": "01_rustup.html#prompts",
    "title": "Rustup",
    "section": "Prompts",
    "text": "Prompts\n\nThis example uses (1) the default location and (2) no passphrase.\n\nThis is less secure but easier to manage.\nWork in a passphrase as soon as you can!\n\n\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/home/calvin/.ssh/id_ed25519): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/calvin/.ssh/id_ed25519\n$ cat ~/.ssh/id_ed25519.pub \nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIE5cnx/tgBp8v/LnuHz28evmnRPrnlz3cvYaAAM4G0ik calvin@calvin-Precision-3490\n\nYou now have a key! Let’s find a lock.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#github-1",
    "href": "01_rustup.html#github-1",
    "title": "Rustup",
    "section": "GitHub",
    "text": "GitHub\n\nThe purpose of this exercise is to connect to GitHub!\nWe will mostly use git for that, but we can check if we have a connection easily:\n\nssh -T git@github.com\n\nRead more",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#example",
    "href": "01_rustup.html#example",
    "title": "Rustup",
    "section": "Example",
    "text": "Example\n\nThis is what I see:\n\nThe authenticity of host 'github.com (140.82.116.3)' can't be established.\nED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])?\n\nBefore saying “yes” or “no” compare versus the “public SSH key fingerprints”\n\nCheck them here\n\nBy default, the modern keygen uses “Ed25519” so compare those keys, and click “yes” if they match!",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#connecting",
    "href": "01_rustup.html#connecting",
    "title": "Rustup",
    "section": "Connecting",
    "text": "Connecting\n\nAfter confirming the key correctness, you will likely see this.\n\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added 'github.com' (ED25519) to the list of known hosts.\ngit@github.com: Permission denied (publickey).",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#one-way",
    "href": "01_rustup.html#one-way",
    "title": "Rustup",
    "section": "One Way",
    "text": "One Way\n\nNow we have instructed our computer to trust GitHub.\nTo save our code to GitHub, we must also get GitHub to trust our computer.\nWe generated our key, now we must match it to our lock on GitHub!",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#github-pt-1",
    "href": "01_rustup.html#github-pt-1",
    "title": "Rustup",
    "section": "GitHub pt 1",
    "text": "GitHub pt 1\n\nWe follow this guide\nReturn to GitHub and in the top right click your profile.\n\nFor me, a picture of myself.\n\nScroll down to “Settings” and click.\n\nLast in 2nd grouping, for me.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#github-pt-2",
    "href": "01_rustup.html#github-pt-2",
    "title": "Rustup",
    "section": "GitHub pt 2",
    "text": "GitHub pt 2\n\nWithin settings left-side menu click “SSH and GPG keys”\n\nMiddle of 2nd group (Access) for me.\n\nWithin the center block click New SSH key in the top right of the block.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#prompt",
    "href": "01_rustup.html#prompt",
    "title": "Rustup",
    "section": "Prompt",
    "text": "Prompt\n\nI get a page “Add new SSH Key”.\nI provide a title (like “For 271rs class” or “Laptop”)\nNow we’ll get our key from our system to use.\nRecall we previously generated a key to the default location, like /home/calvin/.ssh/id_ed25519\n\nIf you don’t remember, just type ssh-keygen and it’ll show you.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#copypaste",
    "href": "01_rustup.html#copypaste",
    "title": "Rustup",
    "section": "Copy/Paste",
    "text": "Copy/Paste\n\nTo get the key for GitHub, we can can\n\ncat that file in the command line\nCopy from the command line\nPaste into the GitHub “Key” field\nClick Add SSH key",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#ssh-test",
    "href": "01_rustup.html#ssh-test",
    "title": "Rustup",
    "section": "SSH Test",
    "text": "SSH Test\n\nAfter adding the key to the account, I confirm via SSH like so:\n\nssh -T git@github.com\n\nI see the following:\n\nHi cd-public! You've successfully authenticated, but GitHub does not provide shell access.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#clone-pt1",
    "href": "01_rustup.html#clone-pt1",
    "title": "Rustup",
    "section": "Clone pt1",
    "text": "Clone pt1\n\nNavigate to the repository webpage, like github.com/cd-example/271rs\nFind the &lt;&gt; Code button in the top right.\nClick it:\n\nSelect the top “local” tab (for or local repository)\nSelect the SSH option (for our SSH key)\nCopy the name, like\n\n\n\ngit@github.com:cd-example/271rs",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#clone-pt2",
    "href": "01_rustup.html#clone-pt2",
    "title": "Rustup",
    "section": "Clone pt2",
    "text": "Clone pt2\n\nWithin terminal, where you keep files for this class.\n\nProbably just do\n\ncd ~\ngit clone git@github.com:cd-example/271rs \nVerify by listing the contents of the 271rs directory via:\n\nls 271rs\n\nYou should see a README.md and a LICENSE",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#enter-the-repository",
    "href": "01_rustup.html#enter-the-repository",
    "title": "Rustup",
    "section": "Enter the Repository",
    "text": "Enter the Repository\n\nTo change the directory within which you are working in the commandline from your home to the repository for this class, do:\n\ncd 271rs\n\nVerify the change via\n\npwd\n\nThis will give the full address of your class folder, ending in 271rs",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#today-1",
    "href": "01_rustup.html#today-1",
    "title": "Rustup",
    "section": "Today",
    "text": "Today\n\nTo complete the lab today, add a 01/rustup.md file to your 271rs\nSend me a link to a 271rs repository I have permission to view.\n\nTo be clear:\n\nI must receive an email with a hyperlink to a GitHub repository.\nI must have view access to public repository or a repository on which I am added as a collaborator.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#names-matter",
    "href": "01_rustup.html#names-matter",
    "title": "Rustup",
    "section": "Names Matter",
    "text": "Names Matter\n\nYour submission will be tested be a script.\n\nThe file must be named rustup.md\nIt must be in a folder named 01\nThe repository must be named 271rs\nNo other arrangement constitutes a lab submission.\nThe contents of rustup.md are not relevant. &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#useful-commands",
    "href": "01_rustup.html#useful-commands",
    "title": "Rustup",
    "section": "Useful commands",
    "text": "Useful commands\n\nYou may use ls to list files/folders.\nYou make use mkdir 01 to creat the 01 folder.\nYou may use vim 01/rustup.md to edit the rustup.md file in the 01 folder.\n\nThe 01 folder must exist to do this.\n\nLearn more here\n\n\n\n\n\n\n\n88d5569f117a55a2960939684283dc3f8d56383e",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#file-editor",
    "href": "01_rustup.html#file-editor",
    "title": "Rustup",
    "section": "File Editor",
    "text": "File Editor\n\nLet’s make a new file.\nI recommend using vim, neovim, or helix.\nProbably already have it on MacOS.\nOn WSL install via\n\nsudo apt install vim",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#file-editting",
    "href": "01_rustup.html#file-editting",
    "title": "Rustup",
    "section": "File Editting",
    "text": "File Editting\n\nTo create said file, type vim then the name of the file.\nIf you just cloned 271rs, there will be a 271rs folder into which you should create a 01 folder.\n\nStands for week 0, day 1\n\nvim 01/rustup.md\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n======= &gt;&gt;&gt;&gt;&gt;&gt;&gt; 88d5569f117a55a2960939684283dc3f8d56383e",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#using-vim",
    "href": "01_rustup.html#using-vim",
    "title": "Rustup",
    "section": "Using vim",
    "text": "Using vim\n\nThere’s more to life that using vim but basically:\n\nPress i to enter “insert mode” (so you can type)\nWhen you are done typing, press ESC then type :x to save and exit.\nRead more\n\nJust type some notes you have from today.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#check-status",
    "href": "01_rustup.html#check-status",
    "title": "Rustup",
    "section": "Check Status",
    "text": "Check Status\n\nYou have now added a new file to your repository.\nI consult status often, yours will likely look like this:\n\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        01/rustup.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#add",
    "href": "01_rustup.html#add",
    "title": "Rustup",
    "section": "Add",
    "text": "Add\n\nThe first thing we not is that there are “Untracked files”\nWhile we made a hello.py and have it in our hello-world directory, it isn’t yet “tracked” by git!\nBy default, git only keeps track of what we tell it to!\nSo, we tell it to track our code!\n\ngit add 01/rustup.md",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#status",
    "href": "01_rustup.html#status",
    "title": "Rustup",
    "section": "Status",
    "text": "Status\n\nI check status again\n\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   01_rustup.md",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#commit",
    "href": "01_rustup.html#commit",
    "title": "Rustup",
    "section": "Commit",
    "text": "Commit\n\nWith git now aware of hello.py, we need to commit or changes for git to save them.\n\nSimilar to saving files to the file system.\nThere are, of course, ways to automate this.\n\nThis probably won’t work at first (next slide!) but try:\n\ngit commit -a -m \"first commit\"",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#a--m",
    "href": "01_rustup.html#a--m",
    "title": "Rustup",
    "section": "“-a -m”",
    "text": "“-a -m”\n\nCommits require a commit message (like a version name or number) so specify with -m\nUsually I provide -a to commit “all” files.\nI usually make some effort to make my life easier with specific commit messages, perhaps listing:\n\nWhat I’m trying to do\nWhy?",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#config",
    "href": "01_rustup.html#config",
    "title": "Rustup",
    "section": "Config",
    "text": "Config\n\nIf you haven’t used git on your system before, you’ll have to tell git who you are.\n\nIn git there are no anonymous changes - you have to sign every change you make.\n\nYou’ll be prompted to provide something like this:\n\ngit config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#my-name",
    "href": "01_rustup.html#my-name",
    "title": "Rustup",
    "section": "My name",
    "text": "My name\n\nI often include which computer I’m using in my name and also don’t use a real email address.\n\nMy GitHub account is already attached to an email address, so I use a throwaway for commits.\n\n\ngit config --global user.email \"prof_calvin@c89&gt;rs.edu\"\ngit config --global user.name \"Calvin for Class\"",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#looping-back",
    "href": "01_rustup.html#looping-back",
    "title": "Rustup",
    "section": "Looping Back",
    "text": "Looping Back\n\nOnce you have provided your identity, you can successfuly complete a commit.\n\ngit commit -a -m \"first commit\"\n\nThis will:\n\nMark current code as a version, named by your commit message.\n\nThis won’t:\n\nDo anything to GitHub.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#push",
    "href": "01_rustup.html#push",
    "title": "Rustup",
    "section": "Push",
    "text": "Push\n\nA commit saves changing on your computer.\nTo save on GitHub, push changes to the cloud\n\ngit push\n\nAfter a moment and some diagnostic text, you should be able to see your code on GitHub, possibly after refreshing the page!",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#diagnostics",
    "href": "01_rustup.html#diagnostics",
    "title": "Rustup",
    "section": "Diagnostics",
    "text": "Diagnostics\n\nFor example, you might see the following:\n\nEnumerating objects: 27, done.\nCounting objects: 100% (27/27), done.\nDelta compression using up to 22 threads\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (16/16), 98.54 KiB | 2.46 MiB/s, done.\nTotal 16 (delta 11), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (11/11), completed with 10 local objects.\nTo github.com:cd-example/271rs.git\n   adaa3a7..ba3c794  main -&gt; main",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#verify-2",
    "href": "01_rustup.html#verify-2",
    "title": "Rustup",
    "section": "Verify",
    "text": "Verify\n\nEnsure you have a 01/rustup.md\nEmail me.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#easier-after",
    "href": "01_rustup.html#easier-after",
    "title": "Rustup",
    "section": "Easier After",
    "text": "Easier After\n\nA lot of what we did, we only have to do once:\n\ngit config\nssh-keygen\nset origin\n\nMany are special cases:\n\nOnly have to make new repositories for… new repositories (likely projects)\nOnly have to git add for new files.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#quick-example",
    "href": "01_rustup.html#quick-example",
    "title": "Rustup",
    "section": "Quick Example",
    "text": "Quick Example\n\nLet’s add 02/hi_world.rs\nWe’ll create a new file at the command line.\n\nvim 02/hi_world.rs\n\nAdd any text\n\n\n\nhi_world.rs\n\nWait I don't know rust yet.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#add-commit-push",
    "href": "01_rustup.html#add-commit-push",
    "title": "Rustup",
    "section": "Add, Commit, Push",
    "text": "Add, Commit, Push\n\nTo get the code onto Github, add to the repo:\n\ngit add hi_world.rs \n\nCommit changes to a version:\n\ngit commit -a -m \"You say hello, I say goodbye\"\n\nPush to GitHub\n\ngit push\n\nAnd that’s that!",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#altogether",
    "href": "01_rustup.html#altogether",
    "title": "Rustup",
    "section": "Altogether",
    "text": "Altogether\n\nFor a single copy/paste\n\ngit add bye.py\ngit commit -a -m \"You say hello, I say goodbye\"\ngit push\n\nIf it works, you’ll see the change on GitHub!",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#again",
    "href": "01_rustup.html#again",
    "title": "Rustup",
    "section": "Again",
    "text": "Again\n\nPerhaps we wish to be more correct with a well-formed Rust comment.\n\n\n\nbye.py\n\n// TODO: Homework 0 \n\n\nWe’ll learn Rust latter.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#no-add",
    "href": "01_rustup.html#no-add",
    "title": "Rustup",
    "section": "No Add",
    "text": "No Add\n\nDon’t need an add this time!\n\ngit commit -a -m \"Rust comment\"\ngit push",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#pulling",
    "href": "01_rustup.html#pulling",
    "title": "Rustup",
    "section": "Pulling",
    "text": "Pulling\n\nTo get remote changes reflected locally, simply use\n\ngit pull\n\nThis will be how assignment feedback is distributed.\nJust git pull every time you start working, basically.\nAlso good when you are working on multiple devices.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "12_build.rjs.html#announcements",
    "href": "12_build.rjs.html#announcements",
    "title": "Build",
    "section": "Announcements",
    "text": "Announcements\n\nThe second homework, “Hi cargo”, is ready after this class.\n\nIt is comically trivial.\nMostly makes sure you have everything set up.\n\nDue Friday, 12 Sept. at 1440 ET."
  },
  {
    "objectID": "12_build.rjs.html#today",
    "href": "12_build.rjs.html#today",
    "title": "Build",
    "section": "Today",
    "text": "Today\n\nHybrid Day\nBuild system/package manager\n\nTheory behind Cargo\nTrap in Cargo\nUse Cargo"
  },
  {
    "objectID": "12_build.rjs.html#interpretation",
    "href": "12_build.rjs.html#interpretation",
    "title": "Build",
    "section": "Interpretation",
    "text": "Interpretation\n\nWe once again address interpretation vs. compilation\n\nI think of this as programming vs. scripting\nWe can think in terms of languages - Rust/C vs. Python/JavaScript"
  },
  {
    "objectID": "12_build.rjs.html#scripts",
    "href": "12_build.rjs.html#scripts",
    "title": "Build",
    "section": "Scripts",
    "text": "Scripts\n\nI regard a script a:\n\nText file\nWhich describes actions for a computer\nReadable to humans\nAnd readable to a program (like python) which can direct the computer to act\n\n\n\nwhat_up_earth.py\n\nprint(\"what up earth\")\n\nWe note that this is much closer to being a text file that it is to being a program."
  },
  {
    "objectID": "12_build.rjs.html#programs",
    "href": "12_build.rjs.html#programs",
    "title": "Build",
    "section": "Programs",
    "text": "Programs\n\nWe can create programs but we also use existing programs.\nAs an example, consider the Firefox web-browser\n\nIf you use Chrome, keep that to yourself, that’s embarassing.\n\nThis is what “Firefox.exe” looks like on a Window device.\n\n\n\nFirefox.exe\n\nA{Ÿ@€ÿ\u0019w.\u000f·þ9Ï\u000fCñ~¿‰ó€Ë @€ÿ\u001a\u000f¶û\u000fCþD8ßu\u000fé¬%  Aƒù/\u000f„î%  L‹R\bHƒÂ\bHƒÀ\bM…Ò\u000f…wÿÿÿM…À\u000f„Ã\u0002  ID$\u0010¹ÿ   A\u000f·\u0010ƒú-\u000f…“\u0002  IP\u0002MH\u0004fAƒx\u0002-I\u000fDÑD\u000f·\u0002fE…À\u000f„|\u0002  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùc\u000f…P\u0002  D\u000f·B\u0002fE…À\u000f„A\u0002  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùo\u000f…\u0015\u0002  D\u000f·B\u0004fE…À\u000f„\u0006\u0002  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùn\u000f…Ú\u0001  D\u000f·B\u0006fE…À\u000f„Ë\u0001  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùt\u000f…Ÿ\u0001  D\u000f·B\bfE…À\u000f„\u0001  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùe\u000f…d\u0001  D\u000f·B\nfE…À\u000f„U\u0001  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùn\u000f…)\u0001  D\u000f·B\ffE…À\u000f„\u001a\u0001  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùt\u000f…î   D\u000f·B\u000efE…À\u000f„ß   E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùp\u000f…³   D\u000f·B\u0010fE…À\u000f„¤   E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùru|D\u000f·B\u0012fE…ÀtqE\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùouID\u000f·B\u0014fE…Àt&gt;E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùcu\u0016fƒz\u0016 \u000f„*\u001c  ë   ƒú/\u000f„i#  L‹ HƒÀ\bM…À\u000f…GýÿÿHŒ$ð\u0001  è)˜  f\u000fïÀL„$ \u0007  fA\u000f@ fA\u000f@\u0010fA\u000f H„$à\u0002  H‰D$ HÇÁÿÿÿÿ1ÒA¹0   è\u001bE\u0005 …À\u000fˆ\u001e#  L‹„$H\u0007  ¹ \u0010  1Òÿ\u0015\u001eû\u0005 H‰ÃH…À\u000f„;#  L´$@\u0007  AÇFà    AÆFø LŒ$à\u0002  AÇ\u0001   \u0002  H‰Ùº\u0001   M‰ðÿ\u0015õú\u0005 L‰ÿ…À\u000f„4#  €¼$8\u0007   \u000f…_#  D‹„$ \u0007  L¼$0\u0001  L‰ùL‰òè\u0019™  A€\u0018 \u000f…X#  L´$ \u0003  AÇFà\u0001   AÆFø 1ÉL‰òA¸ \u0002  ÿ\u00150ù\u0005 =  \u0002  t\b…À\u000f…\u0002!  ÿ\u0015\u000bù\u0005 \u000f·èÍ  \u0007€…À\u000fNèA¼)   @¶\u0001L=t˜\u0005 H‰ØHÿÀHƒø\u0002r    H‰Ùÿ\u0015°÷\u0005 @„ö\u000f…*\"  A€÷\u0001³\u00011íH\n\u0005¤\u0005 ÿ\u0015’ü\u0005 H…ÀL‹d$`\u000f…6#  L‹\u0007M…À\u000f„w\u0002  ID$\u0010¹ÿ   A\u000f·\u0010ƒú-t\u001aƒú/\u000f„»!  L‹ HƒÀ\bM…ÀuâéJ\u0002  IP\u0002MH\u0004fAƒx\u0002-I\u000fDÑD\u000f·\u0002fE…ÀtÓE\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùlu«D\u000f·B\u0002fE…Àt E\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øa\u000f…jÿÿÿD\u000f·B\u0004fE…À\u000f„[ÿÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øu\u000f…%ÿÿÿD\u000f·B\u0006fE…À\u000f„\u0016ÿÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øn\u000f…àþÿÿD\u000f·B\bfE…À\u000f„ÑþÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øc\u000f…›þÿÿD\u000f·B\nfE…À\u000f„ŒþÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øh\u000f…VþÿÿD\u000f·B\ffE…À\u000f„GþÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øe\u000f…\u0011þÿÿD\u000f·B\u000efE…À\u000f„\u0002þÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€ør\u000f…Ìýÿÿfƒz\u0010 \u000f…ÁýÿÿH‹\bH‰HøHƒÀ\bH…ÉuðAÿÍ°\u0001L‹d$`ë\u00021À„Û\u000f„Æ   A\bÇE1ÉAöÇ\u0001tyL‹\u0007M…ÀtqID$\u0010¹ÿ   A\u000f·\u0010ƒú-uIIP\u0002MP\u0004fAƒx\u0002-I\u000fDÒD\u000f·\u0002fE…Àt6E\u000f·ÐA9ÊD\u000fCÁEP¿E‰ÃA€Ë A€ú\u001aE\u000f¶ÓE\u000fCÐA€úfu\u000eéj   ƒú/\u000f„\u0010$  L‹ HƒÀ\bM…Àu™Aö×E\u000f¶ÇAƒà\u0001HŒ$ð\u0001  Hœ$ \u0007  H‰Úè\u000f˜  @Šs\u0010@„ö\u000f…à#  ƒ¼$ \u0007   I‰ÿu\u00041íë/H\n} \u0005 ÿ\u0015$ù\u0005 H…À\u000f…à%  H\n\n\nI would not regard that as readable to humans (depends on the human)"
  },
  {
    "objectID": "12_build.rjs.html#compilation",
    "href": "12_build.rjs.html#compilation",
    "title": "Build",
    "section": "Compilation",
    "text": "Compilation\n\nCompilation is the process that takes text-based code to whatever we saw on the last slide.\nCan be quite simple - we made hi_world, a program, already.\n\nNotably it didn’t do a lot.\n\nrustc takes a .rs file and makes an executable\n\na program, sort of\n\nExecutables run as command with ./ prefix\n\nThis differs from python3 which runs a script without creating a corresponding program."
  },
  {
    "objectID": "12_build.rjs.html#py-vs-.rs",
    "href": "12_build.rjs.html#py-vs-.rs",
    "title": "Build",
    "section": ".py vs .rs",
    "text": ".py vs .rs\n\n\n\n\n\nflowchart LR\n  A(Python) --&gt; B[fname.py file]\n  B --&gt; C[python fname.py]\n  C --&gt; D{hello world}\n  E(Rust) --&gt; F[fname.rs  file]\n  F --&gt; G[rustc fname.rs]\n  G --&gt; H[./fname]\n  H --&gt; I{hello world}\n\n\n\n\n\n\n\nYou only have to compile once to have the executable forever.\nMost programs are executables, not scripts."
  },
  {
    "objectID": "12_build.rjs.html#rustc",
    "href": "12_build.rjs.html#rustc",
    "title": "Build",
    "section": "Rustc",
    "text": "Rustc\n\nrustc is rarely, if ever, used directly\n\nOver the years (since like, 1960) code has increased in complexity.\n\nMany files (think pgl.py, WordleGraphics.py, EnigmaRotor.py)\nMany libraries (think NumPy, pandas, scikit)\nComplex file systems (01/rustup.md)\n\n\nThe solution was automation."
  },
  {
    "objectID": "12_build.rjs.html#build-systems-1",
    "href": "12_build.rjs.html#build-systems-1",
    "title": "Build",
    "section": "Build Systems",
    "text": "Build Systems\n\nWe don’t have a real equivalence to compilation for Python.\n\nThere is Numba\n\nWe do have a build system equivalent.\n\nI use flit, which is easy.\nI think there’s others… Setuptools? Hatchling?"
  },
  {
    "objectID": "12_build.rjs.html#flit",
    "href": "12_build.rjs.html#flit",
    "title": "Build",
    "section": "Flit",
    "text": "Flit\n\nFlit solves a novel problem for Python programers.\n\nNot: Let’s make some code that I can run.\nInstead: Let’s make code that can be used in code other people run."
  },
  {
    "objectID": "12_build.rjs.html#packaging",
    "href": "12_build.rjs.html#packaging",
    "title": "Build",
    "section": "Packaging",
    "text": "Packaging\n\nNumPy, pandas, and things like CS 151 PGL can be “built” into packages with Flit and friends.\n\nBasically, instead of running e.g. python3 mycode.py\nRun flit init to make a new folder, edit some code, then run flit publish to add it to pip\n\nTakeaway - package management and build systems work real well together."
  },
  {
    "objectID": "12_build.rjs.html#wheels",
    "href": "12_build.rjs.html#wheels",
    "title": "Build",
    "section": "Wheels",
    "text": "Wheels\n\nThe thing that flit and friends create and distribute is not a .py file.\nRather, they are “wheels” which are not human readable.\nA lot like compiled code\nTakeaway - a good way to think of Rust is that we’re writing packages for ourselves."
  },
  {
    "objectID": "12_build.rjs.html#cargo",
    "href": "12_build.rjs.html#cargo",
    "title": "Build",
    "section": "Cargo",
    "text": "Cargo\n\nWith Python, we use python3 (or pip, but perhaps as python3 -m pip).\nrustc is not really the equivalent to that:\nRather, we use cargo, the Rust build and package manager.\ncargo will handle any usage of rustc that we may need.\n\nWe can easily then distribute code across multiple files."
  },
  {
    "objectID": "12_build.rjs.html#buildpackage",
    "href": "12_build.rjs.html#buildpackage",
    "title": "Build",
    "section": "Build+Package",
    "text": "Build+Package\n\nCargo is Rust’s build system (like flit) and package manager (like pip).\nWe will use Cargo instead of rustc for the rest of the term.\n\nMy sense is that this is the industry standard.\n\nWe’ll step through an example, then you’ll do a (very simple) exercise."
  },
  {
    "objectID": "12_build.rjs.html#new",
    "href": "12_build.rjs.html#new",
    "title": "Build",
    "section": "New",
    "text": "New\n\nThe first thing to do with Cargo, as a rule, is great a new package.\n\nThis is kinda like creating a new .py file.\nIt is a bit more like creating a Python project from a template repository."
  },
  {
    "objectID": "12_build.rjs.html#do-it",
    "href": "12_build.rjs.html#do-it",
    "title": "Build",
    "section": "Do it",
    "text": "Do it\n\nTo do so:\n\ncargo new throwaway_example\n\ncargo is, well, Cargo\nnew creates a new package.\nthrowaway_example is the name of the package1.\n\nWell, kinda. We’ll get to that."
  },
  {
    "objectID": "12_build.rjs.html#examine",
    "href": "12_build.rjs.html#examine",
    "title": "Build",
    "section": "Examine",
    "text": "Examine\n\nThe most natural thing is to see what has changed.\n\nls\n\nFor me, I see a new directory: throwaway_example\nI change into the directory to examine it.\n\ncd throwaway_example\nls\n\nNot much there:\n\nCargo.toml  src"
  },
  {
    "objectID": "12_build.rjs.html#aside-tree",
    "href": "12_build.rjs.html#aside-tree",
    "title": "Build",
    "section": "Aside: Tree",
    "text": "Aside: Tree\n\nCan also see directory structure.\nInstall tree with your preferred installer (perhaps apt or brew)\n\nsudo apt install tree\n\nThen use tree instead of ls\n\n.\n├── Cargo.toml\n└── src\n    └── main.rs\n\n1 directory, 2 files"
  },
  {
    "objectID": "12_build.rjs.html#main.rs",
    "href": "12_build.rjs.html#main.rs",
    "title": "Build",
    "section": "main.rs",
    "text": "main.rs\n\nCargo creates projects with a default main file.\n\n\n\nmain.rs\n\nfn main() {\n    println!(\"Hello, world!\");\n}\n\n\nThe name “main” is basically mainful to Cargo - it says which, if multiple, .rs files to read first when trying to execute the code in a package.\n\nMake sure you understand that sentence."
  },
  {
    "objectID": "12_build.rjs.html#run",
    "href": "12_build.rjs.html#run",
    "title": "Build",
    "section": "Run",
    "text": "Run\n\ncargo run is probably our closest equivalent to python3 throwaway_example.py or the “Run” button in VS Code.\nOf note, you can simply do “new” then “run”.\n\n“New” creates a new folder.\n“Run” must be done from within that folder."
  },
  {
    "objectID": "12_build.rjs.html#try-it",
    "href": "12_build.rjs.html#try-it",
    "title": "Build",
    "section": "Try it",
    "text": "Try it\n\nDo this:\n\ncargo run\n\nSee this:\n\n   Compiling throwaway_example v0.1.0 (/home/user/throwaway_example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.56s\n     Running `target/debug/throwaway_example`\nHello, world!"
  },
  {
    "objectID": "12_build.rjs.html#again",
    "href": "12_build.rjs.html#again",
    "title": "Build",
    "section": "Again!",
    "text": "Again!\n\nIf you run again, the process will:\n\nSkip the compile step.\nBe way faster (∞x reported here)\n\n\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/throwaway_example`\nHello, world!\n\n0.56s -&gt; 0.00s"
  },
  {
    "objectID": "12_build.rjs.html#its-fast",
    "href": "12_build.rjs.html#its-fast",
    "title": "Build",
    "section": "It’s fast",
    "text": "It’s fast\n\n0.56s -&gt; 0.00s\nThis is why we use languages which compile.\n\nPython took around .04s, for me.\n\ntime python3 -c \"print('Hello, world')\"\nThe results are:\n\nHello, world\n\nreal    0m0.039s\nuser    0m0.007s\nsys     0m0.008s\n\nGuess how long it takes to compile python, by the way."
  },
  {
    "objectID": "12_build.rjs.html#other-files",
    "href": "12_build.rjs.html#other-files",
    "title": "Build",
    "section": "Other files",
    "text": "Other files\n\nGo ahead and add another .rs file and see what happens.\n\nAdd it to the src directory!\n\nI’ll use this one - I change filename and text, but\n\n\n\nsecondary.rs\n\nfn secondary() {\n    println!(\"Goodbye, space!\");\n}"
  },
  {
    "objectID": "12_build.rjs.html#run-it-again",
    "href": "12_build.rjs.html#run-it-again",
    "title": "Build",
    "section": "Run it again…",
    "text": "Run it again…\n\nNothing changes.\n\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/throwaway_example`\nHello, world!\n\nThis is the same as adding another .py file then not using import or including its code in any other way."
  },
  {
    "objectID": "12_build.rjs.html#swap-the-names.",
    "href": "12_build.rjs.html#swap-the-names.",
    "title": "Build",
    "section": "Swap the names.",
    "text": "Swap the names.\n\nI use mv (move) to change:\n\nmain.rs to old_main.rs\nsecondary.rs to main.rs\n\nThings change!\n\n   Compiling throwaway_example v0.1.0 (/home/user/throwaway_example)\nerror[E0601]: `main` function not found in crate `throwaway_example`\n --&gt; src/main.rs:3:2\n  |\n3 | }\n  |  ^ consider adding a `main` function to `src/main.rs`\n\nFor more information about this error, try `rustc --explain E0601`.\nerror: could not compile `throwaway_example` (bin \"throwaway_example\") due to 1 previous error"
  },
  {
    "objectID": "12_build.rjs.html#requirements",
    "href": "12_build.rjs.html#requirements",
    "title": "Build",
    "section": "Requirements",
    "text": "Requirements\n\nYou need a main.rs with a function named main.\nnvim src/main.rs -&gt; Change “secondary” to “main” -&gt; “cargo run”\n\n   Compiling throwaway_example v0.1.0 (/home/user/throwaway_example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.33s\n     Running `target/debug/throwaway_example`\nGoodbye, space!"
  },
  {
    "objectID": "12_build.html",
    "href": "12_build.html",
    "title": "Build",
    "section": "",
    "text": "The second homework, “Hi cargo”, is ready after this class.\n\nIt is comically trivial.\nMostly makes sure you have everything set up.\n\nDue Friday, 12 Sept. at 1440 ET.",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#announcements",
    "href": "12_build.html#announcements",
    "title": "Build",
    "section": "",
    "text": "The second homework, “Hi cargo”, is ready after this class.\n\nIt is comically trivial.\nMostly makes sure you have everything set up.\n\nDue Friday, 12 Sept. at 1440 ET.",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#today",
    "href": "12_build.html#today",
    "title": "Build",
    "section": "Today",
    "text": "Today\n\nHybrid Day\nBuild system/package manager\n\nTheory behind Cargo\nTrap in Cargo\nUse Cargo",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#interpretation",
    "href": "12_build.html#interpretation",
    "title": "Build",
    "section": "Interpretation",
    "text": "Interpretation\n\nWe once again address interpretation vs. compilation\n\nI think of this as programming vs. scripting\nWe can think in terms of languages - Rust/C vs. Python/JavaScript",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#scripts",
    "href": "12_build.html#scripts",
    "title": "Build",
    "section": "Scripts",
    "text": "Scripts\n\nI regard a script a:\n\nText file\nWhich describes actions for a computer\nReadable to humans\nAnd readable to a program (like python) which can direct the computer to act\n\n\n\nwhat_up_earth.py\n\nprint(\"what up earth\")\n\nWe note that this is much closer to being a text file that it is to being a program.",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#programs",
    "href": "12_build.html#programs",
    "title": "Build",
    "section": "Programs",
    "text": "Programs\n\nWe can create programs but we also use existing programs.\nAs an example, consider the Firefox web-browser\n\nIf you use Chrome, keep that to yourself, that’s embarassing.\n\nThis is what “Firefox.exe” looks like on a Window device.\n\n\n\nFirefox.exe\n\nA{Ÿ@€ÿ\u0019w.\u000f·þ9Ï\u000fCñ~¿‰ó€Ë @€ÿ\u001a\u000f¶û\u000fCþD8ßu\u000fé¬%  Aƒù/\u000f„î%  L‹R\bHƒÂ\bHƒÀ\bM…Ò\u000f…wÿÿÿM…À\u000f„Ã\u0002  ID$\u0010¹ÿ   A\u000f·\u0010ƒú-\u000f…“\u0002  IP\u0002MH\u0004fAƒx\u0002-I\u000fDÑD\u000f·\u0002fE…À\u000f„|\u0002  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùc\u000f…P\u0002  D\u000f·B\u0002fE…À\u000f„A\u0002  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùo\u000f…\u0015\u0002  D\u000f·B\u0004fE…À\u000f„\u0006\u0002  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùn\u000f…Ú\u0001  D\u000f·B\u0006fE…À\u000f„Ë\u0001  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùt\u000f…Ÿ\u0001  D\u000f·B\bfE…À\u000f„\u0001  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùe\u000f…d\u0001  D\u000f·B\nfE…À\u000f„U\u0001  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùn\u000f…)\u0001  D\u000f·B\ffE…À\u000f„\u001a\u0001  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùt\u000f…î   D\u000f·B\u000efE…À\u000f„ß   E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùp\u000f…³   D\u000f·B\u0010fE…À\u000f„¤   E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùru|D\u000f·B\u0012fE…ÀtqE\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùouID\u000f·B\u0014fE…Àt&gt;E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùcu\u0016fƒz\u0016 \u000f„*\u001c  ë   ƒú/\u000f„i#  L‹ HƒÀ\bM…À\u000f…GýÿÿHŒ$ð\u0001  è)˜  f\u000fïÀL„$ \u0007  fA\u000f@ fA\u000f@\u0010fA\u000f H„$à\u0002  H‰D$ HÇÁÿÿÿÿ1ÒA¹0   è\u001bE\u0005 …À\u000fˆ\u001e#  L‹„$H\u0007  ¹ \u0010  1Òÿ\u0015\u001eû\u0005 H‰ÃH…À\u000f„;#  L´$@\u0007  AÇFà    AÆFø LŒ$à\u0002  AÇ\u0001   \u0002  H‰Ùº\u0001   M‰ðÿ\u0015õú\u0005 L‰ÿ…À\u000f„4#  €¼$8\u0007   \u000f…_#  D‹„$ \u0007  L¼$0\u0001  L‰ùL‰òè\u0019™  A€\u0018 \u000f…X#  L´$ \u0003  AÇFà\u0001   AÆFø 1ÉL‰òA¸ \u0002  ÿ\u00150ù\u0005 =  \u0002  t\b…À\u000f…\u0002!  ÿ\u0015\u000bù\u0005 \u000f·èÍ  \u0007€…À\u000fNèA¼)   @¶\u0001L=t˜\u0005 H‰ØHÿÀHƒø\u0002r    H‰Ùÿ\u0015°÷\u0005 @„ö\u000f…*\"  A€÷\u0001³\u00011íH\n\u0005¤\u0005 ÿ\u0015’ü\u0005 H…ÀL‹d$`\u000f…6#  L‹\u0007M…À\u000f„w\u0002  ID$\u0010¹ÿ   A\u000f·\u0010ƒú-t\u001aƒú/\u000f„»!  L‹ HƒÀ\bM…ÀuâéJ\u0002  IP\u0002MH\u0004fAƒx\u0002-I\u000fDÑD\u000f·\u0002fE…ÀtÓE\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùlu«D\u000f·B\u0002fE…Àt E\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øa\u000f…jÿÿÿD\u000f·B\u0004fE…À\u000f„[ÿÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øu\u000f…%ÿÿÿD\u000f·B\u0006fE…À\u000f„\u0016ÿÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øn\u000f…àþÿÿD\u000f·B\bfE…À\u000f„ÑþÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øc\u000f…›þÿÿD\u000f·B\nfE…À\u000f„ŒþÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øh\u000f…VþÿÿD\u000f·B\ffE…À\u000f„GþÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øe\u000f…\u0011þÿÿD\u000f·B\u000efE…À\u000f„\u0002þÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€ør\u000f…Ìýÿÿfƒz\u0010 \u000f…ÁýÿÿH‹\bH‰HøHƒÀ\bH…ÉuðAÿÍ°\u0001L‹d$`ë\u00021À„Û\u000f„Æ   A\bÇE1ÉAöÇ\u0001tyL‹\u0007M…ÀtqID$\u0010¹ÿ   A\u000f·\u0010ƒú-uIIP\u0002MP\u0004fAƒx\u0002-I\u000fDÒD\u000f·\u0002fE…Àt6E\u000f·ÐA9ÊD\u000fCÁEP¿E‰ÃA€Ë A€ú\u001aE\u000f¶ÓE\u000fCÐA€úfu\u000eéj   ƒú/\u000f„\u0010$  L‹ HƒÀ\bM…Àu™Aö×E\u000f¶ÇAƒà\u0001HŒ$ð\u0001  Hœ$ \u0007  H‰Úè\u000f˜  @Šs\u0010@„ö\u000f…à#  ƒ¼$ \u0007   I‰ÿu\u00041íë/H\n} \u0005 ÿ\u0015$ù\u0005 H…À\u000f…à%  H\n\n\nI would not regard that as readable to humans (depends on the human)",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#compilation",
    "href": "12_build.html#compilation",
    "title": "Build",
    "section": "Compilation",
    "text": "Compilation\n\nCompilation is the process that takes text-based code to whatever we saw on the last slide.\nCan be quite simple - we made hi_world, a program, already.\n\nNotably it didn’t do a lot.\n\nrustc takes a .rs file and makes an executable\n\na program, sort of\n\nExecutables run as command with ./ prefix\n\nThis differs from python3 which runs a script without creating a corresponding program.",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#py-vs-.rs",
    "href": "12_build.html#py-vs-.rs",
    "title": "Build",
    "section": ".py vs .rs",
    "text": ".py vs .rs\n\n\n\n\n\nflowchart LR\n  A(Python) --&gt; B[fname.py file]\n  B --&gt; C[python fname.py]\n  C --&gt; D{hello world}\n  E(Rust) --&gt; F[fname.rs  file]\n  F --&gt; G[rustc fname.rs]\n  G --&gt; H[./fname]\n  H --&gt; I{hello world}\n\n\n\n\n\n\n\nYou only have to compile once to have the executable forever.\nMost programs are executables, not scripts.",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#rustc",
    "href": "12_build.html#rustc",
    "title": "Build",
    "section": "Rustc",
    "text": "Rustc\n\nrustc is rarely, if ever, used directly\n\nOver the years (since like, 1960) code has increased in complexity.\n\nMany files (think pgl.py, WordleGraphics.py, EnigmaRotor.py)\nMany libraries (think NumPy, pandas, scikit)\nComplex file systems (01/rustup.md)\n\n\nThe solution was automation.",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#build-systems-1",
    "href": "12_build.html#build-systems-1",
    "title": "Build",
    "section": "Build Systems",
    "text": "Build Systems\n\nWe don’t have a real equivalence to compilation for Python.\n\nThere is Numba\n\nWe do have a build system equivalent.\n\nI use flit, which is easy.\nI think there’s others… Setuptools? Hatchling?",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#flit",
    "href": "12_build.html#flit",
    "title": "Build",
    "section": "Flit",
    "text": "Flit\n\nFlit solves a novel problem for Python programers.\n\nNot: Let’s make some code that I can run.\nInstead: Let’s make code that can be used in code other people run.",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#packaging",
    "href": "12_build.html#packaging",
    "title": "Build",
    "section": "Packaging",
    "text": "Packaging\n\nNumPy, pandas, and things like CS 151 PGL can be “built” into packages with Flit and friends.\n\nBasically, instead of running e.g. python3 mycode.py\nRun flit init to make a new folder, edit some code, then run flit publish to add it to pip\n\nTakeaway - package management and build systems work real well together.",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#wheels",
    "href": "12_build.html#wheels",
    "title": "Build",
    "section": "Wheels",
    "text": "Wheels\n\nThe thing that flit and friends create and distribute is not a .py file.\nRather, they are “wheels” which are not human readable.\nA lot like compiled code\nTakeaway - a good way to think of Rust is that we’re writing packages for ourselves.",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#cargo",
    "href": "12_build.html#cargo",
    "title": "Build",
    "section": "Cargo",
    "text": "Cargo\n\nWith Python, we use python3 (or pip, but perhaps as python3 -m pip).\nrustc is not really the equivalent to that:\nRather, we use cargo, the Rust build and package manager.\ncargo will handle any usage of rustc that we may need.\n\nWe can easily then distribute code across multiple files.",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#buildpackage",
    "href": "12_build.html#buildpackage",
    "title": "Build",
    "section": "Build+Package",
    "text": "Build+Package\n\nCargo is Rust’s build system (like flit) and package manager (like pip).\nWe will use Cargo instead of rustc for the rest of the term.\n\nMy sense is that this is the industry standard.\n\nWe’ll step through an example, then you’ll do a (very simple) exercise.",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#new",
    "href": "12_build.html#new",
    "title": "Build",
    "section": "New",
    "text": "New\n\nThe first thing to do with Cargo, as a rule, is great a new package.\n\nThis is kinda like creating a new .py file.\nIt is a bit more like creating a Python project from a template repository.",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#do-it",
    "href": "12_build.html#do-it",
    "title": "Build",
    "section": "Do it",
    "text": "Do it\n\nTo do so:\n\ncargo new throwaway_example\n\ncargo is, well, Cargo\nnew creates a new package.\nthrowaway_example is the name of the package1.",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#examine",
    "href": "12_build.html#examine",
    "title": "Build",
    "section": "Examine",
    "text": "Examine\n\nThe most natural thing is to see what has changed.\n\nls\n\nFor me, I see a new directory: throwaway_example\nI change into the directory to examine it.\n\ncd throwaway_example\nls\n\nNot much there:\n\nCargo.toml  src",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#aside-tree",
    "href": "12_build.html#aside-tree",
    "title": "Build",
    "section": "Aside: Tree",
    "text": "Aside: Tree\n\nCan also see directory structure.\nInstall tree with your preferred installer (perhaps apt or brew)\n\nsudo apt install tree\n\nThen use tree instead of ls\n\n.\n├── Cargo.toml\n└── src\n    └── main.rs\n\n1 directory, 2 files",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#main.rs",
    "href": "12_build.html#main.rs",
    "title": "Build",
    "section": "main.rs",
    "text": "main.rs\n\nCargo creates projects with a default main file.\n\n\n\nmain.rs\n\nfn main() {\n    println!(\"Hello, world!\");\n}\n\n\nThe name “main” is basically mainful to Cargo - it says which, if multiple, .rs files to read first when trying to execute the code in a package.\n\nMake sure you understand that sentence.",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#run",
    "href": "12_build.html#run",
    "title": "Build",
    "section": "Run",
    "text": "Run\n\ncargo run is probably our closest equivalent to python3 throwaway_example.py or the “Run” button in VS Code.\nOf note, you can simply do “new” then “run”.\n\n“New” creates a new folder.\n“Run” must be done from within that folder.",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#try-it",
    "href": "12_build.html#try-it",
    "title": "Build",
    "section": "Try it",
    "text": "Try it\n\nDo this:\n\ncargo run\n\nSee this:\n\n   Compiling throwaway_example v0.1.0 (/home/user/throwaway_example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.56s\n     Running `target/debug/throwaway_example`\nHello, world!",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#again",
    "href": "12_build.html#again",
    "title": "Build",
    "section": "Again!",
    "text": "Again!\n\nIf you run again, the process will:\n\nSkip the compile step.\nBe way faster (∞x reported here)\n\n\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/throwaway_example`\nHello, world!\n\n0.56s -&gt; 0.00s",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#its-fast",
    "href": "12_build.html#its-fast",
    "title": "Build",
    "section": "It’s fast",
    "text": "It’s fast\n\n0.56s -&gt; 0.00s\nThis is why we use languages which compile.\n\nPython took around .04s, for me.\n\ntime python3 -c \"print('Hello, world')\"\nThe results are:\n\nHello, world\n\nreal    0m0.039s\nuser    0m0.007s\nsys     0m0.008s\n\nGuess how long it takes to compile python, by the way.",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#other-files",
    "href": "12_build.html#other-files",
    "title": "Build",
    "section": "Other files",
    "text": "Other files\n\nGo ahead and add another .rs file and see what happens.\n\nAdd it to the src directory!\n\nI’ll use this one - I change filename and text, but\n\n\n\nsecondary.rs\n\nfn secondary() {\n    println!(\"Goodbye, space!\");\n}",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#run-it-again",
    "href": "12_build.html#run-it-again",
    "title": "Build",
    "section": "Run it again…",
    "text": "Run it again…\n\nNothing changes.\n\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/throwaway_example`\nHello, world!\n\nThis is the same as adding another .py file then not using import or including its code in any other way.",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#swap-the-names.",
    "href": "12_build.html#swap-the-names.",
    "title": "Build",
    "section": "Swap the names.",
    "text": "Swap the names.\n\nI use mv (move) to change:\n\nmain.rs to old_main.rs\nsecondary.rs to main.rs\n\nThings change!\n\n   Compiling throwaway_example v0.1.0 (/home/user/throwaway_example)\nerror[E0601]: `main` function not found in crate `throwaway_example`\n --&gt; src/main.rs:3:2\n  |\n3 | }\n  |  ^ consider adding a `main` function to `src/main.rs`\n\nFor more information about this error, try `rustc --explain E0601`.\nerror: could not compile `throwaway_example` (bin \"throwaway_example\") due to 1 previous error",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#requirements",
    "href": "12_build.html#requirements",
    "title": "Build",
    "section": "Requirements",
    "text": "Requirements\n\nYou need a main.rs with a function named main.\nnvim src/main.rs -&gt; Change “secondary” to “main” -&gt; “cargo run”\n\n   Compiling throwaway_example v0.1.0 (/home/user/throwaway_example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.33s\n     Running `target/debug/throwaway_example`\nGoodbye, space!",
    "crumbs": [
      "Build"
    ]
  },
  {
    "objectID": "12_build.html#footnotes",
    "href": "12_build.html#footnotes",
    "title": "Build",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nWell, kinda. We’ll get to that.↩︎",
    "crumbs": [
      "Build"
    ]
  }
]