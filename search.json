[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Systems in Rust",
    "section": "",
    "text": "CS 271 “Systems in Rust”\n\nCalled:\n\nCS 271: Systems Programming\nCS 271: Sys Programming, Computer Arch\n\nThe first semester class in a:\n\nCompiled language, with\nNo garbage collector.\n\nTerm these “systems” languages.\n\nSuitable to write an operating system.\n\nTaught this year in Rust.\n\nSo to me, “Systems in Rust”\n\n\n\nMW 1310-1440\n\n\nProf. Calvin\n\n\nSyllabus\n\nUngrade selected by a comfortable super majority.\nSyllabus link\n\n\n\n\nCalendar\n\n\n\nWeek\nDate (M)\nLecture (M)\nLab (W)\nHW (F)\n\n\n\n\n0x0\n08/25\nWelcome\nRustup\nHi world\n\n\n0x1\n09/01\nNone\nPackages\nHi cargo\n\n\n0x2\n09/08\nOptions\nGuess\nWordle\n\n\n0x3\n09/15\nBits\nHamming\nMacros\n\n\n0x4\n09/22\nSHA2\nConstants\nSHA512\n\n\n0x5\n09/29\nIEEE754\nf16\nSHA512\n\n\n0x6\n10/06\nPractice\nMidterm\nNone\n\n\n0x7\n10/13\nNumbers\nI/O\nix\n\n\n0x8\n10/20\nEdDSA\nPython\nEd25519\n\n\n0x9\n10/27\nStacks\nList\nTree\n\n\n0xA\n11/03\nGraphs\nBFS\nDjikstra\n\n\n0xB\n11/10\nMerkle\n\n\n\n\n0xC\n11/17\nVCS\n\n\n\n\n0xD\n11/24\nSpectre\nNone\nNone\n\n\n0xE\n12/01\nMeltdown\nHypers\nVCS.rs\n\n\n\n\n\n\nLecture Recordings"
  },
  {
    "objectID": "81_python.html",
    "href": "81_python.html",
    "title": "Python",
    "section": "",
    "text": "All from https://ed25519.cr.yp.to/software.html.\n\ned25519.py is translated into Python 3, with the main changes being using &lt;bytes&gt; instead of strings and using integer division.\nThe assert block is from checkparams.py, with the same changes.\nThe tester is a line from the regression tests, lifted from signs.py and signs.input\n\nFormatted with Black and type hints added manually.\n\nLook over the code and understand the types and operations.\nRun the code locally and verify the outputs.\nDetermine how to test on a different line from signs.input.\nDevelop a plan to implement in Rust.\n\n\n\n\n\n\n\nThis code is unsafe.\n\n\n\nThis implementation is unsafe, missing the critical “side channel protections” that make ed25519 the emergent standard.\n\nThis implementation does not include protection against side-channel attacks.\n\nNever use this code!",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "81_python.html#preamble",
    "href": "81_python.html#preamble",
    "title": "Python",
    "section": "",
    "text": "All from https://ed25519.cr.yp.to/software.html.\n\ned25519.py is translated into Python 3, with the main changes being using &lt;bytes&gt; instead of strings and using integer division.\nThe assert block is from checkparams.py, with the same changes.\nThe tester is a line from the regression tests, lifted from signs.py and signs.input\n\nFormatted with Black and type hints added manually.\n\nLook over the code and understand the types and operations.\nRun the code locally and verify the outputs.\nDetermine how to test on a different line from signs.input.\nDevelop a plan to implement in Rust.\n\n\n\n\n\n\n\nThis code is unsafe.\n\n\n\nThis implementation is unsafe, missing the critical “side channel protections” that make ed25519 the emergent standard.\n\nThis implementation does not include protection against side-channel attacks.\n\nNever use this code!",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "81_python.html#ed25519.py",
    "href": "81_python.html#ed25519.py",
    "title": "Python",
    "section": "ed25519.py",
    "text": "ed25519.py\n\nimport hashlib\nfrom typing import List\n\nb: int = 256\nq: int = 2**255 - 19\nl: int = 2**252 + 27742317777372353535851937790883648493\n\n\ndef H(m: bytes) -&gt; bytes:\n    return hashlib.sha512(m).digest()\n\n\ndef expmod(b: int, e: int, m: int) -&gt; int:\n    if e == 0:\n        return 1\n    t = expmod(b, e // 2, m) ** 2 % m\n    _ = e & 1 and (t := (t * b) % m)\n    return t\n\n\ndef inv(x: int) -&gt; int:\n    return expmod(x, q - 2, q)\n\n\nd: int = -121665 * inv(121666)\nI: int = expmod(2, (q - 1) // 4, q)\n\n\ndef xrecover(y: int) -&gt; int:\n    xx = (y * y - 1) * inv(d * y * y + 1)\n    x = expmod(xx, (q + 3) // 8, q)\n    _ = (x * x - xx) % q != 0 and (x := (x * I) % q)\n    _ = x % 2 != 0 and (x := q - x)\n    return x\n\n\nBy: int = 4 * inv(5)\nBx: int = xrecover(By)\nB: List[int] = [Bx % q, By % q]\n\n\ndef edwards(P: List[int], Q: List[int]) -&gt; List[int]:\n    x1 = P[0]\n    y1 = P[1]\n    x2 = Q[0]\n    y2 = Q[1]\n    x3 = (x1 * y2 + x2 * y1) * inv(1 + d * x1 * x2 * y1 * y2)\n    y3 = (y1 * y2 + x1 * x2) * inv(1 - d * x1 * x2 * y1 * y2)\n    return [x3 % q, y3 % q]\n\n\ndef scalarmult(P: List[int], e: int) -&gt; List[int]:\n    if e == 0:\n        return [0, 1]\n    Q = scalarmult(P, e // 2)\n    Q = edwards(Q, Q)\n    _ = e & 1 and (Q := edwards(Q, P))\n    return Q\n\n\ndef encodeint(y: int) -&gt; bytes:\n    bits = [(y &gt;&gt; i) & 1 for i in range(b)]\n    return bytes([sum([bits[i * 8 + j] &lt;&lt; j for j in range(8)]) for i in range(b // 8)])\n\n\ndef encodepoint(P: List[int]) -&gt; bytes:\n    x = P[0]\n    y = P[1]\n    bits = [(y &gt;&gt; i) & 1 for i in range(b - 1)] + [x & 1]\n    return bytes([sum([bits[i * 8 + j] &lt;&lt; j for j in range(8)]) for i in range(b // 8)])\n\n\ndef bit(h: bytes, i: int) -&gt; int:\n    return (h[i // 8] &gt;&gt; (i % 8)) & 1\n\n\ndef publickey(sk: bytes) -&gt; bytes:\n    h = H(sk)  # h is bytes\n    a = 2 ** (b - 2) + sum(2**i * bit(h, i) for i in range(3, b - 2))\n    A = scalarmult(B, a)\n    return encodepoint(A)\n\n\ndef Hint(m: bytes) -&gt; int:\n    h = H(m)  # h is bytes\n    return sum(2**i * bit(h, i) for i in range(2 * b))\n\n\ndef signature(m: bytes, sk: bytes, pk: bytes) -&gt; bytes:\n    h = H(sk)  # h is bytes\n    a = 2 ** (b - 2) + sum(2**i * bit(h, i) for i in range(3, b - 2))\n    r = Hint(h[b // 8 : b // 4] + m)\n    R = scalarmult(B, r)\n    h_sig = Hint(encodepoint(R) + pk + m)\n    S = (r + h_sig * a) % l\n    return encodepoint(R) + encodeint(S)\n\n\ndef isoncurve(P: List[int]) -&gt; bool:\n    x = P[0]\n    y = P[1]\n    return (-x * x + y * y - 1 - d * x * x * y * y) % q == 0\n\n\ndef decodeint(s: bytes) -&gt; int:\n    return sum(2**i * bit(s, i) for i in range(0, b))\n\n\ndef decodepoint(s: bytes) -&gt; List[int]:\n    y = sum(2**i * bit(s, i) for i in range(0, b - 1))\n    x = xrecover(y)\n    x & 1 != bit(s, b - 1) and (x := q - x)\n    P = [x, y]\n    if not isoncurve(P):\n        raise Exception(\"decoding point that is not on curve\")\n    return P\n\n\ndef checkvalid(s: bytes, m: bytes, pk: bytes) -&gt; bool:\n    if len(s) != b // 4:\n        raise Exception(\"signature length is wrong\")\n    if len(pk) != b // 8:\n        raise Exception(\"public-key length is wrong\")\n\n    R = decodepoint(s[0 : b // 8])\n    A = decodepoint(pk)\n    S = decodeint(s[b // 8 : b // 4])\n    h = Hint(encodepoint(R) + pk + m)\n    return scalarmult(B, S) == edwards(R, scalarmult(A, h))",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "81_python.html#checkparams.py",
    "href": "81_python.html#checkparams.py",
    "title": "Python",
    "section": "checkparams.py",
    "text": "checkparams.py\n\nassert b &gt;= 10\nassert 8 * len(H(b\"hash input\")) == 2 * b\nassert expmod(2, q - 1, q) == 1\nassert q % 4 == 1\nassert expmod(2, l - 1, l) == 1\nassert l &gt;= 2 ** (b - 4)\nassert l &lt;= 2 ** (b - 3)\nassert expmod(d, (q - 1) // 2, q) == q - 1\nassert expmod(I, 2, q) == q - 1\nassert isoncurve(B)\nassert scalarmult(B, l) == [0, 1]",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "81_python.html#sign.input-excerpt",
    "href": "81_python.html#sign.input-excerpt",
    "title": "Python",
    "section": "sign.input excerpt",
    "text": "sign.input excerpt\n\nline = \"4ccd089b28ff96da9db6c346ec114e0f5b8a319f35aba624da8cf6ed4fb8a6fb3d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c:3d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c:72:92a009a9f0d4cab8720e820b5f642540a2b27b5416503f8fb3762223ebdb69da085ac1e43e15996e458f3613d0f11d8c387b2eaeb4302aeeb00d291612bb0c0072:\"",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "81_python.html#sign.py-except",
    "href": "81_python.html#sign.py-except",
    "title": "Python",
    "section": "sign.py except",
    "text": "sign.py except\n\nimport binascii\n\n# fields on each input line: sk, pk, m, sm\n# each field hex\n# each field colon-terminated\n# sk includes pk at end\n# sm includes m at end\nx = line.split(\":\")\nsk = binascii.unhexlify(x[0][0:64])\nm = binascii.unhexlify(x[2])\npk = publickey(sk)\ns = signature(m, sk, pk)\n\nassert checkvalid(s, m, pk)\nassert bytes(x[0].encode(\"latin-1\")) == binascii.hexlify(sk + pk)\nassert bytes(x[1].encode(\"latin-1\")) == binascii.hexlify(pk)\nassert bytes(x[3].encode(\"latin-1\")) == binascii.hexlify(s + m)",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "72_ix.html",
    "href": "72_ix.html",
    "title": "ix",
    "section": "",
    "text": "To complete this assignment, you must:\n\nCreate a 72 directory in your 271rs repository.\nThis folder must be a Cargo package.\nAs a convenience, I named mine bignum just to call it something other than ix, which was confusing.\n\ncargo new 72 --name bignum --vcs none\n\n\n\n\n\nI have provided a completing testing framework within the I/O lab.\n\n\n\n\n\nYou will implement:\n\nadd_ix\nsub_ix\nmul_ix\n\nYou will attempt, but regard as a challenge problem:\n\ndiv_ix and rem_ix, which are likely wrappers on the same “divmod” helper function.\n\n\n\n\n\nDEBUG = 0\nCMD = \"cargo run --\"\n\nimport subprocess, os, random\nfrom operator import add, sub, mul, floordiv as quo, mod as rem\n\nbigone, bigtwo = random.randint(2 ** 500, 2 ** 512), random.randint(2 ** 500, 2 ** 512)\nhexone, hextwo = hex(bigone), hex(bigtwo)\nDEBUG and print(\"\\nhexone =\\n\", hexone, \"\\nhextwo = \\n\", hextwo)\n\nfrom operator import add, sub, mul, floordiv as quo, mod as rem\nops = {'ADD':add,'SUB':sub,'MUL':mul,'QUO':quo,'REM':rem}\nfor op in ops:\n    result = int(subprocess.check_output([\"cargo\", \"run\", hexone, hextwo, op]),16)\n    answer = ops[op](bigone,bigtwo)\n    if result != answer:\n        print(\"Operator\", op, \"failed.\")\n        DEBUG and print(\"Expected:\")\n        DEBUG and print(hex(answer))\n        DEBUG and print(\"Received:\")\n        DEBUG and print(hex(result))\n        exit()\n    else:\n        print(op, \"passes.\")",
    "crumbs": [
      "ix"
    ]
  },
  {
    "objectID": "72_ix.html#requirements",
    "href": "72_ix.html#requirements",
    "title": "ix",
    "section": "",
    "text": "To complete this assignment, you must:\n\nCreate a 72 directory in your 271rs repository.\nThis folder must be a Cargo package.\nAs a convenience, I named mine bignum just to call it something other than ix, which was confusing.\n\ncargo new 72 --name bignum --vcs none",
    "crumbs": [
      "ix"
    ]
  },
  {
    "objectID": "72_ix.html#my-responsibility",
    "href": "72_ix.html#my-responsibility",
    "title": "ix",
    "section": "",
    "text": "I have provided a completing testing framework within the I/O lab.",
    "crumbs": [
      "ix"
    ]
  },
  {
    "objectID": "72_ix.html#your-responsibility",
    "href": "72_ix.html#your-responsibility",
    "title": "ix",
    "section": "",
    "text": "You will implement:\n\nadd_ix\nsub_ix\nmul_ix\n\nYou will attempt, but regard as a challenge problem:\n\ndiv_ix and rem_ix, which are likely wrappers on the same “divmod” helper function.",
    "crumbs": [
      "ix"
    ]
  },
  {
    "objectID": "72_ix.html#tester",
    "href": "72_ix.html#tester",
    "title": "ix",
    "section": "",
    "text": "DEBUG = 0\nCMD = \"cargo run --\"\n\nimport subprocess, os, random\nfrom operator import add, sub, mul, floordiv as quo, mod as rem\n\nbigone, bigtwo = random.randint(2 ** 500, 2 ** 512), random.randint(2 ** 500, 2 ** 512)\nhexone, hextwo = hex(bigone), hex(bigtwo)\nDEBUG and print(\"\\nhexone =\\n\", hexone, \"\\nhextwo = \\n\", hextwo)\n\nfrom operator import add, sub, mul, floordiv as quo, mod as rem\nops = {'ADD':add,'SUB':sub,'MUL':mul,'QUO':quo,'REM':rem}\nfor op in ops:\n    result = int(subprocess.check_output([\"cargo\", \"run\", hexone, hextwo, op]),16)\n    answer = ops[op](bigone,bigtwo)\n    if result != answer:\n        print(\"Operator\", op, \"failed.\")\n        DEBUG and print(\"Expected:\")\n        DEBUG and print(hex(answer))\n        DEBUG and print(\"Received:\")\n        DEBUG and print(hex(result))\n        exit()\n    else:\n        print(op, \"passes.\")",
    "crumbs": [
      "ix"
    ]
  },
  {
    "objectID": "70_numbers.html",
    "href": "70_numbers.html",
    "title": "Numbers",
    "section": "",
    "text": "Welcome to Systems in Rust\nAction Items:\n\nMidterms verbal update.\nNext assignment goes out Friday, start whenever.\nThis lecture supports that homework.\n\n\n\n\n\nFinite sets, rings\nArbitrary/high precision integers\nArithmetic operations\nFunction types",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#today",
    "href": "70_numbers.html#today",
    "title": "Numbers",
    "section": "",
    "text": "Finite sets, rings\nArbitrary/high precision integers\nArithmetic operations\nFunction types",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#apocryphal-quote",
    "href": "70_numbers.html#apocryphal-quote",
    "title": "Numbers",
    "section": "Apocryphal Quote",
    "text": "Apocryphal Quote\n\nI cannot find it, but I believe a philosopher one jested:\n\n\nI am a weapons-grade finitist. I don’t believe in numbers larger than two.\n\n\nArrays of such numbers are sufficient for computation of arbitrary precision.\nWe can not capture the infinite, but we may model it.",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#what-are-integers",
    "href": "70_numbers.html#what-are-integers",
    "title": "Numbers",
    "section": "What are integers?",
    "text": "What are integers?\n\nDenote integers as the mathematical symbol \\(\\mathbb{Z}\\)\n\nSomething to do with the German/Deutsch\n\nNot particular useful in cryptography, actually\n\nWe tend to want the naturals, denoted \\(\\mathbb{N}\\)\nCounting numbers, \\(0\\) and up.",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#in-python",
    "href": "70_numbers.html#in-python",
    "title": "Numbers",
    "section": "In Python",
    "text": "In Python\n\nWe can write them in Python with itertools\n\n\n\nfields.py\n\nfrom itertools import count\nN = count()\nmake_z = lambda n : n // 2 if n % 2 else -n // 2\nZ = (make_z(n) for n in count(1))\n# We can see elements of these infinite collections with\n[next(N) for _ in range(5)], [next(Z) for _ in range(5)]\n\n\nWhat do you see?\n\n([0, 1, 2, 3, 4], [0, -1, 1, -2, 2])",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#aside",
    "href": "70_numbers.html#aside",
    "title": "Numbers",
    "section": "Aside",
    "text": "Aside\n\nIt is moderately controversial to assert: \\[\n0 \\in \\mathbb{N}\n\\]\n\nEnderton, Herbert B. (1977). Elements of set theory. New York: Academic Press. p. 66. ISBN 0122384407.\n\nFortunately this is a CS class.\n\nassert(0 in count())",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#mathbbn-is-akin-to-un",
    "href": "70_numbers.html#mathbbn-is-akin-to-un",
    "title": "Numbers",
    "section": "\\(\\mathbb{N}\\) is akin to u\\(n\\)",
    "text": "\\(\\mathbb{N}\\) is akin to u\\(n\\)\n\nThe natural numbers \\(\\mathbb{N}\\) probably look a lot like the unsigned integers.\nThere’s only one real problem.\n\nGet it, \\(\\mathbb{R}\\)EAL problem.\n\n\nWe don’t have the unsigned integers in Rust.\n\nWe don’t have them in Python either, but for a different reason.",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#the-problem",
    "href": "70_numbers.html#the-problem",
    "title": "Numbers",
    "section": "The Problem",
    "text": "The Problem\n\nPython has been lying to us for years that its set of integers has no upper bound.\n\nWe say \\(\\nexists n : n \\notin\\) count()\nLet’s just try a reasonably sized number, say googolplex \\(= 10^{10^{100}}\\)",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#test-with--c",
    "href": "70_numbers.html#test-with--c",
    "title": "Numbers",
    "section": "Test with -c",
    "text": "Test with -c\n\nWe use the -c flag to Python to run a script directly at command line.\n\npython3 -c \"print('hello world')\"\n\nPerform multi-line calculuations using ;\n\nOh - like Rust. 🤔\n\n\npython3 -c \"from itertools import count; print(0 in count())\"",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#time-it",
    "href": "70_numbers.html#time-it",
    "title": "Numbers",
    "section": "Time it",
    "text": "Time it\n$ time python3 -c \"from itertools import count; print(0 in count())\"\nTrue\n\nreal    0m0.013s\nuser    0m0.014s\nsys     0m0.000s\n\nWe could argue it takes .013 seconds to check\nOr .013 seconds to find itertools on a SDD",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#bigger-numbers",
    "href": "70_numbers.html#bigger-numbers",
    "title": "Numbers",
    "section": "Bigger Numbers",
    "text": "Bigger Numbers\n\nCheck e.g. 1000\n\n$ time python3 -c \"from itertools import count; print(1000 in count())\"\nTrue\n\nreal    0m0.012s\nuser    0m0.012s\nsys     0m0.000s\n\nTrivial.",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#test-it",
    "href": "70_numbers.html#test-it",
    "title": "Numbers",
    "section": "Test it",
    "text": "Test it\n\nTry a few powers yourself. What do you find?\n\ntime python3 -c \"from itertools import count; n=1; print(10**n in count())\"",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#section",
    "href": "70_numbers.html#section",
    "title": "Numbers",
    "section": "",
    "text": "10^\\(n\\)\nreal\n\n\n\n\n1\n00.012\n\n\n2\n00.012\n\n\n3\n00.012\n\n\n4\n00.013\n\n\n5\n00.013\n\n\n6\n00.027\n\n\n7\n00.164\n\n\n8\n01.498\n\n\n9\n16.810\n\n\n\n\n\nExpect: \\[\nt(10^{10}) \\in [140,170]\n\\]\nExpect for \\(n \\gt 9\\) \\[\nt(10^n) \\in [14,17] \\times 10^{n-9}\n\\]\nExpect \\(10^{10^{100}}\\) in\n\n\\(10^{10^{91}}\\) seconds\n316 novemvigintilion years",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#rust",
    "href": "70_numbers.html#rust",
    "title": "Numbers",
    "section": "Rust",
    "text": "Rust\n\nRust is a little more forthright about how big its numbers get.\n\npub const MAX: i32 = i32::MAX; // 2_147_483_647i32\n\nRead more, or don’t. I’m a hyperlink; not an imperative.",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#quoth-rust-book",
    "href": "70_numbers.html#quoth-rust-book",
    "title": "Numbers",
    "section": "Quoth Rust Book",
    "text": "Quoth Rust Book\n\nLet’s say you have a variable of type u8 that can hold values between 0 and 255. If you try to change the variable to a value outside that range, such as 256, integer overflow will occur, which can result in one of two behaviors. When you’re compiling in debug mode, Rust includes checks for integer overflow that cause your program to panic at runtime if this behavior occurs. Rust uses the term panicking when a program exits with an error…",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#quoth-rust-book-1",
    "href": "70_numbers.html#quoth-rust-book-1",
    "title": "Numbers",
    "section": "Quoth Rust Book",
    "text": "Quoth Rust Book\n\nWhen you’re compiling in release mode with the –release flag, Rust does not include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs two’s complement wrapping. In short, values greater than the maximum value the type can hold “wrap around” to the minimum of the values the type can hold. In the case of a u8, the value 256 becomes 0, the value 257 becomes 1, and so on. The program won’t panic, but the variable will have a value that probably isn’t what you were expecting it to have. Relying on integer overflow’s wrapping behavior is considered an error.",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#quoth-rust-book-2",
    "href": "70_numbers.html#quoth-rust-book-2",
    "title": "Numbers",
    "section": "Quoth Rust Book",
    "text": "Quoth Rust Book\n\nThe program won’t panic, but the variable will have a value that probably isn’t what you were expecting it to have. Relying on integer overflow’s wrapping behavior is considered an error.\n\n\nTo explicitly handle the possibility of overflow, you can use these families of methods provided by the standard library for primitive numeric types:",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#methods-in-rust",
    "href": "70_numbers.html#methods-in-rust",
    "title": "Numbers",
    "section": "Methods in Rust",
    "text": "Methods in Rust\n\nWrap in all modes with the wrapping_* methods, such as wrapping_add.\nReturn the None value if there is overflow with the checked_* methods.\nReturn the value and a Boolean indicating whether there was overflow with the overflowing_* methods.\nSaturate at the value’s minimum or maximum values with the saturating_* methods.",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#editorializing",
    "href": "70_numbers.html#editorializing",
    "title": "Numbers",
    "section": "Editorializing",
    "text": "Editorializing\n\nI find having different numerical behavior in debug and release versions extremely questionable.\nI was willing to bite my tongue but in fact:\n\nThis is impacts SHA-2, upcoming ECDSA, f16 and ix\nUsing stable numerical behavior facilitated debatably easier implementations in C last term.",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#demo-in-rust",
    "href": "70_numbers.html#demo-in-rust",
    "title": "Numbers",
    "section": "Demo in Rust",
    "text": "Demo in Rust\n\nWe don’t have to just trust in the given i32 upper bound, we can test it.\nWell, kinda…\n\n\n\nsrc/main.rs\n\nfn main() {\n    let mut n: i32 = 0;\n    while (n + 1) &gt; n {\n        n += 1;\n    }\n    dbg!(n);\n    dbg!(i32::MAX);\n}",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#testing",
    "href": "70_numbers.html#testing",
    "title": "Numbers",
    "section": "Testing…",
    "text": "Testing…\n\nLet’s time how long this takes!\n\nWe timed Python.\n\nGo ahead and time cargo run\n\n   Compiling num v0.1.0 (/home/user/tmp/num)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.25s\n     Running `target/debug/num`\n\nthread 'main' panicked at src/main.rs:3:11:\nattempt to add with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nreal    0m4.943s\nuser    0m4.914s\nsys     0m0.079s",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#discuss",
    "href": "70_numbers.html#discuss",
    "title": "Numbers",
    "section": "Discuss",
    "text": "Discuss\n\nFor me, this took 4.66s on i32\n\nSame value in Python was 1m9.32s\n\nThis is about half the speed I got with C.\n\n\nHow long for u64?\n\nIn Python?\n\nHow would speed up the code?\n\nWhat assumptions did you make?\n\nHow many base 10 digits does the largest number we can store in 32 bytes have?",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#testing-1",
    "href": "70_numbers.html#testing-1",
    "title": "Numbers",
    "section": "Testing…",
    "text": "Testing…\n\nRust behaves differently with the --release flag.\n\nJust me: I hate this!\n\ntime cargo run --release\n\n   Compiling num v0.1.0 (/home/user/tmp/num)\n    Finished `release` profile [optimized] target(s) in 0.54s\n     Running `target/release/num`\n[src/main.rs:6:5] n = 2147483647\n[src/main.rs:7:5] i32::MAX = 2147483647\n\nreal    0m0.578s\nuser    0m0.086s\nsys     0m0.116s",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#rings",
    "href": "70_numbers.html#rings",
    "title": "Numbers",
    "section": "Rings",
    "text": "Rings\n\nAs far as I know (not a mathematician) the u\\(n\\)s and i\\(n\\)’s in Rust are rings\n\nThey have addition and multiplication\n\nThey aren’t fields - zero is divisible\n\nSpoiler alert, but \\(2^{\\frac{n}{2}} \\times 2^{\\frac{n}{2}} \\equiv 0 \\pmod{2^n}\\)",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#rings-vs-integers",
    "href": "70_numbers.html#rings-vs-integers",
    "title": "Numbers",
    "section": "Rings vs Integers",
    "text": "Rings vs Integers\n\nRings have some “goofy” features\n\n\\(a, b \\in\\) u\\(n\\) \\(\\nRightarrow a + b &gt; a\\)\nSame with multiplication.\n\nLet’s look at an example.",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#checkers",
    "href": "70_numbers.html#checkers",
    "title": "Numbers",
    "section": "Checkers",
    "text": "Checkers\n\n\nsrc/main.rs\n\nfn main() {\n    let args: Vec&lt;String&gt; = std::env::args().collect();\n    let a:u8 = args[1].parse().unwrap();\n    let b:u8 = args[2].parse().unwrap();\n    dbg!(a + b);\n}",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#do-some-additions",
    "href": "70_numbers.html#do-some-additions",
    "title": "Numbers",
    "section": "Do some additions",
    "text": "Do some additions\n$ cargo run -- 10 20\n   Compiling num v0.1.0 (/home/user/tmp/num)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.23s\n     Running `target/debug/num 10 20`\n[src/main.rs:5:5] a + b = 30\n\n30 - that makes sense!",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#do-some-additions-1",
    "href": "70_numbers.html#do-some-additions-1",
    "title": "Numbers",
    "section": "Do some additions",
    "text": "Do some additions\n$ cargo run -- 100 200\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/num 100 200`\n\nthread 'main' panicked at src/main.rs:5:10:\nattempt to add with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nOverflow - sure, \\(100 + 200 = 300 &gt; 2^8 = 256\\)",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#do-some-additions-2",
    "href": "70_numbers.html#do-some-additions-2",
    "title": "Numbers",
    "section": "Do some additions",
    "text": "Do some additions\n$ cargo run --release -- 100 200\n   Compiling num v0.1.0 (/home/user/tmp/num)\n    Finished `release` profile [optimized] target(s) in 0.25s\n     Running `target/release/num 100 200`\n[src/main.rs:5:5] a + b = 44\n\n44? From Whence?\n\n\\[\n100 + 200 \\equiv 44 \\pmod{2^8}\n\\] - Or perhaps\npython3 -c \"print((100 + 200) % (2 ** 8) == 44)\"",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#rust-integers-are-finite",
    "href": "70_numbers.html#rust-integers-are-finite",
    "title": "Numbers",
    "section": "Rust integers are finite",
    "text": "Rust integers are finite\n&gt;&gt;&gt; 200 + 100\n300\n&gt;&gt;&gt; 2 ** 8\n256\n&gt;&gt;&gt; 300 - 256\n44\n&gt;&gt;&gt; 300 % 256\n44\n\nEquivalent to operations on the naturals modulo \\(2^8\\)\nUsually denoted as: \\[\n\\mathbb{Z}/2^8\\mathbb{Z}\n\\]\nWe say \\(\\mathbb{Z}\\) not \\(\\mathbb{N}\\) as \\(-1 \\in \\mathbb{Z}/n\\mathbb{Z}\\)",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#in-practice",
    "href": "70_numbers.html#in-practice",
    "title": "Numbers",
    "section": "In practice",
    "text": "In practice\n\n\\(\\exists\\) i32::MAX, u64::MAX, etc.\nSums and products less than these values are unaffected.\nSums and products greater than these values are unstable.\nUse methods or compile for release.",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#problem-statement",
    "href": "70_numbers.html#problem-statement",
    "title": "Numbers",
    "section": "Problem Statement",
    "text": "Problem Statement\n\nQuoth GitHub\n\n\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n\n\nWait a minute.\nWhat does that 4096 stand for?\n\nFor what does that 4096 stand?",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#n-128-bits",
    "href": "70_numbers.html#n-128-bits",
    "title": "Numbers",
    "section": "\\(n > 128\\) bits",
    "text": "\\(n &gt; 128\\) bits\n\nModern security recommendations are for 4096 bit cryptographic keys.\n\n2048 is generally considered “okay” or “acceptable”\n\n\nNAME\n     ssh-keygen — OpenSSH authentication key utility\n\nSYNOPSIS\n     ssh-keygen [-q] [-a rounds] [-b bits]",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#big-values",
    "href": "70_numbers.html#big-values",
    "title": "Numbers",
    "section": "Big Values",
    "text": "Big Values\n\nSoon, we will implement key generation.\n\nWe’ll talk about what it is then.\n\nFirst, we need a way to deal with integers that big.\nWe will use modular arithmetic.\n\nFinite u64 models infinite \\(\\mathbb{Z}\\)",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#simple-example",
    "href": "70_numbers.html#simple-example",
    "title": "Numbers",
    "section": "Simple Example",
    "text": "Simple Example\n\nYoink a data science example.\nWe had a data set for which we determined a mean height in inches.\nWe converted it to inches and feet.\n\n&gt;&gt;&gt; 69.3 // 12, 69.3 % 12\n(5.0, 9.299999999999997)\n\nFloats: they’re bad.",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#addition-is-easy",
    "href": "70_numbers.html#addition-is-easy",
    "title": "Numbers",
    "section": "Addition is easy",
    "text": "Addition is easy\n\nWNBA MVP and Olympic Gold Medalist A’ja Wilson is 6 ft 4 in\nHow much taller is that than 5 ft 9.3 in\n\nCan convert to non-integer inches, but…\nWe already had the .299… problem",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#difference",
    "href": "70_numbers.html#difference",
    "title": "Numbers",
    "section": "Difference",
    "text": "Difference\n\nWe perform “long subtraction”\nIt’s fun!\n\n\n\n\n\nft\nin.\n.in\n\n\n\n\nA’ja\n6\n4\n0\n\n\nMean\n5\n9\n3",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#difference-1",
    "href": "70_numbers.html#difference-1",
    "title": "Numbers",
    "section": "Difference",
    "text": "Difference\n\n\\(0 - 3 \\equiv 7 \\pmod{10}\\)\nTenths of inches\n\n\n\n\n\nft\nin.\n.in\n\n\n\n\nA’ja\n6\n4\n0\n\n\nMean\n5\n9\n3\n\n\nDiff\n\n\n7",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#difference-2",
    "href": "70_numbers.html#difference-2",
    "title": "Numbers",
    "section": "Difference",
    "text": "Difference\n\nBut wait - 3 is more than 0\nTrack via a “carry”\n\n\n\n\n\nft\nin.\n.in\n\n\n\n\nA’ja\n6\n4\n0\n\n\nMean\n5\n9\n3\n\n\nCarry\n0\n1\n0\n\n\nDiff\n\n\n7",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#difference-3",
    "href": "70_numbers.html#difference-3",
    "title": "Numbers",
    "section": "Difference",
    "text": "Difference\n\n\\(4 - 9 - 1 \\equiv 6 \\pmod{12}\\)\n12 in = 1 ft\n\n\n\n\n\nft\nin.\n.in\n\n\n\n\nA’ja\n6\n4\n0\n\n\nMean\n5\n9\n3\n\n\nCarry\n0\n1\n0\n\n\nDiff\n\n6\n7",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#difference-4",
    "href": "70_numbers.html#difference-4",
    "title": "Numbers",
    "section": "Difference",
    "text": "Difference\n\nAnother carry.\n12 in = 1 ft\n\n\n\n\n\nft\nin.\n.in\n\n\n\n\nA’ja\n6\n4\n0\n\n\nMean\n5\n9\n3\n\n\nCarry\n1\n0\n0\n\n\nDiff\n\n6\n7",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#difference-5",
    "href": "70_numbers.html#difference-5",
    "title": "Numbers",
    "section": "Difference",
    "text": "Difference\n\n\\(6 - 5 - 1 = 0\\)\nNonmodular - feet has no max.\n\n\n\n\n\nft\nin.\n.in\n\n\n\n\nA’ja\n6\n4\n0\n\n\nMean\n5\n9\n3\n\n\nCarry\n1\n0\n0\n\n\nDiff\n0\n6\n7",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#conclusion",
    "href": "70_numbers.html#conclusion",
    "title": "Numbers",
    "section": "Conclusion",
    "text": "Conclusion\n\nIconic living legend A’ja Wilson is tall af.\nWe can do addition and substraction on larger values than u64::MAX by:\n\nBreaking numbers in smaller ranges\n\nA tenths digit\nA ones digit\nA twelves digit",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#usefulness",
    "href": "70_numbers.html#usefulness",
    "title": "Numbers",
    "section": "Usefulness",
    "text": "Usefulness\n\nWe can now do arithmetic correctly\n\n@Python\n\nWhat else can we do?\n\nArbitrary (not infinite) precision.",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#faq",
    "href": "70_numbers.html#faq",
    "title": "Numbers",
    "section": "FAQ",
    "text": "FAQ\n\nCan we use this to add numbers bigger than \\(2^n\\) using adds over at most \\(n\\) bits at a time?\n\nSure! Change the modulos and you’re set.\n\nGet it? Because the numbers form a set?\n\n\nCan we do this for more than 3 units?\n\nSure! Just put the middle (both consumes and produces a carry bit) in a loop!",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#easy-mode",
    "href": "70_numbers.html#easy-mode",
    "title": "Numbers",
    "section": "Easy Mode",
    "text": "Easy Mode\n\nAddition and subtraction are easy.\nFor some value of easy.\n\nCut a too-big number into chunks.\nAdd or subtract within chunks of the same index/offset/significance.\nOnly wrinkle is a carry bit.\n\nIdentical to digit-based addition.\n\nu8s as digits in base 256 arithmetic",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#hard-mode",
    "href": "70_numbers.html#hard-mode",
    "title": "Numbers",
    "section": "Hard Mode",
    "text": "Hard Mode\n\nSome cryptographical algorithms, however, use two extremely advanced arithmetic operations:\n\nMultiplication, and\nDivision, and\nModulo\n\nFortunately this only two operations (need a combined divmod)",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#example",
    "href": "70_numbers.html#example",
    "title": "Numbers",
    "section": "Example",
    "text": "Example\n\nLast term I taught:\n\n14 MS-level Computer Scientists\n\n9-12 hrs/wk\n14 week contract\n\n34 BS-level Computer Scientists\n\n6-9 hrs/wk\n15.5 week contract\n\n\nHow many person hours is this?",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#napkin-math",
    "href": "70_numbers.html#napkin-math",
    "title": "Numbers",
    "section": "Napkin Math",
    "text": "Napkin Math\n\nI’d say\n\n\\(14 \\times 12 \\times 14\\)\n\\(34 \\times 9 \\times 15.5\\)\n\nI… can’t quite do that in one fell swoop.\n\n\\(14 \\times 12\\) is trivially \\(12^2 + 24 = 168\\)\n\\(9 \\times 15.5\\) is trivially \\(155 - 15.5 = 139.5\\)",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#times-139.5",
    "href": "70_numbers.html#times-139.5",
    "title": "Numbers",
    "section": "\\(34 \\times 139.5\\)",
    "text": "\\(34 \\times 139.5\\)\n\nThat just isn’t easy\n(140 * 34 isn’t bad, but we need a motivating example).\nExpress digit-wise:\n\n\n\n\n\n1\n3\n9\n5\n\n\n\n\n3\n-\n-\n-\n-\n\n\n4\n-\n-\n-\n-",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#times-139.5-1",
    "href": "70_numbers.html#times-139.5-1",
    "title": "Numbers",
    "section": "\\(34 \\times 139.5\\)",
    "text": "\\(34 \\times 139.5\\)\n\nCompute all products over single-digit factors\n\n\n\n\n\n1\n3\n9\n5\n\n\n\n\n3\n3\n9\n27\n15\n\n\n4\n4\n12\n36\n20\n\n\n\n\nThese:\n\nAren’t single digit\nAren’t of the same signficance",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#times-139.5-2",
    "href": "70_numbers.html#times-139.5-2",
    "title": "Numbers",
    "section": "\\(34 \\times 139.5\\)",
    "text": "\\(34 \\times 139.5\\)\n\nInclude sigificance\n\n\n\n\n\n100\n30\n9\n.5\n\n\n\n\n30\n3000\n900\n270\n15\n\n\n4\n400\n120\n36\n2",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#dear-watson",
    "href": "70_numbers.html#dear-watson",
    "title": "Numbers",
    "section": "Dear Watson",
    "text": "Dear Watson\n\n\n\n\n\n\n100\n30\n9\n.5\n\n\n\n\n30\n3000\n900\n270\n15\n\n\n4\n400\n120\n36\n2\n\n\n\n\n\\[\n\\begin{align*}\n5& \\times 4  \\times 10^{-1}  &= 2&\\\\\n+5& \\times 3  \\times 10^{0}  &= 15&\\\\\n+9& \\times 4  \\times 10^{0}  &= 36&\\\\\n+9& \\times 3  \\times 10^{1}  &= 270&\\\\\n+3& \\times 4  \\times 10^{1}  &= 120&\\\\\n+3& \\times 3  \\times 10^{2}  &= 900&\\\\\n+1& \\times 4  \\times 10^{2}  &= 400&\\\\\n+1& \\times 3  \\times 10^{3}  &= 3000&\\\\\n\\end{align*}\n\\]",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#express-as",
    "href": "70_numbers.html#express-as",
    "title": "Numbers",
    "section": "Express as",
    "text": "Express as\n\\[\n\\begin{align*}\n139.5& = &1 * 10^2 + &3 * 10^1 + &9 * 10^0& + 5 * 10^{-1}\\\\\n34& = &&3 * 10^1 + &4 * 10^0&\\\\\n\\end{align*}\n\\]\n\nTake \\(x = 10\\) \\[\n\\begin{align*}\n139.5& = &1 * x^2 + &3 * x + &9& + 5 * x^{-1}\\\\\n34& = &&3 * x + &4&\\\\\n\\end{align*}\n\\]\nThat is polynomial; can work with those.",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#polynomial",
    "href": "70_numbers.html#polynomial",
    "title": "Numbers",
    "section": "Polynomial",
    "text": "Polynomial\n\\[\n(x^2 + 3x + 9 + 5x^{-1})(3x + 4)\n\\]\n\\[\n(x^2 + 3x + 9 + 5x^{-1})(3x) + (x^2 + 3x + 9 + 5x^{-1})(4)\n\\]\n\\[\n(3x^3 + 9x^2 + 27x + 15) + (4x^2 + 12x + 36 + 20x^{-1})\n\\]\n\\[\n3x^3 + 13x^2 + 39x + 51 + 20x^{-1}\n\\]",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#aside-1",
    "href": "70_numbers.html#aside-1",
    "title": "Numbers",
    "section": "Aside",
    "text": "Aside\n\nI think this is covered around ~8th grade\nI don’t want to assume the integrity to US public school system\n\nOr anything school system\nShout out school\n\nThe point of this class isn’t middle/high school math\n\nThat’s the point of life itself /s",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#considerations",
    "href": "70_numbers.html#considerations",
    "title": "Numbers",
    "section": "Considerations",
    "text": "Considerations\n\nIt is natural to express multiplication of e.g. 4096 bit integers as a polynomial over, say, 64 bit integers.\nOne teeny problem:\n\nOverflow.",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#overflow",
    "href": "70_numbers.html#overflow",
    "title": "Numbers",
    "section": "Overflow",
    "text": "Overflow\n\nThe point of calculating this was to get things down to single digit:\n\n\\[\n3x^3 + 13x^2 + 39x + 51x^0 + 20x^{-1}\n\\]\n\n13, 39, 51, and 20 are all not compliant (debatably 20 is okay)\nEssentially, 1-digit multiply may produce a 2-digit product.",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#size-of-ints",
    "href": "70_numbers.html#size-of-ints",
    "title": "Numbers",
    "section": "Size of ints",
    "text": "Size of ints\n\nSay we have two integers of 8 bits of precision.\nWe multiple them together.\nWhat is the largest number we can get, and\nHow many bits does it require?\n\npython3 -c \"x = 2 ** 8 - 1 ; x = x * x ; print(x.bit_length())\"\n\n16",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#division",
    "href": "70_numbers.html#division",
    "title": "Numbers",
    "section": "Division",
    "text": "Division\n\nRemember long division?\n\nAlign the highest digits (I took the log base 2)\nDivide.\nKeep track of significance (Difference between logs)\nCalculate remainder.\nLoop.\n\nThe final remainder is the mod.",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#today-3",
    "href": "70_numbers.html#today-3",
    "title": "Numbers",
    "section": "Today",
    "text": "Today\n\n✓ Finite sets, rings\n✓ Arbitrary/high precision integers\n✓ Arithmetic operations\nFunction types",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#an-arbitrary-precision-type.",
    "href": "70_numbers.html#an-arbitrary-precision-type.",
    "title": "Numbers",
    "section": "An arbitrary precision type.",
    "text": "An arbitrary precision type.\n\nJust as with f16, we can create something to hold numbers.\n\nI used a boolean for signs and a vector for digits.\n\nHere’s an example function declaration:\n\n\n\nsrc/lib.rs\n\n// At the top\n#![allow(non_camel_case_types)]\npub struct ix {\n\n// Latter\npub fn add_ix(a: &ix, b: &ix) -&gt; ix {",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#borrowing",
    "href": "70_numbers.html#borrowing",
    "title": "Numbers",
    "section": "Borrowing",
    "text": "Borrowing\n\nWhy borrow?\n\nThese are data structures, not numerical literals.\n\nMuch closer to vectorized operations than to integer addition.\n\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; hours = np.array([100, 30, 9, .5])\n&gt;&gt;&gt; hours * 34\narray([3400., 1020.,  306.,   17.])\n&gt;&gt;&gt; &gt;&gt;&gt; np.sum(hours * 34)\nnp.float64(4743.0)",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.html#faq-1",
    "href": "70_numbers.html#faq-1",
    "title": "Numbers",
    "section": "FAQ",
    "text": "FAQ\n\nIsn’t there a way to use just + and -.\n\nYes.\nI didn’t find it interesting, you are welcome to do so.\nProvide wrappers of the needed type ((&ix, &ix) -&gt; ix) to use the autotester.",
    "crumbs": [
      "Numbers"
    ]
  },
  {
    "objectID": "70_numbers.rjs.html#today",
    "href": "70_numbers.rjs.html#today",
    "title": "Numbers",
    "section": "Today",
    "text": "Today\n\nFinite sets, rings\nArbitrary/high precision integers\nArithmetic operations\nFunction types"
  },
  {
    "objectID": "70_numbers.rjs.html#apocryphal-quote",
    "href": "70_numbers.rjs.html#apocryphal-quote",
    "title": "Numbers",
    "section": "Apocryphal Quote",
    "text": "Apocryphal Quote\n\nI cannot find it, but I believe a philosopher one jested:\n\n\nI am a weapons-grade finitist. I don’t believe in numbers larger than two.\n\n\nArrays of such numbers are sufficient for computation of arbitrary precision.\nWe can not capture the infinite, but we may model it."
  },
  {
    "objectID": "70_numbers.rjs.html#what-are-integers",
    "href": "70_numbers.rjs.html#what-are-integers",
    "title": "Numbers",
    "section": "What are integers?",
    "text": "What are integers?\n\nDenote integers as the mathematical symbol \\(\\mathbb{Z}\\)\n\nSomething to do with the German/Deutsch\n\nNot particular useful in cryptography, actually\n\nWe tend to want the naturals, denoted \\(\\mathbb{N}\\)\nCounting numbers, \\(0\\) and up."
  },
  {
    "objectID": "70_numbers.rjs.html#in-python",
    "href": "70_numbers.rjs.html#in-python",
    "title": "Numbers",
    "section": "In Python",
    "text": "In Python\n\nWe can write them in Python with itertools\n\n\n\nfields.py\n\nfrom itertools import count\nN = count()\nmake_z = lambda n : n // 2 if n % 2 else -n // 2\nZ = (make_z(n) for n in count(1))\n# We can see elements of these infinite collections with\n[next(N) for _ in range(5)], [next(Z) for _ in range(5)]\n\n\nWhat do you see?\n\n([0, 1, 2, 3, 4], [0, -1, 1, -2, 2])"
  },
  {
    "objectID": "70_numbers.rjs.html#aside",
    "href": "70_numbers.rjs.html#aside",
    "title": "Numbers",
    "section": "Aside",
    "text": "Aside\n\nIt is moderately controversial to assert: \\[\n0 \\in \\mathbb{N}\n\\]\n\nEnderton, Herbert B. (1977). Elements of set theory. New York: Academic Press. p. 66. ISBN 0122384407.\n\nFortunately this is a CS class.\n\nassert(0 in count())"
  },
  {
    "objectID": "70_numbers.rjs.html#mathbbn-is-akin-to-un",
    "href": "70_numbers.rjs.html#mathbbn-is-akin-to-un",
    "title": "Numbers",
    "section": "\\(\\mathbb{N}\\) is akin to u\\(n\\)",
    "text": "\\(\\mathbb{N}\\) is akin to u\\(n\\)\n\nThe natural numbers \\(\\mathbb{N}\\) probably look a lot like the unsigned integers.\nThere’s only one real problem.\n\nGet it, \\(\\mathbb{R}\\)EAL problem.\n\n\nWe don’t have the unsigned integers in Rust.\n\nWe don’t have them in Python either, but for a different reason."
  },
  {
    "objectID": "70_numbers.rjs.html#the-problem",
    "href": "70_numbers.rjs.html#the-problem",
    "title": "Numbers",
    "section": "The Problem",
    "text": "The Problem\n\nPython has been lying to us for years that its set of integers has no upper bound.\n\nWe say \\(\\nexists n : n \\notin\\) count()\nLet’s just try a reasonably sized number, say googolplex \\(= 10^{10^{100}}\\)"
  },
  {
    "objectID": "70_numbers.rjs.html#test-with--c",
    "href": "70_numbers.rjs.html#test-with--c",
    "title": "Numbers",
    "section": "Test with -c",
    "text": "Test with -c\n\nWe use the -c flag to Python to run a script directly at command line.\n\npython3 -c \"print('hello world')\"\n\nPerform multi-line calculuations using ;\n\nOh - like Rust. 🤔\n\n\npython3 -c \"from itertools import count; print(0 in count())\""
  },
  {
    "objectID": "70_numbers.rjs.html#time-it",
    "href": "70_numbers.rjs.html#time-it",
    "title": "Numbers",
    "section": "Time it",
    "text": "Time it\n$ time python3 -c \"from itertools import count; print(0 in count())\"\nTrue\n\nreal    0m0.013s\nuser    0m0.014s\nsys     0m0.000s\n\nWe could argue it takes .013 seconds to check\nOr .013 seconds to find itertools on a SDD"
  },
  {
    "objectID": "70_numbers.rjs.html#bigger-numbers",
    "href": "70_numbers.rjs.html#bigger-numbers",
    "title": "Numbers",
    "section": "Bigger Numbers",
    "text": "Bigger Numbers\n\nCheck e.g. 1000\n\n$ time python3 -c \"from itertools import count; print(1000 in count())\"\nTrue\n\nreal    0m0.012s\nuser    0m0.012s\nsys     0m0.000s\n\nTrivial."
  },
  {
    "objectID": "70_numbers.rjs.html#test-it",
    "href": "70_numbers.rjs.html#test-it",
    "title": "Numbers",
    "section": "Test it",
    "text": "Test it\n\nTry a few powers yourself. What do you find?\n\ntime python3 -c \"from itertools import count; n=1; print(10**n in count())\""
  },
  {
    "objectID": "70_numbers.rjs.html#section",
    "href": "70_numbers.rjs.html#section",
    "title": "Numbers",
    "section": "",
    "text": "10^\\(n\\)\nreal\n\n\n\n\n1\n00.012\n\n\n2\n00.012\n\n\n3\n00.012\n\n\n4\n00.013\n\n\n5\n00.013\n\n\n6\n00.027\n\n\n7\n00.164\n\n\n8\n01.498\n\n\n9\n16.810\n\n\n\n\n\nExpect: \\[\nt(10^{10}) \\in [140,170]\n\\]\nExpect for \\(n \\gt 9\\) \\[\nt(10^n) \\in [14,17] \\times 10^{n-9}\n\\]\nExpect \\(10^{10^{100}}\\) in\n\n\\(10^{10^{91}}\\) seconds\n316 novemvigintilion years"
  },
  {
    "objectID": "70_numbers.rjs.html#rust",
    "href": "70_numbers.rjs.html#rust",
    "title": "Numbers",
    "section": "Rust",
    "text": "Rust\n\nRust is a little more forthright about how big its numbers get.\n\npub const MAX: i32 = i32::MAX; // 2_147_483_647i32\n\nRead more, or don’t. I’m a hyperlink; not an imperative."
  },
  {
    "objectID": "70_numbers.rjs.html#quoth-rust-book",
    "href": "70_numbers.rjs.html#quoth-rust-book",
    "title": "Numbers",
    "section": "Quoth Rust Book",
    "text": "Quoth Rust Book\n\nLet’s say you have a variable of type u8 that can hold values between 0 and 255. If you try to change the variable to a value outside that range, such as 256, integer overflow will occur, which can result in one of two behaviors. When you’re compiling in debug mode, Rust includes checks for integer overflow that cause your program to panic at runtime if this behavior occurs. Rust uses the term panicking when a program exits with an error…"
  },
  {
    "objectID": "70_numbers.rjs.html#quoth-rust-book-1",
    "href": "70_numbers.rjs.html#quoth-rust-book-1",
    "title": "Numbers",
    "section": "Quoth Rust Book",
    "text": "Quoth Rust Book\n\nWhen you’re compiling in release mode with the –release flag, Rust does not include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs two’s complement wrapping. In short, values greater than the maximum value the type can hold “wrap around” to the minimum of the values the type can hold. In the case of a u8, the value 256 becomes 0, the value 257 becomes 1, and so on. The program won’t panic, but the variable will have a value that probably isn’t what you were expecting it to have. Relying on integer overflow’s wrapping behavior is considered an error."
  },
  {
    "objectID": "70_numbers.rjs.html#quoth-rust-book-2",
    "href": "70_numbers.rjs.html#quoth-rust-book-2",
    "title": "Numbers",
    "section": "Quoth Rust Book",
    "text": "Quoth Rust Book\n\nThe program won’t panic, but the variable will have a value that probably isn’t what you were expecting it to have. Relying on integer overflow’s wrapping behavior is considered an error.\n\n\nTo explicitly handle the possibility of overflow, you can use these families of methods provided by the standard library for primitive numeric types:"
  },
  {
    "objectID": "70_numbers.rjs.html#methods-in-rust",
    "href": "70_numbers.rjs.html#methods-in-rust",
    "title": "Numbers",
    "section": "Methods in Rust",
    "text": "Methods in Rust\n\nWrap in all modes with the wrapping_* methods, such as wrapping_add.\nReturn the None value if there is overflow with the checked_* methods.\nReturn the value and a Boolean indicating whether there was overflow with the overflowing_* methods.\nSaturate at the value’s minimum or maximum values with the saturating_* methods."
  },
  {
    "objectID": "70_numbers.rjs.html#editorializing",
    "href": "70_numbers.rjs.html#editorializing",
    "title": "Numbers",
    "section": "Editorializing",
    "text": "Editorializing\n\nI find having different numerical behavior in debug and release versions extremely questionable.\nI was willing to bite my tongue but in fact:\n\nThis is impacts SHA-2, upcoming ECDSA, f16 and ix\nUsing stable numerical behavior facilitated debatably easier implementations in C last term."
  },
  {
    "objectID": "70_numbers.rjs.html#demo-in-rust",
    "href": "70_numbers.rjs.html#demo-in-rust",
    "title": "Numbers",
    "section": "Demo in Rust",
    "text": "Demo in Rust\n\nWe don’t have to just trust in the given i32 upper bound, we can test it.\nWell, kinda…\n\n\n\nsrc/main.rs\n\nfn main() {\n    let mut n: i32 = 0;\n    while (n + 1) &gt; n {\n        n += 1;\n    }\n    dbg!(n);\n    dbg!(i32::MAX);\n}"
  },
  {
    "objectID": "70_numbers.rjs.html#testing",
    "href": "70_numbers.rjs.html#testing",
    "title": "Numbers",
    "section": "Testing…",
    "text": "Testing…\n\nLet’s time how long this takes!\n\nWe timed Python.\n\nGo ahead and time cargo run\n\n   Compiling num v0.1.0 (/home/user/tmp/num)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.25s\n     Running `target/debug/num`\n\nthread 'main' panicked at src/main.rs:3:11:\nattempt to add with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nreal    0m4.943s\nuser    0m4.914s\nsys     0m0.079s"
  },
  {
    "objectID": "70_numbers.rjs.html#discuss",
    "href": "70_numbers.rjs.html#discuss",
    "title": "Numbers",
    "section": "Discuss",
    "text": "Discuss\n\nFor me, this took 4.66s on i32\n\nSame value in Python was 1m9.32s\n\nThis is about half the speed I got with C.\n\n\nHow long for u64?\n\nIn Python?\n\nHow would speed up the code?\n\nWhat assumptions did you make?\n\nHow many base 10 digits does the largest number we can store in 32 bytes have?"
  },
  {
    "objectID": "70_numbers.rjs.html#testing-1",
    "href": "70_numbers.rjs.html#testing-1",
    "title": "Numbers",
    "section": "Testing…",
    "text": "Testing…\n\nRust behaves differently with the --release flag.\n\nJust me: I hate this!\n\ntime cargo run --release\n\n   Compiling num v0.1.0 (/home/user/tmp/num)\n    Finished `release` profile [optimized] target(s) in 0.54s\n     Running `target/release/num`\n[src/main.rs:6:5] n = 2147483647\n[src/main.rs:7:5] i32::MAX = 2147483647\n\nreal    0m0.578s\nuser    0m0.086s\nsys     0m0.116s"
  },
  {
    "objectID": "70_numbers.rjs.html#rings",
    "href": "70_numbers.rjs.html#rings",
    "title": "Numbers",
    "section": "Rings",
    "text": "Rings\n\nAs far as I know (not a mathematician) the u\\(n\\)s and i\\(n\\)’s in Rust are rings\n\nThey have addition and multiplication\n\nThey aren’t fields - zero is divisible\n\nSpoiler alert, but \\(2^{\\frac{n}{2}} \\times 2^{\\frac{n}{2}} \\equiv 0 \\pmod{2^n}\\)"
  },
  {
    "objectID": "70_numbers.rjs.html#rings-vs-integers",
    "href": "70_numbers.rjs.html#rings-vs-integers",
    "title": "Numbers",
    "section": "Rings vs Integers",
    "text": "Rings vs Integers\n\nRings have some “goofy” features\n\n\\(a, b \\in\\) u\\(n\\) \\(\\nRightarrow a + b &gt; a\\)\nSame with multiplication.\n\nLet’s look at an example."
  },
  {
    "objectID": "70_numbers.rjs.html#checkers",
    "href": "70_numbers.rjs.html#checkers",
    "title": "Numbers",
    "section": "Checkers",
    "text": "Checkers\n\n\nsrc/main.rs\n\nfn main() {\n    let args: Vec&lt;String&gt; = std::env::args().collect();\n    let a:u8 = args[1].parse().unwrap();\n    let b:u8 = args[2].parse().unwrap();\n    dbg!(a + b);\n}"
  },
  {
    "objectID": "70_numbers.rjs.html#do-some-additions",
    "href": "70_numbers.rjs.html#do-some-additions",
    "title": "Numbers",
    "section": "Do some additions",
    "text": "Do some additions\n$ cargo run -- 10 20\n   Compiling num v0.1.0 (/home/user/tmp/num)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.23s\n     Running `target/debug/num 10 20`\n[src/main.rs:5:5] a + b = 30\n\n30 - that makes sense!"
  },
  {
    "objectID": "70_numbers.rjs.html#do-some-additions-1",
    "href": "70_numbers.rjs.html#do-some-additions-1",
    "title": "Numbers",
    "section": "Do some additions",
    "text": "Do some additions\n$ cargo run -- 100 200\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/num 100 200`\n\nthread 'main' panicked at src/main.rs:5:10:\nattempt to add with overflow\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nOverflow - sure, \\(100 + 200 = 300 &gt; 2^8 = 256\\)"
  },
  {
    "objectID": "70_numbers.rjs.html#do-some-additions-2",
    "href": "70_numbers.rjs.html#do-some-additions-2",
    "title": "Numbers",
    "section": "Do some additions",
    "text": "Do some additions\n$ cargo run --release -- 100 200\n   Compiling num v0.1.0 (/home/user/tmp/num)\n    Finished `release` profile [optimized] target(s) in 0.25s\n     Running `target/release/num 100 200`\n[src/main.rs:5:5] a + b = 44\n\n44? From Whence?\n\n\\[\n100 + 200 \\equiv 44 \\pmod{2^8}\n\\] - Or perhaps\npython3 -c \"print((100 + 200) % (2 ** 8) == 44)\""
  },
  {
    "objectID": "70_numbers.rjs.html#rust-integers-are-finite",
    "href": "70_numbers.rjs.html#rust-integers-are-finite",
    "title": "Numbers",
    "section": "Rust integers are finite",
    "text": "Rust integers are finite\n&gt;&gt;&gt; 200 + 100\n300\n&gt;&gt;&gt; 2 ** 8\n256\n&gt;&gt;&gt; 300 - 256\n44\n&gt;&gt;&gt; 300 % 256\n44\n\nEquivalent to operations on the naturals modulo \\(2^8\\)\nUsually denoted as: \\[\n\\mathbb{Z}/2^8\\mathbb{Z}\n\\]\nWe say \\(\\mathbb{Z}\\) not \\(\\mathbb{N}\\) as \\(-1 \\in \\mathbb{Z}/n\\mathbb{Z}\\)"
  },
  {
    "objectID": "70_numbers.rjs.html#in-practice",
    "href": "70_numbers.rjs.html#in-practice",
    "title": "Numbers",
    "section": "In practice",
    "text": "In practice\n\n\\(\\exists\\) i32::MAX, u64::MAX, etc.\nSums and products less than these values are unaffected.\nSums and products greater than these values are unstable.\nUse methods or compile for release."
  },
  {
    "objectID": "70_numbers.rjs.html#problem-statement",
    "href": "70_numbers.rjs.html#problem-statement",
    "title": "Numbers",
    "section": "Problem Statement",
    "text": "Problem Statement\n\nQuoth GitHub\n\n\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n\n\nWait a minute.\nWhat does that 4096 stand for?\n\nFor what does that 4096 stand?"
  },
  {
    "objectID": "70_numbers.rjs.html#n-128-bits",
    "href": "70_numbers.rjs.html#n-128-bits",
    "title": "Numbers",
    "section": "\\(n > 128\\) bits",
    "text": "\\(n &gt; 128\\) bits\n\nModern security recommendations are for 4096 bit cryptographic keys.\n\n2048 is generally considered “okay” or “acceptable”\n\n\nNAME\n     ssh-keygen — OpenSSH authentication key utility\n\nSYNOPSIS\n     ssh-keygen [-q] [-a rounds] [-b bits]"
  },
  {
    "objectID": "70_numbers.rjs.html#big-values",
    "href": "70_numbers.rjs.html#big-values",
    "title": "Numbers",
    "section": "Big Values",
    "text": "Big Values\n\nSoon, we will implement key generation.\n\nWe’ll talk about what it is then.\n\nFirst, we need a way to deal with integers that big.\nWe will use modular arithmetic.\n\nFinite u64 models infinite \\(\\mathbb{Z}\\)"
  },
  {
    "objectID": "70_numbers.rjs.html#simple-example",
    "href": "70_numbers.rjs.html#simple-example",
    "title": "Numbers",
    "section": "Simple Example",
    "text": "Simple Example\n\nYoink a data science example.\nWe had a data set for which we determined a mean height in inches.\nWe converted it to inches and feet.\n\n&gt;&gt;&gt; 69.3 // 12, 69.3 % 12\n(5.0, 9.299999999999997)\n\nFloats: they’re bad."
  },
  {
    "objectID": "70_numbers.rjs.html#addition-is-easy",
    "href": "70_numbers.rjs.html#addition-is-easy",
    "title": "Numbers",
    "section": "Addition is easy",
    "text": "Addition is easy\n\nWNBA MVP and Olympic Gold Medalist A’ja Wilson is 6 ft 4 in\nHow much taller is that than 5 ft 9.3 in\n\nCan convert to non-integer inches, but…\nWe already had the .299… problem"
  },
  {
    "objectID": "70_numbers.rjs.html#difference",
    "href": "70_numbers.rjs.html#difference",
    "title": "Numbers",
    "section": "Difference",
    "text": "Difference\n\nWe perform “long subtraction”\nIt’s fun!\n\n\n\n\n\nft\nin.\n.in\n\n\n\n\nA’ja\n6\n4\n0\n\n\nMean\n5\n9\n3"
  },
  {
    "objectID": "70_numbers.rjs.html#difference-1",
    "href": "70_numbers.rjs.html#difference-1",
    "title": "Numbers",
    "section": "Difference",
    "text": "Difference\n\n\\(0 - 3 \\equiv 7 \\pmod{10}\\)\nTenths of inches\n\n\n\n\n\nft\nin.\n.in\n\n\n\n\nA’ja\n6\n4\n0\n\n\nMean\n5\n9\n3\n\n\nDiff\n\n\n7"
  },
  {
    "objectID": "70_numbers.rjs.html#difference-2",
    "href": "70_numbers.rjs.html#difference-2",
    "title": "Numbers",
    "section": "Difference",
    "text": "Difference\n\nBut wait - 3 is more than 0\nTrack via a “carry”\n\n\n\n\n\nft\nin.\n.in\n\n\n\n\nA’ja\n6\n4\n0\n\n\nMean\n5\n9\n3\n\n\nCarry\n0\n1\n0\n\n\nDiff\n\n\n7"
  },
  {
    "objectID": "70_numbers.rjs.html#difference-3",
    "href": "70_numbers.rjs.html#difference-3",
    "title": "Numbers",
    "section": "Difference",
    "text": "Difference\n\n\\(4 - 9 - 1 \\equiv 6 \\pmod{12}\\)\n12 in = 1 ft\n\n\n\n\n\nft\nin.\n.in\n\n\n\n\nA’ja\n6\n4\n0\n\n\nMean\n5\n9\n3\n\n\nCarry\n0\n1\n0\n\n\nDiff\n\n6\n7"
  },
  {
    "objectID": "70_numbers.rjs.html#difference-4",
    "href": "70_numbers.rjs.html#difference-4",
    "title": "Numbers",
    "section": "Difference",
    "text": "Difference\n\nAnother carry.\n12 in = 1 ft\n\n\n\n\n\nft\nin.\n.in\n\n\n\n\nA’ja\n6\n4\n0\n\n\nMean\n5\n9\n3\n\n\nCarry\n1\n0\n0\n\n\nDiff\n\n6\n7"
  },
  {
    "objectID": "70_numbers.rjs.html#difference-5",
    "href": "70_numbers.rjs.html#difference-5",
    "title": "Numbers",
    "section": "Difference",
    "text": "Difference\n\n\\(6 - 5 - 1 = 0\\)\nNonmodular - feet has no max.\n\n\n\n\n\nft\nin.\n.in\n\n\n\n\nA’ja\n6\n4\n0\n\n\nMean\n5\n9\n3\n\n\nCarry\n1\n0\n0\n\n\nDiff\n0\n6\n7"
  },
  {
    "objectID": "70_numbers.rjs.html#conclusion",
    "href": "70_numbers.rjs.html#conclusion",
    "title": "Numbers",
    "section": "Conclusion",
    "text": "Conclusion\n\nIconic living legend A’ja Wilson is tall af.\nWe can do addition and substraction on larger values than u64::MAX by:\n\nBreaking numbers in smaller ranges\n\nA tenths digit\nA ones digit\nA twelves digit"
  },
  {
    "objectID": "70_numbers.rjs.html#usefulness",
    "href": "70_numbers.rjs.html#usefulness",
    "title": "Numbers",
    "section": "Usefulness",
    "text": "Usefulness\n\nWe can now do arithmetic correctly\n\n@Python\n\nWhat else can we do?\n\nArbitrary (not infinite) precision."
  },
  {
    "objectID": "70_numbers.rjs.html#faq",
    "href": "70_numbers.rjs.html#faq",
    "title": "Numbers",
    "section": "FAQ",
    "text": "FAQ\n\nCan we use this to add numbers bigger than \\(2^n\\) using adds over at most \\(n\\) bits at a time?\n\nSure! Change the modulos and you’re set.\n\nGet it? Because the numbers form a set?\n\n\nCan we do this for more than 3 units?\n\nSure! Just put the middle (both consumes and produces a carry bit) in a loop!"
  },
  {
    "objectID": "70_numbers.rjs.html#easy-mode",
    "href": "70_numbers.rjs.html#easy-mode",
    "title": "Numbers",
    "section": "Easy Mode",
    "text": "Easy Mode\n\nAddition and subtraction are easy.\nFor some value of easy.\n\nCut a too-big number into chunks.\nAdd or subtract within chunks of the same index/offset/significance.\nOnly wrinkle is a carry bit.\n\nIdentical to digit-based addition.\n\nu8s as digits in base 256 arithmetic"
  },
  {
    "objectID": "70_numbers.rjs.html#hard-mode",
    "href": "70_numbers.rjs.html#hard-mode",
    "title": "Numbers",
    "section": "Hard Mode",
    "text": "Hard Mode\n\nSome cryptographical algorithms, however, use two extremely advanced arithmetic operations:\n\nMultiplication, and\nDivision, and\nModulo\n\nFortunately this only two operations (need a combined divmod)"
  },
  {
    "objectID": "70_numbers.rjs.html#example",
    "href": "70_numbers.rjs.html#example",
    "title": "Numbers",
    "section": "Example",
    "text": "Example\n\nLast term I taught:\n\n14 MS-level Computer Scientists\n\n9-12 hrs/wk\n14 week contract\n\n34 BS-level Computer Scientists\n\n6-9 hrs/wk\n15.5 week contract\n\n\nHow many person hours is this?"
  },
  {
    "objectID": "70_numbers.rjs.html#napkin-math",
    "href": "70_numbers.rjs.html#napkin-math",
    "title": "Numbers",
    "section": "Napkin Math",
    "text": "Napkin Math\n\nI’d say\n\n\\(14 \\times 12 \\times 14\\)\n\\(34 \\times 9 \\times 15.5\\)\n\nI… can’t quite do that in one fell swoop.\n\n\\(14 \\times 12\\) is trivially \\(12^2 + 24 = 168\\)\n\\(9 \\times 15.5\\) is trivially \\(155 - 15.5 = 139.5\\)"
  },
  {
    "objectID": "70_numbers.rjs.html#times-139.5",
    "href": "70_numbers.rjs.html#times-139.5",
    "title": "Numbers",
    "section": "\\(34 \\times 139.5\\)",
    "text": "\\(34 \\times 139.5\\)\n\nThat just isn’t easy\n(140 * 34 isn’t bad, but we need a motivating example).\nExpress digit-wise:\n\n\n\n\n\n1\n3\n9\n5\n\n\n\n\n3\n-\n-\n-\n-\n\n\n4\n-\n-\n-\n-"
  },
  {
    "objectID": "70_numbers.rjs.html#times-139.5-1",
    "href": "70_numbers.rjs.html#times-139.5-1",
    "title": "Numbers",
    "section": "\\(34 \\times 139.5\\)",
    "text": "\\(34 \\times 139.5\\)\n\nCompute all products over single-digit factors\n\n\n\n\n\n1\n3\n9\n5\n\n\n\n\n3\n3\n9\n27\n15\n\n\n4\n4\n12\n36\n20\n\n\n\n\nThese:\n\nAren’t single digit\nAren’t of the same signficance"
  },
  {
    "objectID": "70_numbers.rjs.html#times-139.5-2",
    "href": "70_numbers.rjs.html#times-139.5-2",
    "title": "Numbers",
    "section": "\\(34 \\times 139.5\\)",
    "text": "\\(34 \\times 139.5\\)\n\nInclude sigificance\n\n\n\n\n\n100\n30\n9\n.5\n\n\n\n\n30\n3000\n900\n270\n15\n\n\n4\n400\n120\n36\n2"
  },
  {
    "objectID": "70_numbers.rjs.html#dear-watson",
    "href": "70_numbers.rjs.html#dear-watson",
    "title": "Numbers",
    "section": "Dear Watson",
    "text": "Dear Watson\n\n\n\n\n\n\n100\n30\n9\n.5\n\n\n\n\n30\n3000\n900\n270\n15\n\n\n4\n400\n120\n36\n2\n\n\n\n\n\\[\n\\begin{align*}\n5& \\times 4  \\times 10^{-1}  &= 2&\\\\\n+5& \\times 3  \\times 10^{0}  &= 15&\\\\\n+9& \\times 4  \\times 10^{0}  &= 36&\\\\\n+9& \\times 3  \\times 10^{1}  &= 270&\\\\\n+3& \\times 4  \\times 10^{1}  &= 120&\\\\\n+3& \\times 3  \\times 10^{2}  &= 900&\\\\\n+1& \\times 4  \\times 10^{2}  &= 400&\\\\\n+1& \\times 3  \\times 10^{3}  &= 3000&\\\\\n\\end{align*}\n\\]"
  },
  {
    "objectID": "70_numbers.rjs.html#express-as",
    "href": "70_numbers.rjs.html#express-as",
    "title": "Numbers",
    "section": "Express as",
    "text": "Express as\n\\[\n\\begin{align*}\n139.5& = &1 * 10^2 + &3 * 10^1 + &9 * 10^0& + 5 * 10^{-1}\\\\\n34& = &&3 * 10^1 + &4 * 10^0&\\\\\n\\end{align*}\n\\]\n\nTake \\(x = 10\\) \\[\n\\begin{align*}\n139.5& = &1 * x^2 + &3 * x + &9& + 5 * x^{-1}\\\\\n34& = &&3 * x + &4&\\\\\n\\end{align*}\n\\]\nThat is polynomial; can work with those."
  },
  {
    "objectID": "70_numbers.rjs.html#polynomial",
    "href": "70_numbers.rjs.html#polynomial",
    "title": "Numbers",
    "section": "Polynomial",
    "text": "Polynomial\n\\[\n(x^2 + 3x + 9 + 5x^{-1})(3x + 4)\n\\]\n\\[\n(x^2 + 3x + 9 + 5x^{-1})(3x) + (x^2 + 3x + 9 + 5x^{-1})(4)\n\\]\n\\[\n(3x^3 + 9x^2 + 27x + 15) + (4x^2 + 12x + 36 + 20x^{-1})\n\\]\n\\[\n3x^3 + 13x^2 + 39x + 51 + 20x^{-1}\n\\]"
  },
  {
    "objectID": "70_numbers.rjs.html#aside-1",
    "href": "70_numbers.rjs.html#aside-1",
    "title": "Numbers",
    "section": "Aside",
    "text": "Aside\n\nI think this is covered around ~8th grade\nI don’t want to assume the integrity to US public school system\n\nOr anything school system\nShout out school\n\nThe point of this class isn’t middle/high school math\n\nThat’s the point of life itself /s"
  },
  {
    "objectID": "70_numbers.rjs.html#considerations",
    "href": "70_numbers.rjs.html#considerations",
    "title": "Numbers",
    "section": "Considerations",
    "text": "Considerations\n\nIt is natural to express multiplication of e.g. 4096 bit integers as a polynomial over, say, 64 bit integers.\nOne teeny problem:\n\nOverflow."
  },
  {
    "objectID": "70_numbers.rjs.html#overflow",
    "href": "70_numbers.rjs.html#overflow",
    "title": "Numbers",
    "section": "Overflow",
    "text": "Overflow\n\nThe point of calculating this was to get things down to single digit:\n\n\\[\n3x^3 + 13x^2 + 39x + 51x^0 + 20x^{-1}\n\\]\n\n13, 39, 51, and 20 are all not compliant (debatably 20 is okay)\nEssentially, 1-digit multiply may produce a 2-digit product."
  },
  {
    "objectID": "70_numbers.rjs.html#size-of-ints",
    "href": "70_numbers.rjs.html#size-of-ints",
    "title": "Numbers",
    "section": "Size of ints",
    "text": "Size of ints\n\nSay we have two integers of 8 bits of precision.\nWe multiple them together.\nWhat is the largest number we can get, and\nHow many bits does it require?\n\npython3 -c \"x = 2 ** 8 - 1 ; x = x * x ; print(x.bit_length())\"\n\n16"
  },
  {
    "objectID": "70_numbers.rjs.html#division",
    "href": "70_numbers.rjs.html#division",
    "title": "Numbers",
    "section": "Division",
    "text": "Division\n\nRemember long division?\n\nAlign the highest digits (I took the log base 2)\nDivide.\nKeep track of significance (Difference between logs)\nCalculate remainder.\nLoop.\n\nThe final remainder is the mod."
  },
  {
    "objectID": "70_numbers.rjs.html#today-3",
    "href": "70_numbers.rjs.html#today-3",
    "title": "Numbers",
    "section": "Today",
    "text": "Today\n\n✓ Finite sets, rings\n✓ Arbitrary/high precision integers\n✓ Arithmetic operations\nFunction types"
  },
  {
    "objectID": "70_numbers.rjs.html#an-arbitrary-precision-type.",
    "href": "70_numbers.rjs.html#an-arbitrary-precision-type.",
    "title": "Numbers",
    "section": "An arbitrary precision type.",
    "text": "An arbitrary precision type.\n\nJust as with f16, we can create something to hold numbers.\n\nI used a boolean for signs and a vector for digits.\n\nHere’s an example function declaration:\n\n\n\nsrc/lib.rs\n\n// At the top\n#![allow(non_camel_case_types)]\npub struct ix {\n\n// Latter\npub fn add_ix(a: &ix, b: &ix) -&gt; ix {"
  },
  {
    "objectID": "70_numbers.rjs.html#borrowing",
    "href": "70_numbers.rjs.html#borrowing",
    "title": "Numbers",
    "section": "Borrowing",
    "text": "Borrowing\n\nWhy borrow?\n\nThese are data structures, not numerical literals.\n\nMuch closer to vectorized operations than to integer addition.\n\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; hours = np.array([100, 30, 9, .5])\n&gt;&gt;&gt; hours * 34\narray([3400., 1020.,  306.,   17.])\n&gt;&gt;&gt; &gt;&gt;&gt; np.sum(hours * 34)\nnp.float64(4743.0)"
  },
  {
    "objectID": "70_numbers.rjs.html#faq-1",
    "href": "70_numbers.rjs.html#faq-1",
    "title": "Numbers",
    "section": "FAQ",
    "text": "FAQ\n\nIsn’t there a way to use just + and -.\n\nYes.\nI didn’t find it interesting, you are welcome to do so.\nProvide wrappers of the needed type ((&ix, &ix) -&gt; ix) to use the autotester."
  },
  {
    "objectID": "50_754.html",
    "href": "50_754.html",
    "title": "IEEE 754",
    "section": "",
    "text": "Welcome to Systems in Rust\nAction Items:\n\n“SHA-512” is due on next Friday\nLecture on numbers, inspired by the lab, while we wait.",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#announcements",
    "href": "50_754.html#announcements",
    "title": "IEEE 754",
    "section": "",
    "text": "Welcome to Systems in Rust\nAction Items:\n\n“SHA-512” is due on next Friday\nLecture on numbers, inspired by the lab, while we wait.",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#today",
    "href": "50_754.html#today",
    "title": "IEEE 754",
    "section": "Today",
    "text": "Today\n\nUnderstand precision through the lens of floats.\n\nUnderstand the basics of floats\nUnderstand the language of floats\nGet a feel for when further investigation is required",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#citation",
    "href": "50_754.html#citation",
    "title": "IEEE 754",
    "section": "Citation",
    "text": "Citation\n\nYoinked\nurl\nAuthor John Farrier, Booz Allen Hamilton",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#mission-statement",
    "href": "50_754.html#mission-statement",
    "title": "IEEE 754",
    "section": "Mission Statement",
    "text": "Mission Statement\n\nI’m a normal person.\n\nI think 5/2 is 2.5 or perhaps 2½.\n\nI’m a scientist.\n\nI’m solving “Black-Scholes”\nDoes anyone know what this is doing? \\[\nd_2 = d_1 - \\sigma\\sqrt{T - t} = \\frac{1}{\\sigma\\sqrt{T - t}}\\left[\\ln\\left(\\frac{S_t}{K}\\right) + \\left(r - q - \\frac{1}{2}\\sigma^2\\right)(T - t)\\right]\n\\]",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#common-fallacies",
    "href": "50_754.html#common-fallacies",
    "title": "IEEE 754",
    "section": "Common Fallacies",
    "text": "Common Fallacies\n\n“Floating point numbers are numbers”\n\nmax(count()) Pinocchios\n\n“It’s floating point error”\n\n“All floating point involves magical rounding errors”\n\n“Linux and Windows handle floats differently”\n“Floating point represents an interval value near the actual value”",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#common-fallacies-2.0",
    "href": "50_754.html#common-fallacies-2.0",
    "title": "IEEE 754",
    "section": "Common Fallacies 2.0",
    "text": "Common Fallacies 2.0\n\n“A double (an f64) holds 15 decimal places and I only need 3, so I have nothing to worry about”1\n“My programming language does better math than your programming language”2\n“Why can’t computers just store whatever number I use”3",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#anatomy-of-ieee-floats",
    "href": "50_754.html#anatomy-of-ieee-floats",
    "title": "IEEE 754",
    "section": "Anatomy of IEEE Floats",
    "text": "Anatomy of IEEE Floats",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#ieee-float-specification",
    "href": "50_754.html#ieee-float-specification",
    "title": "IEEE 754",
    "section": "IEEE Float Specification",
    "text": "IEEE Float Specification\n\nIEEE 754-1985, IEEE 854-1987, IEEE 754-2008\n\nThese are paywalled.\nThose are years.\n\nProvide for portable, provably consistent math\n\nConsistent, not correct.",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#assurances",
    "href": "50_754.html#assurances",
    "title": "IEEE 754",
    "section": "Assurances",
    "text": "Assurances\n\nEnsure some significant mathematical identities hold true:\n\n\\(x + y  = y + x\\)\n\nSymmetry of addition\n\n\\(x + 0 = x\\)\n\nAdditive identity\n\n\\(x = y \\implies x - y = 0\\)\n\nIdentity under subtraction",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#assurances-2.0",
    "href": "50_754.html#assurances-2.0",
    "title": "IEEE 754",
    "section": "Assurances 2.0",
    "text": "Assurances 2.0\n\\[\n\\frac{x}{\\sqrt{x^2+y^2}} \\leq 1\n\\]\n\nWhat is missing?",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#ieee-float-specification-1",
    "href": "50_754.html#ieee-float-specification-1",
    "title": "IEEE 754",
    "section": "IEEE Float Specification",
    "text": "IEEE Float Specification\n\nEnsure every floating point number is unique\nEnsure every floating point number has an opposite\n\nZero is a special case because of this\n\nSpecifies algorithms for addition, subtraction, multiplication, division, and square-root\n\nNot really operations/relations! They are algorithms.",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#aside-scientific-notation",
    "href": "50_754.html#aside-scientific-notation",
    "title": "IEEE 754",
    "section": "Aside: Scientific Notation",
    "text": "Aside: Scientific Notation\n\nScientific notation is a way of expressing numbers that are too large or too small to be conveniently written in decimal form, since to do so would require writing out an inconveniently long string of digits.\n\n\nIn scientific notation, nonzero numbers are written in the form\n\n\\[a \\times 10^b\\]",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#aside-explanation",
    "href": "50_754.html#aside-explanation",
    "title": "IEEE 754",
    "section": "Aside: Explanation",
    "text": "Aside: Explanation\n\nIn scientific notation, nonzero numbers are written in the form\n\n\\[a \\times 10^b\\]\n\n\\(a\\) (the coefficient or mantissa) is a number greater than or equal to 1 and less than 10 (\\(1 \\le |a| &lt; 10\\)).\n\\(10\\) is the base.\n\\(b\\) (the exponent) is an integer.",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#aside-physical-examples",
    "href": "50_754.html#aside-physical-examples",
    "title": "IEEE 754",
    "section": "Aside: Physical Examples",
    "text": "Aside: Physical Examples\n\nSpeed of light: The speed of light in a vacuum is approximately \\(300,000,000 \\text{ m/s}\\) \\[\n3 \\times 10^8 \\text{ m/s}\n\\]\nMass of an electron: The mass of an electron is approximately \\(0.00000000000000000000000000091093837 \\text{ g}\\). \\[\n9.1093837 \\times 10^{-28} \\text{ g}\n\\]",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#aside-economic-examples",
    "href": "50_754.html#aside-economic-examples",
    "title": "IEEE 754",
    "section": "Aside: Economic Examples",
    "text": "Aside: Economic Examples\n\nWe can use social science numbers.\nLabor Market Outcomes of College Graduates by Major\nComputer Science majors in 2023 have a $80,000 median wage “early career”\n\n\\(8.0000 \\times 10^4\\)\n\nAnd 6.1% unemployment\n\n\\(6.1 \\times 10^{-2}\\)",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#ieee-layout",
    "href": "50_754.html#ieee-layout",
    "title": "IEEE 754",
    "section": "IEEE Layout",
    "text": "IEEE Layout\n\nAn approximation using scientific notation\n\n\\(x = -1^s \\times 2^e \\times 1.m\\)\n\\(x = -1^{\\text{sign bit}} \\times \\text{base} 2^{\\text{exponent}} \\times 1.\\text{mantissa}\\)\n\nWhere the mantissa is the technical term for the the digits after the decimal point.",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#with-binary",
    "href": "50_754.html#with-binary",
    "title": "IEEE 754",
    "section": "With Binary",
    "text": "With Binary\n\n\\(x = -0b1^{\\text{0b0}} \\times 0b10^{\\text{0b10000000}}  \\times 0b1.10010010000111111011011\\)\nExpress in memory as the concatenation:\n\n0b0 to 0b10000000 to 0b10010010000111111011011\n01000000010010010000111111011011",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#singles-and-doubles",
    "href": "50_754.html#singles-and-doubles",
    "title": "IEEE 754",
    "section": "Singles and Doubles",
    "text": "Singles and Doubles\n\n32 - bits = 1 sign bit + 8 exponent bits + 23 mantissa bits\n\n0b0 to 0b10000000 to 0b10010010000111111011011\n\n64 - bits = 1 sign bit + 12 exponent bits + 52 mantissa bits",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#understanding-check",
    "href": "50_754.html#understanding-check",
    "title": "IEEE 754",
    "section": "Understanding check",
    "text": "Understanding check\n\nWhat is the probability a real number \\(a \\in \\mathbb{R}\\) has an exact float representation?\nWhat is the probability an integer \\(n \\in \\mathbb{Z}\\) has an exact float representation?\nWhat is the probability a course number \\(n &lt; 600\\) has an exact float representation?",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#special-floats---nan",
    "href": "50_754.html#special-floats---nan",
    "title": "IEEE 754",
    "section": "Special Floats - NaN",
    "text": "Special Floats - NaN\n\nDivide by Zero\n\n1 / 0\n\nNot a Number (NaN)\n\n&gt;&gt;&gt; from numpy import float32 as f32\n&gt;&gt;&gt; f32(1)/f32(0)\n&lt;stdin&gt;:1: RuntimeWarning: divide by zero encountered in scalar divide\nnp.float32(inf)\n&gt;&gt;&gt; 1/0\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nZeroDivisionError: division by zero",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#special-floats---inf",
    "href": "50_754.html#special-floats---inf",
    "title": "IEEE 754",
    "section": "Special Floats - inf",
    "text": "Special Floats - inf\n\nSigned Infinity\n\nOverflow protection\n\n&gt;&gt;&gt; f32(10) ** f32(100)\n&lt;stdin&gt;:1: RuntimeWarning: overflow encountered in scalar power\nnp.float32(inf)\n&gt;&gt;&gt; 10.0 ** 10000\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nOverflowError: (34, 'Numerical result out of range')",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#infinity-is-signed",
    "href": "50_754.html#infinity-is-signed",
    "title": "IEEE 754",
    "section": "Infinity is signed",
    "text": "Infinity is signed\n\nWe can get negative infinity through a variety of means.\n\n&gt;&gt;&gt; -(f32(10) ** f32(100))\nnp.float32(-inf)\n\nWe note that this suppresses the overflow error use ()\nIn some languages this is not ever regarded as an overflow error, like Julia (where we have to use larger powers due to the f64 default)\n\njulia&gt; 10.0^10000\nInf\n\njulia&gt; -(10.0^10000)\n-Inf",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#signed-zero",
    "href": "50_754.html#signed-zero",
    "title": "IEEE 754",
    "section": "Signed Zero",
    "text": "Signed Zero\n\nSigned Zero\n\nUnderflow protection, preserves sign\n\n0 =− 0\n\n\n&gt;&gt;&gt; -1 / 10 ** 1000\n-0.0\n&gt;&gt;&gt; 0.0 == (-1 / 10 ** 1000)\nTrue\n&gt;&gt;&gt; -0.0\n-0.0\n&gt;&gt;&gt; 0.0 - 0.0\n0.0\nWorks in base Python (e.g. don’t need NumPy).\nCouldn’t get it to work in Julia actually (went to -inf or NaN)",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#simple-example",
    "href": "50_754.html#simple-example",
    "title": "IEEE 754",
    "section": "Simple Example",
    "text": "Simple Example\n\nFloating point is great because it will work exactly how you expect.\n\n&gt;&gt;&gt; 0.1 + 0.2 == 0.3\nFalse\n\nMore or less.\n\n&gt;&gt;&gt; 0.1 + 0.2\n0.30000000000000004",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#simple-example-1",
    "href": "50_754.html#simple-example-1",
    "title": "IEEE 754",
    "section": "Simple Example",
    "text": "Simple Example\n\nWe shouldn’t be suprised by this!\n\n&gt;&gt;&gt; _ = [print(f\"{f32(i/10):1.100}\") for i in range(1,4)]\n0.100000001490116119384765625\n0.20000000298023223876953125\n0.300000011920928955078125\n&gt;&gt;&gt; _ = [print(f\"{f64(i/10):1.100}\") for i in range(1,4)]\n0.1000000000000000055511151231257827021181583404541015625\n0.200000000000000011102230246251565404236316680908203125\n0.299999999999999988897769753748434595763683319091796875",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#storage-of-1.",
    "href": "50_754.html#storage-of-1.",
    "title": "IEEE 754",
    "section": "Storage of 1.",
    "text": "Storage of 1.\n\n\\(x = -1^s \\times 2^e \\times 1.m\\)\n\\(x = -1^{\\text{sign bit}} \\times \\text{base} 2^{\\text{exponent}} \\times 1.\\text{mantissa}\\)\n\\(x = -1^{\\text{sign bit}} \\times \\text{base} 2^{\\text{exponent}} \\times 1 + \\text{mantissa} \\times \\frac{1}{2^n}\\)\n\\(1 = -1^0 \\times 2^0 \\times (1 + 0 \\times \\frac{1}{2^n}\\)\nSo each of the sign bit, the base, and the mantissa are zero.\n\nI should note I was unable to reproduce this in Rust or C.\nI’m not really a floating pointer.",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#except",
    "href": "50_754.html#except",
    "title": "IEEE 754",
    "section": "Except…",
    "text": "Except…\n\nThis is actually a little bit fake.\n\n$ cat src/main.rs\nfn main() {\n    let x:f32 = 1.0;\n    println!(\"{:032b}\", x.to_bits());\n}\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/bits`\n00111111100000000000000000000000\n\nWhat is that?",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#shift-127",
    "href": "50_754.html#shift-127",
    "title": "IEEE 754",
    "section": "Shift 127",
    "text": "Shift 127\n\nWhile the exponent can be positive or negative, in binary formats it is stored as an unsigned number that has a fixed “bias” added to it.\n\n\nThe IEEE 754 binary format specifies a hardware implementation of such that the exponent, be it positive or negative, in binary formats is stored as an unsigned number that has a fixed “bias” added to it.\nIn the case of 32 bit floats, the bias is 127.",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#breakdown",
    "href": "50_754.html#breakdown",
    "title": "IEEE 754",
    "section": "Breakdown",
    "text": "Breakdown\n\nTake the following:\n\n00111111100000000000000000000000\n\nThat is:\n\nSign bit of 0\nExponent of 01111111\n\nAll zeroes and all ones are reserved for NaN, inf, etc.\n\nMantissa of 23 zeroes.",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#how-precise",
    "href": "50_754.html#how-precise",
    "title": "IEEE 754",
    "section": "How precise?",
    "text": "How precise?\n\nI have referred to f32 as having “32 bits of precision”.\nHow much precision is that?\nWell, let’s set the least significant bit of the mantissa to one.\n\n\n\nmain.rs\n\nfn main() {\n    let x:f32 = 1.0;\n    let mut b:u32 = x.to_bits();\n    b |= 1;\n    println!(\"{:032b}\", b);\n    println!(\"{:1.32}\", f32::from_bits(b));\n}",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#epsilon",
    "href": "50_754.html#epsilon",
    "title": "IEEE 754",
    "section": "“Epsilon”",
    "text": "“Epsilon”\n\nWhat do we get?\n\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/bits`\n00111111100000000000000000000001\n1.00000011920928955078125000000000\n\nWe refer to this value (less one) as machine epsilon, or perhaps \\(\\varepsilon\\).\nThe difference between 1.0 and the next available floating point number.\nMuch lower, of course, with double and quad precision.",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#easier-sig-figs",
    "href": "50_754.html#easier-sig-figs",
    "title": "IEEE 754",
    "section": "Easier: “Sig figs”",
    "text": "Easier: “Sig figs”\n\n\n\nFormat\nSign\nExp.\nMant.\nBits\nBias\nPrec.\nSignificance\n\n\n\n\nHalf\n1\n5\n10\n16\n15\n11\n3-4\n\n\nSingle\n1\n8\n23\n32\n127\n24\n6-9\n\n\nDouble\n1\n11\n52\n64\n1023\n53\n15-17\n\n\nQuad\n1\n15\n112\n128\n16383\n113\n33-36\n\n\n\n\nProf. Kahan, UCB EECS",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#sig-figs",
    "href": "50_754.html#sig-figs",
    "title": "IEEE 754",
    "section": "Sig figs",
    "text": "Sig figs\n\nIEEE 754 was intended for scientific computing\nThat is, not systems computing, software etc.\nUseful to us to think about information and how bits work.\n\n\nSignificant figures, also referred to as significant digits, are specific digits within a number that is written in positional notation that carry both reliability and necessity in conveying a particular quantity.",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#small-values",
    "href": "50_754.html#small-values",
    "title": "IEEE 754",
    "section": "Small Values",
    "text": "Small Values\n\nFor 32-bit floats, the minimum base 10 exponent is -36.\nHow is \\(1.0 \\times 10^{-37}\\) represented?\n\n// In Rust, we may use '0b' prefix for binary representation.\n// In Rust, we may us underscores within numerical values.\n0b0_00000000_11011001110001111101110",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#test-it",
    "href": "50_754.html#test-it",
    "title": "IEEE 754",
    "section": "Test it",
    "text": "Test it\n\nWrite a simple test…\n\n\n\nsrc/main.rs\n\nfn main() {\n    let b:u32 = 0b0_00000000_11011001110001111101110;\n    println!(\"{:032b}\", b);\n    println!(\"{:1.100}\", f32::from_bits(b));\n    let x:f32 = 10.0_f32.powf(-38.0_f32);\n    println!(\"{:032b}\", x.to_bits());\n    println!(\"{:1.100}\", x);\n}\n\n\nResults are as expected.\n\n00000000011011001110001111101110\n0.0000000000000000000000000000000000000099999993504564039245746141539976645128551939195729831580121175\n00000000011011001110001111101110\n0.0000000000000000000000000000000000000099999993504564039245746141539976645128551939195729831580121175",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#denormalized-number",
    "href": "50_754.html#denormalized-number",
    "title": "IEEE 754",
    "section": "“Denormalized Number”",
    "text": "“Denormalized Number”\n\nNumbers that have a zero exponent\nRequired when the exponent is below the minimum exponent\nHelps prevent underflow\nGenerally speaking, if you are using one these, the math is about to get wronger than you’d think.\nThe good (???) language C++ provides a std::nextafter for which Rust crates exist.",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#floating-point-precision",
    "href": "50_754.html#floating-point-precision",
    "title": "IEEE 754",
    "section": "Floating Point Precision",
    "text": "Floating Point Precision\n\nRepresentation is not uniform between numbers\nMost precision lies between 0.0 and 0.1\nPrecision falls away",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#visually",
    "href": "50_754.html#visually",
    "title": "IEEE 754",
    "section": "Visually",
    "text": "Visually\n\n\nFun with floating point, Dwayne Need",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#floating-point-precision-1",
    "href": "50_754.html#floating-point-precision-1",
    "title": "IEEE 754",
    "section": "Floating Point Precision",
    "text": "Floating Point Precision\nThe number of floats from 0.0\n\n… to 0.1 = 1,036,831,949\n… to 0.2 = 8,388,608\n… to 0.4 = 8,388,608\n… to 0.8 = 8,388,608\n… to 1.6 = 8,388,608\n… to 3.2 = 8,388,608",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#errors-in-floating-point",
    "href": "50_754.html#errors-in-floating-point",
    "title": "IEEE 754",
    "section": "Errors in Floating Point",
    "text": "Errors in Floating Point\n\nStorage of \\(\\pi\\)\n\n&gt;&gt;&gt; from numpy import pi as pi\n&gt;&gt;&gt; # copy paste Wolfram|Alpha\n&gt;&gt;&gt; '3.14159265358979323846264338327950288419716939937510582097494459230781640628'\n'3.14159265358979323846264338327950288419716939937510582097494459230781640628'\n&gt;&gt;&gt; f'{pi:1.100}'\n'3.141592653589793115997963468544185161590576171875'\n\nThey differ fairly early on!",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#measuring-error-ulps",
    "href": "50_754.html#measuring-error-ulps",
    "title": "IEEE 754",
    "section": "Measuring Error: “Ulps”",
    "text": "Measuring Error: “Ulps”\n\nUnits in Last Place\n\n\nIn computer science and numerical analysis, unit in the last place or unit of least precision (ulp) is the spacing between two consecutive floating-point numbers, i.e., the value the least significant digit (rightmost digit) represents if it is 1. It is used as a measure of accuracy in numeric calculations.",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#haskell",
    "href": "50_754.html#haskell",
    "title": "IEEE 754",
    "section": "Haskell",
    "text": "Haskell\n\nUsually ULP is taught using Haskell.\n\n&gt; until (\\x -&gt; x == x+1) (+1) 0 :: Float\n1.6777216e7\n&gt; it-1\n1.6777215e7\n&gt; it+1\n1.6777216e7\n\nI’ll translate to .py/.rs",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#generators",
    "href": "50_754.html#generators",
    "title": "IEEE 754",
    "section": "Generators",
    "text": "Generators\n\nBy convention we check number theoretic results with lazily evaluated generator expressions in Python.\nThe following generators all powers of two for a which adding one does not change the value within Python floating points.\n\nfrom itertools import count\n\ngen = (i for i in count() if 2.0 ** float(i) + 1.0 == 2.0 ** float(i))\n\nx = next(gen)\n\nprint('2.0 ** x + 0.0 = ', 2.0 ** x + 0.0)\nprint('2.0 ** x + 1.0 = ', 2.0 ** x + 1.0)",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#iterators",
    "href": "50_754.html#iterators",
    "title": "IEEE 754",
    "section": "Iterators",
    "text": "Iterators\n\nRust doesn’t require iterators, supporting the infinite iterator by default using unwrap.\n\nlet x = (0..).find(|&i| f64::powi(2.0, i) + 1.0 == f64::powi(2.0, i)).unwrap();\n\nlet base = f64::powi(2.0, x);\n\n// Prints the result (2^53 = 9007199254740992.0)\nprintln!(\"2.0 ** x + 0.0 = {:.1}\", base);\nprintln!(\"2.0 ** x + 1.0 = {:.1}\", base + 1.0);\n\nI haven’t used find before, this is an LLM donation to our knowledge base.\nBy the way, that is basically 2 ** 53 and there are 52 bits of mantissa precision.",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#on-ulps",
    "href": "50_754.html#on-ulps",
    "title": "IEEE 754",
    "section": "On “Ulps”",
    "text": "On “Ulps”\n\nWe can measure error using ULPs.\n\n\nThe gap between the two floating-point numbers nearest to x, even if x is one of )them.\n\n&gt;&gt;&gt; from numpy import float32 as f32, pi as pi, float64 as f64\n&gt;&gt;&gt; f64(pi) - f64(f32(pi))\nnp.float64(-8.742278012618954e-08)",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#rounding",
    "href": "50_754.html#rounding",
    "title": "IEEE 754",
    "section": "Rounding",
    "text": "Rounding\n\nWe have some guarantees:\n\nIEEE 754 requires that that elementary arithmetic operations are correctly rounded to within 0.5 ulps\nTranscendental functions are generally rounded to between 0.5 and 1.0 ulps\n\nTranscendental as in \\(\\pi\\) or \\(e\\)\n\n\n~9 ulps",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#rounding-error",
    "href": "50_754.html#rounding-error",
    "title": "IEEE 754",
    "section": "Rounding Error",
    "text": "Rounding Error\n\nInduced by approximating an infinite range of numbers into a finite number of bits\nRounding is:\n\nTowards the nearest\nTowards zero\nTowards positive infinity (round up)\nTowards negative infinity (round down)",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#rounding-error-1",
    "href": "50_754.html#rounding-error-1",
    "title": "IEEE 754",
    "section": "Rounding Error",
    "text": "Rounding Error\n\nWhat about rounding the half-way case? (i.e. 0.5)\n\nRound Up vs. Round Even\n\nCorrect Rounding:\n\nBasic operations (add, subtract, multiply, divide, sqrt) should return the number nearest the mathematical result.\nIf there is a tie, round to the number with an even mantissa",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#implementation",
    "href": "50_754.html#implementation",
    "title": "IEEE 754",
    "section": "Implementation",
    "text": "Implementation\n\n“Guard Bit”, “Round Bit”, “Sticky Bit”\nOnly used while doing calculations\n\nNot stored in the float itself\nThe mantissa is shifted in calculations to align radix\n\nThe guard bits and round bits are extra precision\nThe sticky bit is an OR of anything that shifts through it\n\n0_00000000_00000000000000000000000_G_R_S..",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#special-bits",
    "href": "50_754.html#special-bits",
    "title": "IEEE 754",
    "section": "Special bits",
    "text": "Special bits\n\n“Guard Bit”, “Round Bit”, “Sticky Bit”\n[G][R][S]\n[0][-][-] - Round Down (do nothing)\n[1][0][0] - Round Up if the mantissa LSB is 1\n[1][0][1] - Round Up\n[1][1][0] - Round Up\n[1][1][1] - Round Up\n\n0_00000000_00000000000000000000000_G_R_S..",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#significance-error",
    "href": "50_754.html#significance-error",
    "title": "IEEE 754",
    "section": "Significance Error",
    "text": "Significance Error\n\nCompute the Area of a Triangle given side lengths\nHero(n)’s Formula:\n\nTake \\(s = \\frac{1}{2}(a + b + c)\\)\nThen \\(\\sqrt{s(s-a)(s-b)(s-c)}\\)\n\nKahan’s Algorithm:\n\nTake \\(((a, b, c) | a \\leq b \\leq c)\\)\nThen \\(\\sqrt{\\frac{(x + (y + z)) \\times (z - (x - y)) \\times (z + (x - y)) \\times (x + (y - z))}{4}}\\)",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#write-them",
    "href": "50_754.html#write-them",
    "title": "IEEE 754",
    "section": "Write them",
    "text": "Write them\n\n\nsrc/lib.rs\n\nfn heron(a:f32, b:f32, c:f32) -&gt; f32 {\n    let s = (a + b + c)/2.0_f32;\n    return (s * (s - a) * (s - b) * (s - c)).sqrt();\n}\n\nfn kahan(a:f32, b:f32, c:f32) -&gt; f32 {\n    let mut s = vec![a,b,c];\n    s.sort_by(|a, b| a.partial_cmp(b).unwrap()); // \"partial\"? Why not `.sort`?\n    let mut prod = s[0] + s[1] + s[2];\n    prod *= s[2] - (s[0] - s[1]);\n    prod *= s[2] + (s[0] - s[1]);\n    prod *= s[0] + (s[1] - s[2]);\n    return prod.sqrt() / 4.0;\n}",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#test-them",
    "href": "50_754.html#test-them",
    "title": "IEEE 754",
    "section": "Test them",
    "text": "Test them\n\n\nsrc/main.rs\n\nfn main(){\n    dbg!(heron(3.0,4.0,5.0));\n    dbg!(kahan(3.0,4.0,5.0));\n    let a = 100_000.0_f32;\n    let c = 0.01_f32;\n    dbg!(heron(a,a,c));\n    dbg!(kahan(a,a,c));\n}\n\n\nOh what’s that?\n\n[src/main.rs:21:5] heron(3.0,4.0,5.0) = 6.0\n[src/main.rs:22:5] kahan(3.0,4.0,5.0) = 6.0\n[src/main.rs:25:5] heron(a,a,c) = 781.25006\n[src/main.rs:26:5] kahan(a,a,c) = 500.0\n\nUsing f64 (vs f32) we get 499.9999999999994",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#significance-error-1",
    "href": "50_754.html#significance-error-1",
    "title": "IEEE 754",
    "section": "Significance Error",
    "text": "Significance Error\n\nUse Stable Algorithms\n\nKeep big numbers with big numbers, little numbers with little numbers.\n\nParentheses can help\nThe compiler won’t re-arrange your math if it cannot prove it would yield the same!\n\nE.g. you can’t use &lt; in Rust as you may provide a NaN.",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#significance-error-dont-floats",
    "href": "50_754.html#significance-error-dont-floats",
    "title": "IEEE 754",
    "section": "Significance Error – Don’t floats?",
    "text": "Significance Error – Don’t floats?\n\nUse integers\n\nVery fast\nTrade more precision for less range\nOnly input/output may be impacted by floating point conversions\nFinancial applications represent dollars as only cents or tenth’s of cents",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#significance-error-dont-floats-1",
    "href": "50_754.html#significance-error-dont-floats-1",
    "title": "IEEE 754",
    "section": "Significance Error – Don’t floats?",
    "text": "Significance Error – Don’t floats?\n\nUse a math library\n\nSlower\nDefine your own level of accuracy\nUsually GMP or hardware specific.",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#significance-error-dont-floats-2",
    "href": "50_754.html#significance-error-dont-floats-2",
    "title": "IEEE 754",
    "section": "Significance Error – Don’t floats?",
    "text": "Significance Error – Don’t floats?\n\nExecute symbolically\n\nSlowest\nArbitrary accuracy\nRound only at output",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#significance-error-dont-floats-3",
    "href": "50_754.html#significance-error-dont-floats-3",
    "title": "IEEE 754",
    "section": "Significance Error – Don’t floats?",
    "text": "Significance Error – Don’t floats?\n\nWrite your own library?\n\nUse vectors of bits or bytes.\nWrite your own arithmetic operations.\nTest and debug your own implemention.\n\nComing soon to a homework near you!",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#algebraic-assumption-error",
    "href": "50_754.html#algebraic-assumption-error",
    "title": "IEEE 754",
    "section": "Algebraic Assumption Error",
    "text": "Algebraic Assumption Error\n\nDistributive Rule does not apply:\n\n\\(a = x \\times y - x \\times z \\nRightarrow a = x (y - z)\\)\n\nAssociative Rule does not apply: 𝑥 + 𝑦 +𝑧 ≠ 𝑥 +𝑦 +𝑧\n\n\\(a = x + (y + z) \\nRightarrow a = (x + y) + z\\)\n\nCannot interchange division and multiplication:\n\n\\(a = \\frac{x}{10.0} \\nRightarrow a = x \\times 0.1\\)",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#distribution",
    "href": "50_754.html#distribution",
    "title": "IEEE 754",
    "section": "Distribution",
    "text": "Distribution\n&gt;&gt;&gt; x, y, z\n(np.float32(1000000000.0), np.float32(1.0000005), np.float32(1.0))\n&gt;&gt;&gt; x * y - x * z ; x * (y - z)\nnp.float32(448.0)\nnp.float32(476.83716)",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#association",
    "href": "50_754.html#association",
    "title": "IEEE 754",
    "section": "Association",
    "text": "Association\n&gt;&gt;&gt; x, y, z\n(np.float32(16777216.0), np.float32(1.0), np.float32(1.0))\n&gt;&gt;&gt; x + (y + z) ; (x + y) + z\nnp.float32(16777218.0)\nnp.float32(16777216.0)",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#interchange",
    "href": "50_754.html#interchange",
    "title": "IEEE 754",
    "section": "Interchange",
    "text": "Interchange\n\nCheck last digit\n\n&gt;&gt;&gt; 1 / 7 / 100000000\n1.4285714285714284e-09\n&gt;&gt;&gt; 1 / 100000000 / 7\n1.4285714285714286e-09",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#floating-point-exceptions",
    "href": "50_754.html#floating-point-exceptions",
    "title": "IEEE 754",
    "section": "Floating Point Exceptions",
    "text": "Floating Point Exceptions\n\n\n\n\n\n\n\n\nIEEE 754 Exception\nResult when traps disabled\nArgument to trap handler\n\n\n\n\noverflow\n\\(\\pm \\infty\\) or \\(\\pm x_{\\text{max}}\\)\n\\(\\text{round}(x 2^{-a})\\)\n\n\nunderflow\n\\(0, \\pm 2^{\\text{min}}\\) or denormalized\n\\(\\text{round}(x 2^{a})\\)\n\n\ndivide by zero\n\\(\\pm \\infty\\)\ninvalid operation\n\n\ninvalid\n\\(\\text{NaN}\\)\ninvalid operation\n\n\ninexact\n\\(\\text{round}(x)\\)\n\\(\\text{round}(x)\\)",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#but-wait-theres-more",
    "href": "50_754.html#but-wait-theres-more",
    "title": "IEEE 754",
    "section": "But Wait! There’s More!",
    "text": "But Wait! There’s More!\n\nBinary to Decimal Conversion Error\nSummation Error\nPropagation Error\nUnderflow, Overflow\nType Narrowing/Widening Rules",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#testing",
    "href": "50_754.html#testing",
    "title": "IEEE 754",
    "section": "Testing",
    "text": "Testing\n\nDesign for Numerical Stability\nPerform Meaningful Testing\nDocument assumptions\nTrack sources of approximation\nQuantify goodness\n\nWell conditioned algorithms\n\nBackward error analysis\n\nAre the outputs identical for slightly modified inputs?",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#today-1",
    "href": "50_754.html#today-1",
    "title": "IEEE 754",
    "section": "Today",
    "text": "Today\n\nUnderstand precision through the lens of floats.\n\nUnderstand the basics of floats\nUnderstand the language of floats\nGet a feel for when further investigation is required",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.html#footnotes",
    "href": "50_754.html#footnotes",
    "title": "IEEE 754",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nGrammatically, this statement should be “so I have nothing about which to worry.”↩︎\nThis is true in the special case that your programming language is Haskell.↩︎\nThis is due to how many numbers there are.↩︎",
    "crumbs": [
      "IEEE 754"
    ]
  },
  {
    "objectID": "50_754.rjs.html#announcements",
    "href": "50_754.rjs.html#announcements",
    "title": "IEEE 754",
    "section": "Announcements",
    "text": "Announcements\n\nWelcome to Systems in Rust\nAction Items:\n\n“SHA-512” is due on next Friday\nLecture on numbers, inspired by the lab, while we wait."
  },
  {
    "objectID": "50_754.rjs.html#today",
    "href": "50_754.rjs.html#today",
    "title": "IEEE 754",
    "section": "Today",
    "text": "Today\n\nUnderstand precision through the lens of floats.\n\nUnderstand the basics of floats\nUnderstand the language of floats\nGet a feel for when further investigation is required"
  },
  {
    "objectID": "50_754.rjs.html#citation",
    "href": "50_754.rjs.html#citation",
    "title": "IEEE 754",
    "section": "Citation",
    "text": "Citation\n\nYoinked\nurl\nAuthor John Farrier, Booz Allen Hamilton"
  },
  {
    "objectID": "50_754.rjs.html#mission-statement",
    "href": "50_754.rjs.html#mission-statement",
    "title": "IEEE 754",
    "section": "Mission Statement",
    "text": "Mission Statement\n\nI’m a normal person.\n\nI think 5/2 is 2.5 or perhaps 2½.\n\nI’m a scientist.\n\nI’m solving “Black-Scholes”\nDoes anyone know what this is doing? \\[\nd_2 = d_1 - \\sigma\\sqrt{T - t} = \\frac{1}{\\sigma\\sqrt{T - t}}\\left[\\ln\\left(\\frac{S_t}{K}\\right) + \\left(r - q - \\frac{1}{2}\\sigma^2\\right)(T - t)\\right]\n\\]"
  },
  {
    "objectID": "50_754.rjs.html#common-fallacies",
    "href": "50_754.rjs.html#common-fallacies",
    "title": "IEEE 754",
    "section": "Common Fallacies",
    "text": "Common Fallacies\n\n“Floating point numbers are numbers”\n\nmax(count()) Pinocchios\n\n“It’s floating point error”\n\n“All floating point involves magical rounding errors”\n\n“Linux and Windows handle floats differently”\n“Floating point represents an interval value near the actual value”"
  },
  {
    "objectID": "50_754.rjs.html#common-fallacies-2.0",
    "href": "50_754.rjs.html#common-fallacies-2.0",
    "title": "IEEE 754",
    "section": "Common Fallacies 2.0",
    "text": "Common Fallacies 2.0\n\n“A double (an f64) holds 15 decimal places and I only need 3, so I have nothing to worry about”1\n“My programming language does better math than your programming language”2\n“Why can’t computers just store whatever number I use”3\n\nGrammatically, this statement should be “so I have nothing about which to worry.”This is true in the special case that your programming language is Haskell.This is due to how many numbers there are."
  },
  {
    "objectID": "50_754.rjs.html#anatomy-of-ieee-floats",
    "href": "50_754.rjs.html#anatomy-of-ieee-floats",
    "title": "IEEE 754",
    "section": "Anatomy of IEEE Floats",
    "text": "Anatomy of IEEE Floats"
  },
  {
    "objectID": "50_754.rjs.html#ieee-float-specification",
    "href": "50_754.rjs.html#ieee-float-specification",
    "title": "IEEE 754",
    "section": "IEEE Float Specification",
    "text": "IEEE Float Specification\n\nIEEE 754-1985, IEEE 854-1987, IEEE 754-2008\n\nThese are paywalled.\nThose are years.\n\nProvide for portable, provably consistent math\n\nConsistent, not correct."
  },
  {
    "objectID": "50_754.rjs.html#assurances",
    "href": "50_754.rjs.html#assurances",
    "title": "IEEE 754",
    "section": "Assurances",
    "text": "Assurances\n\nEnsure some significant mathematical identities hold true:\n\n\\(x + y  = y + x\\)\n\nSymmetry of addition\n\n\\(x + 0 = x\\)\n\nAdditive identity\n\n\\(x = y \\implies x - y = 0\\)\n\nIdentity under subtraction"
  },
  {
    "objectID": "50_754.rjs.html#assurances-2.0",
    "href": "50_754.rjs.html#assurances-2.0",
    "title": "IEEE 754",
    "section": "Assurances 2.0",
    "text": "Assurances 2.0\n\\[\n\\frac{x}{\\sqrt{x^2+y^2}} \\leq 1\n\\]\n\nWhat is missing?"
  },
  {
    "objectID": "50_754.rjs.html#ieee-float-specification-1",
    "href": "50_754.rjs.html#ieee-float-specification-1",
    "title": "IEEE 754",
    "section": "IEEE Float Specification",
    "text": "IEEE Float Specification\n\nEnsure every floating point number is unique\nEnsure every floating point number has an opposite\n\nZero is a special case because of this\n\nSpecifies algorithms for addition, subtraction, multiplication, division, and square-root\n\nNot really operations/relations! They are algorithms."
  },
  {
    "objectID": "50_754.rjs.html#aside-scientific-notation",
    "href": "50_754.rjs.html#aside-scientific-notation",
    "title": "IEEE 754",
    "section": "Aside: Scientific Notation",
    "text": "Aside: Scientific Notation\n\nScientific notation is a way of expressing numbers that are too large or too small to be conveniently written in decimal form, since to do so would require writing out an inconveniently long string of digits.\n\n\nIn scientific notation, nonzero numbers are written in the form\n\n\\[a \\times 10^b\\]"
  },
  {
    "objectID": "50_754.rjs.html#aside-explanation",
    "href": "50_754.rjs.html#aside-explanation",
    "title": "IEEE 754",
    "section": "Aside: Explanation",
    "text": "Aside: Explanation\n\nIn scientific notation, nonzero numbers are written in the form\n\n\\[a \\times 10^b\\]\n\n\\(a\\) (the coefficient or mantissa) is a number greater than or equal to 1 and less than 10 (\\(1 \\le |a| &lt; 10\\)).\n\\(10\\) is the base.\n\\(b\\) (the exponent) is an integer."
  },
  {
    "objectID": "50_754.rjs.html#aside-physical-examples",
    "href": "50_754.rjs.html#aside-physical-examples",
    "title": "IEEE 754",
    "section": "Aside: Physical Examples",
    "text": "Aside: Physical Examples\n\nSpeed of light: The speed of light in a vacuum is approximately \\(300,000,000 \\text{ m/s}\\) \\[\n3 \\times 10^8 \\text{ m/s}\n\\]\nMass of an electron: The mass of an electron is approximately \\(0.00000000000000000000000000091093837 \\text{ g}\\). \\[\n9.1093837 \\times 10^{-28} \\text{ g}\n\\]"
  },
  {
    "objectID": "50_754.rjs.html#aside-economic-examples",
    "href": "50_754.rjs.html#aside-economic-examples",
    "title": "IEEE 754",
    "section": "Aside: Economic Examples",
    "text": "Aside: Economic Examples\n\nWe can use social science numbers.\nLabor Market Outcomes of College Graduates by Major\nComputer Science majors in 2023 have a $80,000 median wage “early career”\n\n\\(8.0000 \\times 10^4\\)\n\nAnd 6.1% unemployment\n\n\\(6.1 \\times 10^{-2}\\)"
  },
  {
    "objectID": "50_754.rjs.html#ieee-layout",
    "href": "50_754.rjs.html#ieee-layout",
    "title": "IEEE 754",
    "section": "IEEE Layout",
    "text": "IEEE Layout\n\nAn approximation using scientific notation\n\n\\(x = -1^s \\times 2^e \\times 1.m\\)\n\\(x = -1^{\\text{sign bit}} \\times \\text{base} 2^{\\text{exponent}} \\times 1.\\text{mantissa}\\)\n\nWhere the mantissa is the technical term for the the digits after the decimal point."
  },
  {
    "objectID": "50_754.rjs.html#with-binary",
    "href": "50_754.rjs.html#with-binary",
    "title": "IEEE 754",
    "section": "With Binary",
    "text": "With Binary\n\n\\(x = -0b1^{\\text{0b0}} \\times 0b10^{\\text{0b10000000}}  \\times 0b1.10010010000111111011011\\)\nExpress in memory as the concatenation:\n\n0b0 to 0b10000000 to 0b10010010000111111011011\n01000000010010010000111111011011"
  },
  {
    "objectID": "50_754.rjs.html#singles-and-doubles",
    "href": "50_754.rjs.html#singles-and-doubles",
    "title": "IEEE 754",
    "section": "Singles and Doubles",
    "text": "Singles and Doubles\n\n32 - bits = 1 sign bit + 8 exponent bits + 23 mantissa bits\n\n0b0 to 0b10000000 to 0b10010010000111111011011\n\n64 - bits = 1 sign bit + 12 exponent bits + 52 mantissa bits"
  },
  {
    "objectID": "50_754.rjs.html#understanding-check",
    "href": "50_754.rjs.html#understanding-check",
    "title": "IEEE 754",
    "section": "Understanding check",
    "text": "Understanding check\n\nWhat is the probability a real number \\(a \\in \\mathbb{R}\\) has an exact float representation?\nWhat is the probability an integer \\(n \\in \\mathbb{Z}\\) has an exact float representation?\nWhat is the probability a course number \\(n &lt; 600\\) has an exact float representation?"
  },
  {
    "objectID": "50_754.rjs.html#special-floats---nan",
    "href": "50_754.rjs.html#special-floats---nan",
    "title": "IEEE 754",
    "section": "Special Floats - NaN",
    "text": "Special Floats - NaN\n\nDivide by Zero\n\n1 / 0\n\nNot a Number (NaN)\n\n&gt;&gt;&gt; from numpy import float32 as f32\n&gt;&gt;&gt; f32(1)/f32(0)\n&lt;stdin&gt;:1: RuntimeWarning: divide by zero encountered in scalar divide\nnp.float32(inf)\n&gt;&gt;&gt; 1/0\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nZeroDivisionError: division by zero"
  },
  {
    "objectID": "50_754.rjs.html#special-floats---inf",
    "href": "50_754.rjs.html#special-floats---inf",
    "title": "IEEE 754",
    "section": "Special Floats - inf",
    "text": "Special Floats - inf\n\nSigned Infinity\n\nOverflow protection\n\n&gt;&gt;&gt; f32(10) ** f32(100)\n&lt;stdin&gt;:1: RuntimeWarning: overflow encountered in scalar power\nnp.float32(inf)\n&gt;&gt;&gt; 10.0 ** 10000\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nOverflowError: (34, 'Numerical result out of range')"
  },
  {
    "objectID": "50_754.rjs.html#infinity-is-signed",
    "href": "50_754.rjs.html#infinity-is-signed",
    "title": "IEEE 754",
    "section": "Infinity is signed",
    "text": "Infinity is signed\n\nWe can get negative infinity through a variety of means.\n\n&gt;&gt;&gt; -(f32(10) ** f32(100))\nnp.float32(-inf)\n\nWe note that this suppresses the overflow error use ()\nIn some languages this is not ever regarded as an overflow error, like Julia (where we have to use larger powers due to the f64 default)\n\njulia&gt; 10.0^10000\nInf\n\njulia&gt; -(10.0^10000)\n-Inf"
  },
  {
    "objectID": "50_754.rjs.html#signed-zero",
    "href": "50_754.rjs.html#signed-zero",
    "title": "IEEE 754",
    "section": "Signed Zero",
    "text": "Signed Zero\n\nSigned Zero\n\nUnderflow protection, preserves sign\n\n0 =− 0\n\n\n&gt;&gt;&gt; -1 / 10 ** 1000\n-0.0\n&gt;&gt;&gt; 0.0 == (-1 / 10 ** 1000)\nTrue\n&gt;&gt;&gt; -0.0\n-0.0\n&gt;&gt;&gt; 0.0 - 0.0\n0.0\nWorks in base Python (e.g. don’t need NumPy).\nCouldn’t get it to work in Julia actually (went to -inf or NaN)"
  },
  {
    "objectID": "50_754.rjs.html#simple-example",
    "href": "50_754.rjs.html#simple-example",
    "title": "IEEE 754",
    "section": "Simple Example",
    "text": "Simple Example\n\nFloating point is great because it will work exactly how you expect.\n\n&gt;&gt;&gt; 0.1 + 0.2 == 0.3\nFalse\n\nMore or less.\n\n&gt;&gt;&gt; 0.1 + 0.2\n0.30000000000000004"
  },
  {
    "objectID": "50_754.rjs.html#simple-example-1",
    "href": "50_754.rjs.html#simple-example-1",
    "title": "IEEE 754",
    "section": "Simple Example",
    "text": "Simple Example\n\nWe shouldn’t be suprised by this!\n\n&gt;&gt;&gt; _ = [print(f\"{f32(i/10):1.100}\") for i in range(1,4)]\n0.100000001490116119384765625\n0.20000000298023223876953125\n0.300000011920928955078125\n&gt;&gt;&gt; _ = [print(f\"{f64(i/10):1.100}\") for i in range(1,4)]\n0.1000000000000000055511151231257827021181583404541015625\n0.200000000000000011102230246251565404236316680908203125\n0.299999999999999988897769753748434595763683319091796875"
  },
  {
    "objectID": "50_754.rjs.html#storage-of-1.",
    "href": "50_754.rjs.html#storage-of-1.",
    "title": "IEEE 754",
    "section": "Storage of 1.",
    "text": "Storage of 1.\n\n\\(x = -1^s \\times 2^e \\times 1.m\\)\n\\(x = -1^{\\text{sign bit}} \\times \\text{base} 2^{\\text{exponent}} \\times 1.\\text{mantissa}\\)\n\\(x = -1^{\\text{sign bit}} \\times \\text{base} 2^{\\text{exponent}} \\times 1 + \\text{mantissa} \\times \\frac{1}{2^n}\\)\n\\(1 = -1^0 \\times 2^0 \\times (1 + 0 \\times \\frac{1}{2^n}\\)\nSo each of the sign bit, the base, and the mantissa are zero.\n\nI should note I was unable to reproduce this in Rust or C.\nI’m not really a floating pointer."
  },
  {
    "objectID": "50_754.rjs.html#except",
    "href": "50_754.rjs.html#except",
    "title": "IEEE 754",
    "section": "Except…",
    "text": "Except…\n\nThis is actually a little bit fake.\n\n$ cat src/main.rs\nfn main() {\n    let x:f32 = 1.0;\n    println!(\"{:032b}\", x.to_bits());\n}\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/bits`\n00111111100000000000000000000000\n\nWhat is that?"
  },
  {
    "objectID": "50_754.rjs.html#shift-127",
    "href": "50_754.rjs.html#shift-127",
    "title": "IEEE 754",
    "section": "Shift 127",
    "text": "Shift 127\n\nWhile the exponent can be positive or negative, in binary formats it is stored as an unsigned number that has a fixed “bias” added to it.\n\n\nThe IEEE 754 binary format specifies a hardware implementation of such that the exponent, be it positive or negative, in binary formats is stored as an unsigned number that has a fixed “bias” added to it.\nIn the case of 32 bit floats, the bias is 127."
  },
  {
    "objectID": "50_754.rjs.html#breakdown",
    "href": "50_754.rjs.html#breakdown",
    "title": "IEEE 754",
    "section": "Breakdown",
    "text": "Breakdown\n\nTake the following:\n\n00111111100000000000000000000000\n\nThat is:\n\nSign bit of 0\nExponent of 01111111\n\nAll zeroes and all ones are reserved for NaN, inf, etc.\n\nMantissa of 23 zeroes."
  },
  {
    "objectID": "50_754.rjs.html#how-precise",
    "href": "50_754.rjs.html#how-precise",
    "title": "IEEE 754",
    "section": "How precise?",
    "text": "How precise?\n\nI have referred to f32 as having “32 bits of precision”.\nHow much precision is that?\nWell, let’s set the least significant bit of the mantissa to one.\n\n\n\nmain.rs\n\nfn main() {\n    let x:f32 = 1.0;\n    let mut b:u32 = x.to_bits();\n    b |= 1;\n    println!(\"{:032b}\", b);\n    println!(\"{:1.32}\", f32::from_bits(b));\n}"
  },
  {
    "objectID": "50_754.rjs.html#epsilon",
    "href": "50_754.rjs.html#epsilon",
    "title": "IEEE 754",
    "section": "“Epsilon”",
    "text": "“Epsilon”\n\nWhat do we get?\n\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/bits`\n00111111100000000000000000000001\n1.00000011920928955078125000000000\n\nWe refer to this value (less one) as machine epsilon, or perhaps \\(\\varepsilon\\).\nThe difference between 1.0 and the next available floating point number.\nMuch lower, of course, with double and quad precision."
  },
  {
    "objectID": "50_754.rjs.html#easier-sig-figs",
    "href": "50_754.rjs.html#easier-sig-figs",
    "title": "IEEE 754",
    "section": "Easier: “Sig figs”",
    "text": "Easier: “Sig figs”\n\n\n\nFormat\nSign\nExp.\nMant.\nBits\nBias\nPrec.\nSignificance\n\n\n\n\nHalf\n1\n5\n10\n16\n15\n11\n3-4\n\n\nSingle\n1\n8\n23\n32\n127\n24\n6-9\n\n\nDouble\n1\n11\n52\n64\n1023\n53\n15-17\n\n\nQuad\n1\n15\n112\n128\n16383\n113\n33-36\n\n\n\n\nProf. Kahan, UCB EECS"
  },
  {
    "objectID": "50_754.rjs.html#sig-figs",
    "href": "50_754.rjs.html#sig-figs",
    "title": "IEEE 754",
    "section": "Sig figs",
    "text": "Sig figs\n\nIEEE 754 was intended for scientific computing\nThat is, not systems computing, software etc.\nUseful to us to think about information and how bits work.\n\n\nSignificant figures, also referred to as significant digits, are specific digits within a number that is written in positional notation that carry both reliability and necessity in conveying a particular quantity."
  },
  {
    "objectID": "50_754.rjs.html#small-values",
    "href": "50_754.rjs.html#small-values",
    "title": "IEEE 754",
    "section": "Small Values",
    "text": "Small Values\n\nFor 32-bit floats, the minimum base 10 exponent is -36.\nHow is \\(1.0 \\times 10^{-37}\\) represented?\n\n// In Rust, we may use '0b' prefix for binary representation.\n// In Rust, we may us underscores within numerical values.\n0b0_00000000_11011001110001111101110"
  },
  {
    "objectID": "50_754.rjs.html#test-it",
    "href": "50_754.rjs.html#test-it",
    "title": "IEEE 754",
    "section": "Test it",
    "text": "Test it\n\nWrite a simple test…\n\n\n\nsrc/main.rs\n\nfn main() {\n    let b:u32 = 0b0_00000000_11011001110001111101110;\n    println!(\"{:032b}\", b);\n    println!(\"{:1.100}\", f32::from_bits(b));\n    let x:f32 = 10.0_f32.powf(-38.0_f32);\n    println!(\"{:032b}\", x.to_bits());\n    println!(\"{:1.100}\", x);\n}\n\n\nResults are as expected.\n\n00000000011011001110001111101110\n0.0000000000000000000000000000000000000099999993504564039245746141539976645128551939195729831580121175\n00000000011011001110001111101110\n0.0000000000000000000000000000000000000099999993504564039245746141539976645128551939195729831580121175"
  },
  {
    "objectID": "50_754.rjs.html#denormalized-number",
    "href": "50_754.rjs.html#denormalized-number",
    "title": "IEEE 754",
    "section": "“Denormalized Number”",
    "text": "“Denormalized Number”\n\nNumbers that have a zero exponent\nRequired when the exponent is below the minimum exponent\nHelps prevent underflow\nGenerally speaking, if you are using one these, the math is about to get wronger than you’d think.\nThe good (???) language C++ provides a std::nextafter for which Rust crates exist."
  },
  {
    "objectID": "50_754.rjs.html#floating-point-precision",
    "href": "50_754.rjs.html#floating-point-precision",
    "title": "IEEE 754",
    "section": "Floating Point Precision",
    "text": "Floating Point Precision\n\nRepresentation is not uniform between numbers\nMost precision lies between 0.0 and 0.1\nPrecision falls away"
  },
  {
    "objectID": "50_754.rjs.html#visually",
    "href": "50_754.rjs.html#visually",
    "title": "IEEE 754",
    "section": "Visually",
    "text": "Visually\n\n\nFun with floating point, Dwayne Need"
  },
  {
    "objectID": "50_754.rjs.html#floating-point-precision-1",
    "href": "50_754.rjs.html#floating-point-precision-1",
    "title": "IEEE 754",
    "section": "Floating Point Precision",
    "text": "Floating Point Precision\nThe number of floats from 0.0\n\n… to 0.1 = 1,036,831,949\n… to 0.2 = 8,388,608\n… to 0.4 = 8,388,608\n… to 0.8 = 8,388,608\n… to 1.6 = 8,388,608\n… to 3.2 = 8,388,608"
  },
  {
    "objectID": "50_754.rjs.html#errors-in-floating-point",
    "href": "50_754.rjs.html#errors-in-floating-point",
    "title": "IEEE 754",
    "section": "Errors in Floating Point",
    "text": "Errors in Floating Point\n\nStorage of \\(\\pi\\)\n\n&gt;&gt;&gt; from numpy import pi as pi\n&gt;&gt;&gt; # copy paste Wolfram|Alpha\n&gt;&gt;&gt; '3.14159265358979323846264338327950288419716939937510582097494459230781640628'\n'3.14159265358979323846264338327950288419716939937510582097494459230781640628'\n&gt;&gt;&gt; f'{pi:1.100}'\n'3.141592653589793115997963468544185161590576171875'\n\nThey differ fairly early on!"
  },
  {
    "objectID": "50_754.rjs.html#measuring-error-ulps",
    "href": "50_754.rjs.html#measuring-error-ulps",
    "title": "IEEE 754",
    "section": "Measuring Error: “Ulps”",
    "text": "Measuring Error: “Ulps”\n\nUnits in Last Place\n\n\nIn computer science and numerical analysis, unit in the last place or unit of least precision (ulp) is the spacing between two consecutive floating-point numbers, i.e., the value the least significant digit (rightmost digit) represents if it is 1. It is used as a measure of accuracy in numeric calculations."
  },
  {
    "objectID": "50_754.rjs.html#haskell",
    "href": "50_754.rjs.html#haskell",
    "title": "IEEE 754",
    "section": "Haskell",
    "text": "Haskell\n\nUsually ULP is taught using Haskell.\n\n&gt; until (\\x -&gt; x == x+1) (+1) 0 :: Float\n1.6777216e7\n&gt; it-1\n1.6777215e7\n&gt; it+1\n1.6777216e7\n\nI’ll translate to .py/.rs"
  },
  {
    "objectID": "50_754.rjs.html#generators",
    "href": "50_754.rjs.html#generators",
    "title": "IEEE 754",
    "section": "Generators",
    "text": "Generators\n\nBy convention we check number theoretic results with lazily evaluated generator expressions in Python.\nThe following generators all powers of two for a which adding one does not change the value within Python floating points.\n\nfrom itertools import count\n\ngen = (i for i in count() if 2.0 ** float(i) + 1.0 == 2.0 ** float(i))\n\nx = next(gen)\n\nprint('2.0 ** x + 0.0 = ', 2.0 ** x + 0.0)\nprint('2.0 ** x + 1.0 = ', 2.0 ** x + 1.0)"
  },
  {
    "objectID": "50_754.rjs.html#iterators",
    "href": "50_754.rjs.html#iterators",
    "title": "IEEE 754",
    "section": "Iterators",
    "text": "Iterators\n\nRust doesn’t require iterators, supporting the infinite iterator by default using unwrap.\n\nlet x = (0..).find(|&i| f64::powi(2.0, i) + 1.0 == f64::powi(2.0, i)).unwrap();\n\nlet base = f64::powi(2.0, x);\n\n// Prints the result (2^53 = 9007199254740992.0)\nprintln!(\"2.0 ** x + 0.0 = {:.1}\", base);\nprintln!(\"2.0 ** x + 1.0 = {:.1}\", base + 1.0);\n\nI haven’t used find before, this is an LLM donation to our knowledge base.\nBy the way, that is basically 2 ** 53 and there are 52 bits of mantissa precision."
  },
  {
    "objectID": "50_754.rjs.html#on-ulps",
    "href": "50_754.rjs.html#on-ulps",
    "title": "IEEE 754",
    "section": "On “Ulps”",
    "text": "On “Ulps”\n\nWe can measure error using ULPs.\n\n\nThe gap between the two floating-point numbers nearest to x, even if x is one of )them.\n\n&gt;&gt;&gt; from numpy import float32 as f32, pi as pi, float64 as f64\n&gt;&gt;&gt; f64(pi) - f64(f32(pi))\nnp.float64(-8.742278012618954e-08)"
  },
  {
    "objectID": "50_754.rjs.html#rounding",
    "href": "50_754.rjs.html#rounding",
    "title": "IEEE 754",
    "section": "Rounding",
    "text": "Rounding\n\nWe have some guarantees:\n\nIEEE 754 requires that that elementary arithmetic operations are correctly rounded to within 0.5 ulps\nTranscendental functions are generally rounded to between 0.5 and 1.0 ulps\n\nTranscendental as in \\(\\pi\\) or \\(e\\)\n\n\n~9 ulps"
  },
  {
    "objectID": "50_754.rjs.html#rounding-error",
    "href": "50_754.rjs.html#rounding-error",
    "title": "IEEE 754",
    "section": "Rounding Error",
    "text": "Rounding Error\n\nInduced by approximating an infinite range of numbers into a finite number of bits\nRounding is:\n\nTowards the nearest\nTowards zero\nTowards positive infinity (round up)\nTowards negative infinity (round down)"
  },
  {
    "objectID": "50_754.rjs.html#rounding-error-1",
    "href": "50_754.rjs.html#rounding-error-1",
    "title": "IEEE 754",
    "section": "Rounding Error",
    "text": "Rounding Error\n\nWhat about rounding the half-way case? (i.e. 0.5)\n\nRound Up vs. Round Even\n\nCorrect Rounding:\n\nBasic operations (add, subtract, multiply, divide, sqrt) should return the number nearest the mathematical result.\nIf there is a tie, round to the number with an even mantissa"
  },
  {
    "objectID": "50_754.rjs.html#implementation",
    "href": "50_754.rjs.html#implementation",
    "title": "IEEE 754",
    "section": "Implementation",
    "text": "Implementation\n\n“Guard Bit”, “Round Bit”, “Sticky Bit”\nOnly used while doing calculations\n\nNot stored in the float itself\nThe mantissa is shifted in calculations to align radix\n\nThe guard bits and round bits are extra precision\nThe sticky bit is an OR of anything that shifts through it\n\n0_00000000_00000000000000000000000_G_R_S.."
  },
  {
    "objectID": "50_754.rjs.html#special-bits",
    "href": "50_754.rjs.html#special-bits",
    "title": "IEEE 754",
    "section": "Special bits",
    "text": "Special bits\n\n“Guard Bit”, “Round Bit”, “Sticky Bit”\n[G][R][S]\n[0][-][-] - Round Down (do nothing)\n[1][0][0] - Round Up if the mantissa LSB is 1\n[1][0][1] - Round Up\n[1][1][0] - Round Up\n[1][1][1] - Round Up\n\n0_00000000_00000000000000000000000_G_R_S.."
  },
  {
    "objectID": "50_754.rjs.html#significance-error",
    "href": "50_754.rjs.html#significance-error",
    "title": "IEEE 754",
    "section": "Significance Error",
    "text": "Significance Error\n\nCompute the Area of a Triangle given side lengths\nHero(n)’s Formula:\n\nTake \\(s = \\frac{1}{2}(a + b + c)\\)\nThen \\(\\sqrt{s(s-a)(s-b)(s-c)}\\)\n\nKahan’s Algorithm:\n\nTake \\(((a, b, c) | a \\leq b \\leq c)\\)\nThen \\(\\sqrt{\\frac{(x + (y + z)) \\times (z - (x - y)) \\times (z + (x - y)) \\times (x + (y - z))}{4}}\\)"
  },
  {
    "objectID": "50_754.rjs.html#write-them",
    "href": "50_754.rjs.html#write-them",
    "title": "IEEE 754",
    "section": "Write them",
    "text": "Write them\n\n\nsrc/lib.rs\n\nfn heron(a:f32, b:f32, c:f32) -&gt; f32 {\n    let s = (a + b + c)/2.0_f32;\n    return (s * (s - a) * (s - b) * (s - c)).sqrt();\n}\n\nfn kahan(a:f32, b:f32, c:f32) -&gt; f32 {\n    let mut s = vec![a,b,c];\n    s.sort_by(|a, b| a.partial_cmp(b).unwrap()); // \"partial\"? Why not `.sort`?\n    let mut prod = s[0] + s[1] + s[2];\n    prod *= s[2] - (s[0] - s[1]);\n    prod *= s[2] + (s[0] - s[1]);\n    prod *= s[0] + (s[1] - s[2]);\n    return prod.sqrt() / 4.0;\n}"
  },
  {
    "objectID": "50_754.rjs.html#test-them",
    "href": "50_754.rjs.html#test-them",
    "title": "IEEE 754",
    "section": "Test them",
    "text": "Test them\n\n\nsrc/main.rs\n\nfn main(){\n    dbg!(heron(3.0,4.0,5.0));\n    dbg!(kahan(3.0,4.0,5.0));\n    let a = 100_000.0_f32;\n    let c = 0.01_f32;\n    dbg!(heron(a,a,c));\n    dbg!(kahan(a,a,c));\n}\n\n\nOh what’s that?\n\n[src/main.rs:21:5] heron(3.0,4.0,5.0) = 6.0\n[src/main.rs:22:5] kahan(3.0,4.0,5.0) = 6.0\n[src/main.rs:25:5] heron(a,a,c) = 781.25006\n[src/main.rs:26:5] kahan(a,a,c) = 500.0\n\nUsing f64 (vs f32) we get 499.9999999999994"
  },
  {
    "objectID": "50_754.rjs.html#significance-error-1",
    "href": "50_754.rjs.html#significance-error-1",
    "title": "IEEE 754",
    "section": "Significance Error",
    "text": "Significance Error\n\nUse Stable Algorithms\n\nKeep big numbers with big numbers, little numbers with little numbers.\n\nParentheses can help\nThe compiler won’t re-arrange your math if it cannot prove it would yield the same!\n\nE.g. you can’t use &lt; in Rust as you may provide a NaN."
  },
  {
    "objectID": "50_754.rjs.html#significance-error-dont-floats",
    "href": "50_754.rjs.html#significance-error-dont-floats",
    "title": "IEEE 754",
    "section": "Significance Error – Don’t floats?",
    "text": "Significance Error – Don’t floats?\n\nUse integers\n\nVery fast\nTrade more precision for less range\nOnly input/output may be impacted by floating point conversions\nFinancial applications represent dollars as only cents or tenth’s of cents"
  },
  {
    "objectID": "50_754.rjs.html#significance-error-dont-floats-1",
    "href": "50_754.rjs.html#significance-error-dont-floats-1",
    "title": "IEEE 754",
    "section": "Significance Error – Don’t floats?",
    "text": "Significance Error – Don’t floats?\n\nUse a math library\n\nSlower\nDefine your own level of accuracy\nUsually GMP or hardware specific."
  },
  {
    "objectID": "50_754.rjs.html#significance-error-dont-floats-2",
    "href": "50_754.rjs.html#significance-error-dont-floats-2",
    "title": "IEEE 754",
    "section": "Significance Error – Don’t floats?",
    "text": "Significance Error – Don’t floats?\n\nExecute symbolically\n\nSlowest\nArbitrary accuracy\nRound only at output"
  },
  {
    "objectID": "50_754.rjs.html#significance-error-dont-floats-3",
    "href": "50_754.rjs.html#significance-error-dont-floats-3",
    "title": "IEEE 754",
    "section": "Significance Error – Don’t floats?",
    "text": "Significance Error – Don’t floats?\n\nWrite your own library?\n\nUse vectors of bits or bytes.\nWrite your own arithmetic operations.\nTest and debug your own implemention.\n\nComing soon to a homework near you!"
  },
  {
    "objectID": "50_754.rjs.html#algebraic-assumption-error",
    "href": "50_754.rjs.html#algebraic-assumption-error",
    "title": "IEEE 754",
    "section": "Algebraic Assumption Error",
    "text": "Algebraic Assumption Error\n\nDistributive Rule does not apply:\n\n\\(a = x \\times y - x \\times z \\nRightarrow a = x (y - z)\\)\n\nAssociative Rule does not apply: 𝑥 + 𝑦 +𝑧 ≠ 𝑥 +𝑦 +𝑧\n\n\\(a = x + (y + z) \\nRightarrow a = (x + y) + z\\)\n\nCannot interchange division and multiplication:\n\n\\(a = \\frac{x}{10.0} \\nRightarrow a = x \\times 0.1\\)"
  },
  {
    "objectID": "50_754.rjs.html#distribution",
    "href": "50_754.rjs.html#distribution",
    "title": "IEEE 754",
    "section": "Distribution",
    "text": "Distribution\n&gt;&gt;&gt; x, y, z\n(np.float32(1000000000.0), np.float32(1.0000005), np.float32(1.0))\n&gt;&gt;&gt; x * y - x * z ; x * (y - z)\nnp.float32(448.0)\nnp.float32(476.83716)"
  },
  {
    "objectID": "50_754.rjs.html#association",
    "href": "50_754.rjs.html#association",
    "title": "IEEE 754",
    "section": "Association",
    "text": "Association\n&gt;&gt;&gt; x, y, z\n(np.float32(16777216.0), np.float32(1.0), np.float32(1.0))\n&gt;&gt;&gt; x + (y + z) ; (x + y) + z\nnp.float32(16777218.0)\nnp.float32(16777216.0)"
  },
  {
    "objectID": "50_754.rjs.html#interchange",
    "href": "50_754.rjs.html#interchange",
    "title": "IEEE 754",
    "section": "Interchange",
    "text": "Interchange\n\nCheck last digit\n\n&gt;&gt;&gt; 1 / 7 / 100000000\n1.4285714285714284e-09\n&gt;&gt;&gt; 1 / 100000000 / 7\n1.4285714285714286e-09"
  },
  {
    "objectID": "50_754.rjs.html#floating-point-exceptions",
    "href": "50_754.rjs.html#floating-point-exceptions",
    "title": "IEEE 754",
    "section": "Floating Point Exceptions",
    "text": "Floating Point Exceptions\n\n\n\n\n\n\n\n\nIEEE 754 Exception\nResult when traps disabled\nArgument to trap handler\n\n\n\n\noverflow\n\\(\\pm \\infty\\) or \\(\\pm x_{\\text{max}}\\)\n\\(\\text{round}(x 2^{-a})\\)\n\n\nunderflow\n\\(0, \\pm 2^{\\text{min}}\\) or denormalized\n\\(\\text{round}(x 2^{a})\\)\n\n\ndivide by zero\n\\(\\pm \\infty\\)\ninvalid operation\n\n\ninvalid\n\\(\\text{NaN}\\)\ninvalid operation\n\n\ninexact\n\\(\\text{round}(x)\\)\n\\(\\text{round}(x)\\)"
  },
  {
    "objectID": "50_754.rjs.html#but-wait-theres-more",
    "href": "50_754.rjs.html#but-wait-theres-more",
    "title": "IEEE 754",
    "section": "But Wait! There’s More!",
    "text": "But Wait! There’s More!\n\nBinary to Decimal Conversion Error\nSummation Error\nPropagation Error\nUnderflow, Overflow\nType Narrowing/Widening Rules"
  },
  {
    "objectID": "50_754.rjs.html#testing",
    "href": "50_754.rjs.html#testing",
    "title": "IEEE 754",
    "section": "Testing",
    "text": "Testing\n\nDesign for Numerical Stability\nPerform Meaningful Testing\nDocument assumptions\nTrack sources of approximation\nQuantify goodness\n\nWell conditioned algorithms\n\nBackward error analysis\n\nAre the outputs identical for slightly modified inputs?"
  },
  {
    "objectID": "50_754.rjs.html#today-1",
    "href": "50_754.rjs.html#today-1",
    "title": "IEEE 754",
    "section": "Today",
    "text": "Today\n\nUnderstand precision through the lens of floats.\n\nUnderstand the basics of floats\nUnderstand the language of floats\nGet a feel for when further investigation is required"
  },
  {
    "objectID": "41_constants.html",
    "href": "41_constants.html",
    "title": "Constants",
    "section": "",
    "text": "Enrichment assignment\n\nUse case/limitation of IEEE 754 floating point values\nUse case of binary search\nUse case of pre-compute.",
    "crumbs": [
      "Constants"
    ]
  },
  {
    "objectID": "41_constants.html#announcements",
    "href": "41_constants.html#announcements",
    "title": "Constants",
    "section": "",
    "text": "Enrichment assignment\n\nUse case/limitation of IEEE 754 floating point values\nUse case of binary search\nUse case of pre-compute.",
    "crumbs": [
      "Constants"
    ]
  },
  {
    "objectID": "41_constants.html#homework",
    "href": "41_constants.html#homework",
    "title": "Constants",
    "section": "Homework",
    "text": "Homework\n\nSHA beckons\nDue Friday, 10 Oct. at 1440 ET.\n\nExpect it to take you both weeks.\nDo not work on this instead of that, after lab section today, until you are done with that.",
    "crumbs": [
      "Constants"
    ]
  },
  {
    "objectID": "41_constants.html#citation",
    "href": "41_constants.html#citation",
    "title": "Constants",
    "section": "Citation",
    "text": "Citation\n\nI checked my work vs. this implementation, in C++, of which I have not verified complete correctness.\nRadeelAhmad",
    "crumbs": [
      "Constants"
    ]
  },
  {
    "objectID": "41_constants.html#today",
    "href": "41_constants.html#today",
    "title": "Constants",
    "section": "Today",
    "text": "Today\n\nFloating point\nBinary search\nPre-compute",
    "crumbs": [
      "Constants"
    ]
  },
  {
    "objectID": "41_constants.html#the-constants",
    "href": "41_constants.html#the-constants",
    "title": "Constants",
    "section": "The Constants",
    "text": "The Constants\n\nfirst 3264 bits of the fractional parts of the square roots of the first 8 primes 2..19\n\n\nWait how do we calculate that?\n\n\nFloats and Square Roots\n\nThere is square root in Rust… kinda.\nf64::sqrt\nWe recall the rules on floating point:\n\n\nKernel code is normally prohibited from using floating-point (FP) registers or instructions, including the C float and double data types.\n\n\n\nThe Values\n\\[\n\\begin{align*}\n\\begin{split}\n   H_0^{(0)} = \\texttt{0x6a09e667f3bcc908}, \\quad H_1^{(0)} = \\texttt{0xbb67ae8584caa73b},\\\\\n   H_2^{(0)} = \\texttt{0x3c6ef372fe94f82b}, \\quad H_3^{(0)} = \\texttt{0xa54ff53a5f1d36f1},\\\\\n   H_4^{(0)} = \\texttt{0xa54ff53a5f1d36f1}, \\quad H_5^{(0)} = \\texttt{0x9b05688c2b3e6c1f},\\\\\n   H_6^{(0)} = \\texttt{0x1f83d9abfb41bd6b}, \\quad H_7^{(0)} = \\texttt{0x5be0cd19137e2179}.\n\\end{split}\n\\end{align*}\n\\]\n\nPerhaps this works?\n\n\n\nFirst \\(n\\) primes\n\nPrimes are annoying, mostly because 2 exists.\nI did the following:\n\nfn main() {\n    for i in [2,3,5,7,11] {\n        println!(\"{i}\");\n    }\n    let mut cnt = 5;\n    let mut val = 13;\n    while cnt &lt; 8 {\n        if is_prime(val) {\n            println!(\"{val}\");\n            cnt += 1;\n        }\n        val += 2;\n    }\n}",
    "crumbs": [
      "Constants"
    ]
  },
  {
    "objectID": "41_constants.html#square-roots",
    "href": "41_constants.html#square-roots",
    "title": "Constants",
    "section": "Square roots",
    "text": "Square roots\n\nWe can naively attempt to calculate round constants with f64::sqrt\n\ndbg!(f64::sqrt(x as f64));\n\nYou’d see something like the following:\n\nsqrt(2.0) = 1.4142135623730951\nsqrt(3.0) = 1.7320508075688772\nsqrt(5.0) = 2.23606797749979\nsqrt(7.0) = 2.6457513110645907\nsqrt(11.0) = 3.3166247903554\nsqrt(13.0) = 3.605551275463989\nsqrt(17.0) = 4.123105625617661\nsqrt(19.0) = 4.358898943540674\n\nWe should note that is pretty far from the constants!\n\n\nFractional components\n\nCompute only the fractional components of the roots:\n\nThe square root of \\(2\\) is approximately \\(1.414...\\)\nThe fractional component is \\(.414...\\)\nTo express this value in 64 bits, I can multiple by \\(2 ^ 64\\)\nTo view it as represented in the constants, I can represent the value in hexadecimal.",
    "crumbs": [
      "Constants"
    ]
  },
  {
    "objectID": "41_constants.html#floating-points",
    "href": "41_constants.html#floating-points",
    "title": "Constants",
    "section": "Floating points",
    "text": "Floating points\n\nBasically, a f64 can only store 64 bits of information.\nThis means it cannot store 64 bits worth of fractional information and also a whole number, as it must be able to do.\nThis leads to a loss of precision well before calculating 64 bits worth of precision.\nIn practice, they are implemented something like this:\n\n \n\nThis is obviously terrible",
    "crumbs": [
      "Constants"
    ]
  },
  {
    "objectID": "41_constants.html#today-1",
    "href": "41_constants.html#today-1",
    "title": "Constants",
    "section": "Today",
    "text": "Today\n\nFloating point\nBinary search\nPre-compute",
    "crumbs": [
      "Constants"
    ]
  },
  {
    "objectID": "41_constants.html#a-plan",
    "href": "41_constants.html#a-plan",
    "title": "Constants",
    "section": "A Plan",
    "text": "A Plan\n\nThat said, we can…\n\nFind the f64 approximation of the root.\nConvert back to an integer type[^1]\nCompute the square.\n\nLet’s see what this may looks like.\n\nsqrt(02) = 1.41421356 -&gt; 16a09e666 ^ 2 = 01fffffffa7a8770a4\nsqrt(03) = 1.73205081 -&gt; 1bb67ae83 ^ 2 = 02fffffff746605709\nsqrt(05) = 2.23606798 -&gt; 23c6ef370 ^ 2 = 04fffffff29bbdd100\nsqrt(07) = 2.64575131 -&gt; 2a54ff537 ^ 2 = 06ffffffee28d451d1\nsqrt(11) = 3.31662479 -&gt; 3510e527c ^ 2 = 0affffffe79823ac10\nsqrt(13) = 3.60555128 -&gt; 39b056888 ^ 2 = 0cffffffe1effec840\nsqrt(17) = 4.12310563 -&gt; 41f83d9a7 ^ 2 = 10ffffffd6ebf68af1\nsqrt(19) = 4.35889894 -&gt; 45be0cd14 ^ 2 = 12ffffffd3bf490990\n\nAn astute student will notice the following:\n\nI am printing precisely 18 hex digits for the square.\nThe lower 64 digits are very close to the maximal value.\nThe upper 2 digits are the hexadecimal representation of the prime, less one.\n\nSo we have slightly underestimated, at least in this case.\n\nI will note I can converting back to integers with 32 bits of precision then squaring with 128 bits of precision.\nThe 32 bits clip values to ensure an undercount.\nThe 128 bits ensure we do not overflow when squaring the 32 bit value.\n\nFrom there, we can conduct a binary search.\n\nFind the highest non-one value in the candidate square root.\nSet it to one.\nCheck for overflow:\n\nIf so, revert to zero.\nIf not, leave as one.\n\nLoop.",
    "crumbs": [
      "Constants"
    ]
  },
  {
    "objectID": "41_constants.html#today-2",
    "href": "41_constants.html#today-2",
    "title": "Constants",
    "section": "Today",
    "text": "Today\n\nFloating point\nBinary search\nPre-compute",
    "crumbs": [
      "Constants"
    ]
  },
  {
    "objectID": "41_constants.html#precompute",
    "href": "41_constants.html#precompute",
    "title": "Constants",
    "section": "Precompute",
    "text": "Precompute\n\nI hope it suffices to say, there is no obvious reason any application using these values need compute them.\nThis is the usefulness of precomputing constant values - or, perhaps, of numerical computing.",
    "crumbs": [
      "Constants"
    ]
  },
  {
    "objectID": "41_constants.html#today-3",
    "href": "41_constants.html#today-3",
    "title": "Constants",
    "section": "Today",
    "text": "Today\n\nFloating point\nBinary search\nPre-compute",
    "crumbs": [
      "Constants"
    ]
  },
  {
    "objectID": "32_macros.html",
    "href": "32_macros.html",
    "title": "Macros",
    "section": "",
    "text": "To complete this assignment, you must:\n\nCreate a 32 directory in your 271rs repository.\nThis folder must be a Cargo package.\nIt must leverage no other Cargo packages, namely it may not use packages for randomization.\n\ncargo new 32 --name macros --vcs none\n\n\n\n\n\nI will provide a reference solution in Python\n\nThe reference will differ in the following ways:\n\nThey will not work on bits, as there isn’t great bit manipulation in Python without libraries.\nI will provide an example of a left rotate while the assignment requires a right rotate.\n\n\nI will provide a testing src/main.rs.\n\nI will provide sample output.\n\n\n\n\n\n\nYou will create a solution in Rust\n\nIt will contain 3 macros\n\nchoice\nmedian\nrotate - a “right” rotate.\n\nYou are advised, but not required, to make left rotate.",
    "crumbs": [
      "Macros"
    ]
  },
  {
    "objectID": "32_macros.html#requirements",
    "href": "32_macros.html#requirements",
    "title": "Macros",
    "section": "",
    "text": "To complete this assignment, you must:\n\nCreate a 32 directory in your 271rs repository.\nThis folder must be a Cargo package.\nIt must leverage no other Cargo packages, namely it may not use packages for randomization.\n\ncargo new 32 --name macros --vcs none",
    "crumbs": [
      "Macros"
    ]
  },
  {
    "objectID": "32_macros.html#my-responsibility",
    "href": "32_macros.html#my-responsibility",
    "title": "Macros",
    "section": "",
    "text": "I will provide a reference solution in Python\n\nThe reference will differ in the following ways:\n\nThey will not work on bits, as there isn’t great bit manipulation in Python without libraries.\nI will provide an example of a left rotate while the assignment requires a right rotate.\n\n\nI will provide a testing src/main.rs.\n\nI will provide sample output.",
    "crumbs": [
      "Macros"
    ]
  },
  {
    "objectID": "32_macros.html#your-responsibility",
    "href": "32_macros.html#your-responsibility",
    "title": "Macros",
    "section": "",
    "text": "You will create a solution in Rust\n\nIt will contain 3 macros\n\nchoice\nmedian\nrotate - a “right” rotate.\n\nYou are advised, but not required, to make left rotate.",
    "crumbs": [
      "Macros"
    ]
  },
  {
    "objectID": "32_macros.html#description",
    "href": "32_macros.html#description",
    "title": "Macros",
    "section": "Description",
    "text": "Description\n\nThe purpose of this homework is to write four (4) bitwise macros\n\nTwo trenanry operations\n\nChoice\nMedian, also called Majority\n\nAnd two rotations\n\nRight, which sees use, and\nLeft, as an academic exercise\n\n\nThese will see use in the next assignment, SHA256\nThey are logically and historically interesting within cryptography\nThere is no graceful way, to my knowledge, to describe these on bits in Python\n\nI will provide pseudo code over tuples of integers.\nI provide conversion functions from strings.\nI am aware of plenty non-graceful ways, but\n\nIf you want to show me one you like send me a DM",
    "crumbs": [
      "Macros"
    ]
  },
  {
    "objectID": "32_macros.html#macros",
    "href": "32_macros.html#macros",
    "title": "Macros",
    "section": "Macros",
    "text": "Macros\n\nRust macros are described in Rust Book 20.5\nBasically, a macro replaces text in a .rs file before the code is compiled.\nWe will right max!\n\n\n\nsrc/main.rs\n\nlet v: Vec&lt;u32&gt; = vec![1, 2, 3];\n\n\nSuppose \\(\\exists\\) the following in lib:\n\nDo note - I wrote this multiline.\ncargo fmt pushed it onto one line!\n\n\n\nsrc/lib.rs\n\n#[macro_export]\nmacro_rules! max {\n  ( $x:expr, $y:expr ) =&gt; {\n      if $x &gt; $y { $x } else { $y }\n  };\n}\n\n\n\nThe #[macro_export] annotation indicates that this macro should be made available…\n\n\nThe body is match-like, but over text not computation.\n\nThere is only one case here: ( $x:expr, $y:expr )\nThis will be more complex than the cases you need.\n\nMacro variables are $ prefixed, to differentiate from code variables.\n\nYou can accept a fixed number, like 2, as ( %x:expr, %y:expr )\nWhere:\n\n$x and $y are variables that may be used within the macro body.\nThat match to Rust expressions (like val or 7+2) via :expr\n\n\nWe can then use the macro:\n\n\n\nsrc/main.rs\n\nfn main() {\n    dbg!(package_name_likely_macros::max!(1, 2));\n    dbg!(package_name_likely_macros::max!(2, 1));\n}\n\n\nWe see the expected result… but how?\n\n$ cargo r\n   Compiling hamming v0.1.0 (/home/user/tmp/scratch)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.22s\n     Running `target/debug/hamming`\n[src/main.rs:2:5] package_name_likely_macros::max!(1, 2) = 2\n[src/main.rs:3:5] package_name_likely_macros::max!(2, 1) = 2",
    "crumbs": [
      "Macros"
    ]
  },
  {
    "objectID": "32_macros.html#internals",
    "href": "32_macros.html#internals",
    "title": "Macros",
    "section": "Internals",
    "text": "Internals\n\nrustc comes along and sees max!\nrustc looks into package_name_likely_macros and looks for src/lib.rs\nrustc looks for macro_rules! max\nrustc matches the pattern ( $x:expr, $y:expr ) to (1, 2)\n\nAs 1 and 2 are valid Rust expressions.\n\nrustc replaces max!(1,2) with if $x &gt; $y { $x } else { $y }\nrustc replaces $x with 1 and $y with 2\nThen, at long last, rustc compiles the code and creates an executable.",
    "crumbs": [
      "Macros"
    ]
  },
  {
    "objectID": "32_macros.html#quick-exercises",
    "href": "32_macros.html#quick-exercises",
    "title": "Macros",
    "section": "Quick Exercises",
    "text": "Quick Exercises\n\nOptionally write min\nOptionally write max to accept 3 arguments.\nChallenge: write max to accept \\(n\\) arguments.\n\n( $( $x:expr ),* )",
    "crumbs": [
      "Macros"
    ]
  },
  {
    "objectID": "32_macros.html#or-majority",
    "href": "32_macros.html#or-majority",
    "title": "Macros",
    "section": "Or “Majority”",
    "text": "Or “Majority”\n\nHere I provide Pythonic boolean median and bitwise median.\nYou will need Rust bitwise median.\nI will take it as given you know what a median and majority are.\n\nLogicially equivalent with \\(n = 3\\)\n\nThe following code is appended to “macros.py”\n\n\n\n\nmacros.py\n\nimport numpy as np\n\ndef _median(e:bool, f:bool, g:bool) -&gt; bool:\n    return int(np.median([e,f,g]))\n\nprint(\" === Boolean Median === \")\n[print('_median'+str(test), '-&gt;', _median(*test)) for test in tester]\n\ndef median(e:tuple[bool], f:tuple[bool], g:tuple[bool]) -&gt; tuple[bool]:\n    return tuple(_median(_e, _f, _g) for _e, _f, _g in zip(e,f,g))\n\nprint(\" === Bitwise Median === \")\nprint('median'+bsstrs(arrays), '-&gt;', \"'\"+bitstr(median(*arrays))+\"'\")\n\n\nYou can run it yourself, but here is the output for reference.\n\n === Boolean Median === \n_median(0, 0, 0) -&gt; 0\n_median(0, 0, 1) -&gt; 0\n_median(0, 1, 0) -&gt; 0\n_median(0, 1, 1) -&gt; 1\n_median(1, 0, 0) -&gt; 0\n_median(1, 0, 1) -&gt; 1\n_median(1, 1, 0) -&gt; 1\n_median(1, 1, 1) -&gt; 1\n === Bitwise Median ===\nmedian('00001111', '00110011', '01010101') -&gt; '00010111'",
    "crumbs": [
      "Macros"
    ]
  },
  {
    "objectID": "32_macros.html#sometimes-rotright-and-rotleft",
    "href": "32_macros.html#sometimes-rotright-and-rotleft",
    "title": "Macros",
    "section": "Sometimes “Rotright and Rotleft”",
    "text": "Sometimes “Rotright and Rotleft”\n\nVirtually identical to rotation ciphers.\n\n ____________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n ____________________________\n[ DEFGHIJKLMNOPQRSTUVWXYZABC ] # rotate(3)\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n ____________________________\n[ XYZABCDEFGHIJKLMNOPQRSTUVW ] # rotate(-3)\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n\nWe understand this as:\n\nTake an array and,\nTake a numerical value…\n\nof less than the length of the array.\n\nMaintain all elements of the array, but\n\nIncrease their index by the numerical value, and\nIndices greater than array length wrap around…\n\nUsing modulo array length.\n\n\n\nWe apply this same idea to the notion of boolean arrays.\n\nA unsigned int is a boolean array of some length.\nIt is possible to determine these lengths.\n\nHere is a Python rotleft on boolean arrays of size 8.\n\n\n\nmacros.py\n\ndef rotleft(a:tuple[bool], n:int) -&gt; tuple[bool]:\n    return a[n:] + a[:n]\n\nprint(\" === Bitwise Rotleft === \")\narray = (0,0,1,0,1,1,0,1)\nfor n in range(len(arrays[0])+1):\n    print('rotleft('+bitstr(array)+','+str(n)+') -&gt;', bitstr(rotate(array,n)))\n\n\nYou can run it yourself, but here is the output for reference.\n\n === Bitwise Rotleft ===\nrotleft(00101101,0) -&gt; 00101101\nrotleft(00101101,1) -&gt; 01011010\nrotleft(00101101,2) -&gt; 10110100\nrotleft(00101101,3) -&gt; 01101001\nrotleft(00101101,4) -&gt; 11010010\nrotleft(00101101,5) -&gt; 10100101\nrotleft(00101101,6) -&gt; 01001011\nrotleft(00101101,7) -&gt; 10010110\nrotleft(00101101,8) -&gt; 00101101\n\nWe note that this forms a “backward” or “leftward” rotate.\n\nThis is a non-standard rotate, often called lotate or rotleft\nA future assignment will use a “forward” or “rightward” rotate.\n\nWithout showing code, it would look like this.\n\n === Bitwise Rotate ===\nrotate(00101101,0) -&gt; 00101101\nrotate(00101101,1) -&gt; 10010110\nrotate(00101101,2) -&gt; 01001011\nrotate(00101101,3) -&gt; 10100101\nrotate(00101101,4) -&gt; 11010010\nrotate(00101101,5) -&gt; 01101001\nrotate(00101101,6) -&gt; 10110100\nrotate(00101101,7) -&gt; 01011010\nrotate(00101101,8) -&gt; 00101101",
    "crumbs": [
      "Macros"
    ]
  },
  {
    "objectID": "32_macros.html#overflow",
    "href": "32_macros.html#overflow",
    "title": "Macros",
    "section": "Overflow",
    "text": "Overflow\n\nRust appears to implement some shifting operations a bit differently that other languages.\nRead this\nLook at this:\n\n($x.checked_shr($y).unwrap_or(0))\n\nThat r in shr is for right.",
    "crumbs": [
      "Macros"
    ]
  },
  {
    "objectID": "30_bits.html",
    "href": "30_bits.html",
    "title": "Bits",
    "section": "",
    "text": "Action Items:\n\nWordle for Friday\n“Macros” assignment ready after class.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#announcements",
    "href": "30_bits.html#announcements",
    "title": "Bits",
    "section": "",
    "text": "Action Items:\n\nWordle for Friday\n“Macros” assignment ready after class.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#today",
    "href": "30_bits.html#today",
    "title": "Bits",
    "section": "Today",
    "text": "Today\n\nEncoding\n\nBytes\nBitwise operators\nEndianness",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#good-at",
    "href": "30_bits.html#good-at",
    "title": "Bits",
    "section": "“Good at”",
    "text": "“Good at”\n\nComputers “are good at” storing numerical data.\n\nAt a high level numerical computing\n\nNumPy / Numba\nJulia\nFortran\n\n\nThese languages excel at wide ranges of mathematical operations, ranging from addition to solving systems of differential equations.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#good-at-1",
    "href": "30_bits.html#good-at-1",
    "title": "Bits",
    "section": "“Good at”",
    "text": "“Good at”\n\nElectronics are good at propagating signals, which we often view as ordered collections of zeros and ones.\n\nAt a lower level processing\n\nC and to a lesser degree C++\nAssembly, like AMD/Intel x86 or IBM PowerPC\nRust\n\n\nThese languages often have weaker support for say, trigonometry and better support for reading files of arbitrary types, including not just .csv files but e.g. readings from radio telescopes.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#low-level-languages",
    "href": "30_bits.html#low-level-languages",
    "title": "Bits",
    "section": "Low-level languages",
    "text": "Low-level languages\n\nRust is among the group of languages good at working close to the “hardware-software interface”\nMany design in decisions in Rust, such as in how Rust read file data /dev/random, reflect this:\n\nusize::from_ne_bytes(buffer);\n\nDirect references to bytes (or bits) are uncommon but present in higher level languages, and increase in popularity in languages that give more control to programs over how the device operates.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#bit-manipulation",
    "href": "30_bits.html#bit-manipulation",
    "title": "Bits",
    "section": "Bit Manipulation",
    "text": "Bit Manipulation\n\nOne common application of lower-level programming is to precisely control the values of individual bits within a byte.\n\n\n\n\n\n\n\nNote\n\n\n\nA byte is a hardware idea - an ordered collection of 8 bits, which themselves are hardware units either containing, or lacking, some electrical charge. We view them as storing zeros or ones.\n\n\n\nImportantly, while we can refer to bits or bytes in software, versus types like integers or strings, we are describing actual physical phenomena rather than mathematical abstractions.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#support",
    "href": "30_bits.html#support",
    "title": "Bits",
    "section": "Support",
    "text": "Support\n\nLow level support is provided most commonly through two features:\n\nA type to represent a byte or bytes.\nBitwise operators - operators like the arithmetic infix operators + or - but that perform operations on pairs of bits rather than pairs of numeric values.\n\nWe explore each in Rust.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#bytes-1",
    "href": "30_bits.html#bytes-1",
    "title": "Bits",
    "section": "Byte(s)",
    "text": "Byte(s)\n\nBytes are referenced by name within in Rust std in a few places, though there is no formal byte type.\nInstead, u8 is used.\n\nThis is common - there is little meaningful difference between 8 bits pretending to be a number and 8 bits that aren’t doing anything in particular.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#bytes-2",
    "href": "30_bits.html#bytes-2",
    "title": "Bits",
    "section": "Bytes",
    "text": "Bytes\n\nBytes are referenced, both as the function bytes and the data structure Bytes\n\nThe function produces a Rust iterator the produces u8 values.\n\nIn other cases, such as as_bytes, an array of u8 is often used (expressed as [u8]).\nIn any case, collections of u8s.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#example",
    "href": "30_bits.html#example",
    "title": "Bits",
    "section": "Example",
    "text": "Example\n\nReally, there is no better example than just grabbing some random bits from /dev/random and taking a peek.\nRust helpfully supports printing in binary, using the b format code, to see the individual zeroes and ones of a byte or bytes.\n\nlet mut devrnd = std::fs::File::open(\"/dev/urandom\").unwrap();\nlet mut buffer = [0u8; (usize::BITS / 8) as usize];\nstd::io::Read::read_exact(&mut devrnd, &mut buffer).unwrap();\nlet sample = usize::from_ne_bytes(buffer);\nprintln!(\"{:b}\", sample);",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#test-it",
    "href": "30_bits.html#test-it",
    "title": "Bits",
    "section": "Test it",
    "text": "Test it\n\nYou can run a few times to see what a random bitstring (ordered collection of bits) looks like when using :b\n\n\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\n1000111011010011001001000110100010011010101101010111100001010101\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\n1010101000100001011000111011111111011110010001010010101000111010\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\n1001110000001001110011100111110010010101110000010111010111110011\n\u0016",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#simplify",
    "href": "30_bits.html#simplify",
    "title": "Bits",
    "section": "Simplify",
    "text": "Simplify\n\nTo introduce operators, we’ll use only single u8s, just for simplicity.\n\nlet mut devrnd = std::fs::File::open(\"/dev/urandom\").unwrap();\nlet mut buffer = [0u8; 2];\nstd::io::Read::read_exact(&mut devrnd, &mut buffer).unwrap();\nlet x = buffer[0];\nlet y = buffer[1];\nprintln!(\"x = {x:08b}, y = {y:08b}\");\n\nBy default, :b doesn’t render leading zeros, which is fine for numbers but not great for bytes.\nUse :08b - where 0 specifies to have leading zeros, and 8 specifies how many digits.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#fixed",
    "href": "30_bits.html#fixed",
    "title": "Bits",
    "section": "Fixed",
    "text": "Fixed\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\nx = 00101010, y = 01100111\n\nWith the benefit of some bits, we can explore operators.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#operator-reference",
    "href": "30_bits.html#operator-reference",
    "title": "Bits",
    "section": "Operator Reference",
    "text": "Operator Reference\n\nRust doesn’t clearly delineate bitwise from other operators.\n\nThis is pretty reasonable: “bitwise” is something of a social convention.\n\nThe overall operator reference I follow is Rust Book Appendix B\nThe next slide lifts a subset of a .md table on that page.\n\nI have included both named bitwise operators and also “shifts”, which are a bit (heh) different.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#bitwise",
    "href": "30_bits.html#bitwise",
    "title": "Bits",
    "section": "Bitwise",
    "text": "Bitwise\n\n\n\n\n\n\n\n\nOperator\nExample\nExplanation\n\n\n\n\n!\n!expr\nBitwise or logical complement\n\n\n&\nexpr & expr\nBitwise AND\n\n\n&lt;&lt;\nexpr &lt;&lt; expr\nLeft-shift\n\n\n&gt;&gt;\nexpr &gt;&gt; expr\nRight-shift\n\n\n^\nexpr ^ expr\nBitwise exclusive OR\n\n\n|\nexpr | expr\nBitwise OR",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#conceptual-model",
    "href": "30_bits.html#conceptual-model",
    "title": "Bits",
    "section": "Conceptual Model",
    "text": "Conceptual Model\n\nOne way to model how the bitwise operators is to:\n\nImagine a byte as an ordered collection of bits\n\nLike a list, array, or vector\n\nImagine a bit as a boolean.\n\nZero/one is equally meaningful to False/True\n\nLoop a logical operator over the booleans.\n\nWe will demonstrate first in Python then in Rust.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#python-demo---bytes",
    "href": "30_bits.html#python-demo---bytes",
    "title": "Bits",
    "section": "Python Demo - Bytes",
    "text": "Python Demo - Bytes\n\nWe create two bytes using np.uint8.\n\nfrom numpy import uint8 as byte\n\nx, y = byte(0x0F), byte(0x33)\n\nBinary representation using bin or :b\n\nprint('x = {:08b}, y = {:08b}'.format(x,y))\n\nYou’ll see x = 00001111, y = 00110011",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#python-bit-xor",
    "href": "30_bits.html#python-bit-xor",
    "title": "Bits",
    "section": "Python Bit XOR",
    "text": "Python Bit XOR\n\nWe can use Pythonic “Bitwise exclusive OR”\n\nprint('{:08b} ^ {:08b} = {:08b}'.format(x, y, x ^ y))\n\nWhat do we see?\n\n00001111 ^ 00110011 = 00111100\n\nWhy?",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#boolean-arrays",
    "href": "30_bits.html#boolean-arrays",
    "title": "Bits",
    "section": "Boolean arrays",
    "text": "Boolean arrays\n\nConvert the bytes to arrays of booleans.\nVia string representation:\n\nto_bool_str = lambda x : [c == '1' for c in `{.08b}.format(x)]\n\nVia numeric representation, which requires a reversal:\n\nto_bool_num = lambda x : [1 == (x // 2 ** i) % 2 for i in range(8)][::-1]",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#logical-xor",
    "href": "30_bits.html#logical-xor",
    "title": "Bits",
    "section": "Logical XOR",
    "text": "Logical XOR\n\nPython lacks logical XOR as it is equivalent to !=\n\n# Print a truth table in markdown\nprint(\"| x   | y   | x!=y| x^y |\")\nprint(\"|-----|-----|-----|-----|\")\nfor left in (True, False):\n    for rite in (True, False):\n        print('|{:&lt;5}|{:&lt;5}|{:&lt;5}|{:&lt;5}|'.format(*[str(b) for b in [left, rite, left != rite, left ^ rite]]))\n\nHorizontally aligned:\n\n| x   | y   | x!=y| x^y |\n|-----|-----|-----|-----|\n|True |True |False|False|\n|True |False|True |True |\n|False|True |True |True |\n|False|False|False|False|",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#map-xor",
    "href": "30_bits.html#map-xor",
    "title": "Bits",
    "section": "Map XOR",
    "text": "Map XOR\n\nApply XOR to each element of the boolean arrays.\nWe would get the same numerical presentation.\n\nprint(to_bool_num(x ^ y))\nprint([a != b for a, b in zip(to_bool_num(x),to_bool_num(y))])\n\nBoth will yield the same boolean array.\n\n[True, True, False, False, False, False, True, True]",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#all-operators",
    "href": "30_bits.html#all-operators",
    "title": "Bits",
    "section": "All operators",
    "text": "All operators\n\nWe can loop over all operators to inspect them visually.\n\nfrom operator import and_, or_ , xor\n\nfor op in [and_, or_ , xor]:\n    print('f({:08b}, {:08b}) = {:08b} for f ='.format(x, y, op(x,y)), op)\n\nnot is similar but unary.\n\nprint('~{:08b} = {:08b}'.format(x, ~x))\n\nSo:\n\nf(11110000, 00110011) = 00110000 for f = &lt;built-in function and_&gt;\nf(11110000, 00110011) = 11110011 for f = &lt;built-in function or_&gt;\nf(11110000, 00110011) = 11000011 for f = &lt;built-in function xor&gt;\n~11110000 = 00001111",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#rust-operators",
    "href": "30_bits.html#rust-operators",
    "title": "Bits",
    "section": "Rust operators",
    "text": "Rust operators\n\nMore common convention to use ! for not (vs. ~)\nI’m not great with Rust format codes yet, so a bit silly.\n\n\n\nsrc/main.rs\n\nfn main() {\n    let mut devrnd = std::fs::File::open(\"/dev/urandom\").unwrap();\n    let mut buffer = [0u8; 2];\n    std::io::Read::read_exact(&mut devrnd, &mut buffer).unwrap();\n    let x = buffer[0];\n    let y = buffer[1];\n    let mut z = x | y;\n    println!(\"x = {x:08b}, y = {y:08b}, x | y = {z:08b}\");\n    z = x ^ y;\n    println!(\"x = {x:08b}, y = {y:08b}, x ^ y = {z:08b}\");\n    z = x & y;\n    println!(\"x = {x:08b}, y = {y:08b}, x & y = {z:08b}\");\n    let y = !buffer[0];\n    println!(\"x = {x:08b},!x = {y:08b}\");\n}",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#run-it",
    "href": "30_bits.html#run-it",
    "title": "Bits",
    "section": "Run it",
    "text": "Run it\n\nSee how different random bits are combined!\n\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\nx = 01110000, y = 10001110, x | y = 11111110\nx = 01110000, y = 10001110, x ^ y = 11111110\nx = 01110000, y = 10001110, x & y = 00000000\nx = 01110000,!x = 10001111\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\nx = 10111111, y = 00110110, x | y = 10111111\nx = 10111111, y = 00110110, x ^ y = 10001001\nx = 10111111, y = 00110110, x & y = 00110110\nx = 10111111,!x = 01000000",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#why",
    "href": "30_bits.html#why",
    "title": "Bits",
    "section": "Why?",
    "text": "Why?\n\n\n\nImagine thinking in digits.\nTo store a ~3 digit number, need \\(3 \\times 10 = 30\\) “things” that can hold a number.\n\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n10^0\n\n10^1\n\n10^2\n\n\n\nstruct0\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n\n\nstruct:0-&gt;struct0\n\n\n\n\n\nstruct1\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n\n\nstruct:1-&gt;struct1\n\n\n\n\n\nstruct2\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n\n\nstruct:2-&gt;struct2",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#binary",
    "href": "30_bits.html#binary",
    "title": "Bits",
    "section": "Binary",
    "text": "Binary\n\nWe are familiar with binary encoding.\nWe note: \\(\\log_2(999) \\lt 10\\)\nDecimal encoding squanders \\(\\dfrac{2}{3}\\) of it’s storage space.\nSo we store in binary.\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n2^0\n\n2^1\n\n2^2\n\n2^3\n\n2^4\n\n2^5\n\n2^6\n\n2^7\n\n2^8\n\n2^9\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#binary-1",
    "href": "30_bits.html#binary-1",
    "title": "Bits",
    "section": "Binary",
    "text": "Binary\n\nThe benefit here is that is sufficient to note the presence or absence of a digit (1)\nVersus the specific digit \\(\\in [1,9]\\) and presence of absense (0)\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n2^0\n\n2^1\n\n2^2\n\n2^3\n\n2^4\n\n2^5\n\n2^6\n\n2^7\n\n2^8\n\n2^9\n\n \n\n1\n\n \n\n \n\n1\n\n1\n\n \n\n \n\n1",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#wait-a-minute.",
    "href": "30_bits.html#wait-a-minute.",
    "title": "Bits",
    "section": "Wait a minute.",
    "text": "Wait a minute.\n\n\n\nWhy is the ones digit (\\(n^0\\)) leftmost ?\n\nThe “least significant bit” or LSB\n\nIn e.g. English place the LSB last.\n\nCS 271 ⇒\n\n\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n10^0\n\n10^1\n\n10^2\n\n\n\nstruct0\n\n \n\n1\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\n\nstruct:0-&gt;struct0\n\n\n\n\n\nstruct1\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n7\n\n \n\n \n\n\n\nstruct:1-&gt;struct1\n\n\n\n\n\nstruct2\n\n \n\n \n\n2\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\n\nstruct:2-&gt;struct2",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#languages",
    "href": "30_bits.html#languages",
    "title": "Bits",
    "section": "Languages",
    "text": "Languages\n\nIn e.g. spoken word, makes sense to lead with the biggest value.\n\n200 of something is closer to 299 of something than 0 of something is to 9 of something.\n\nIn e.g. programming, we often lead with lowest numerical index.\n\nWe look at the arr[0] of something before the arr[1] of something.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#in-practice",
    "href": "30_bits.html#in-practice",
    "title": "Bits",
    "section": "In Practice",
    "text": "In Practice\n\nWe end up with\n\n\"271\"[0] == '2' and 271 % (10 ** 1) == 1\n\nConfusing!\n\nRecall:\n\n# Strings are not reversed.\nto_bool_str = lambda x : [c == '1' for c in `{.08b}.format(x)]\n# Numerics are reversed.\nto_bool_num = lambda x : [1 == (x // 2 ** i) % 2 for i in range(8)][::-1]",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#annoyance",
    "href": "30_bits.html#annoyance",
    "title": "Bits",
    "section": "Annoyance",
    "text": "Annoyance\n\nThis gets very annoying when trying to move numbers around that don’t quite fit in some number of bits.\n\nSay I have 0x1234 followers on Instagram📷\nBoycott Meta etc etc.\nAnd/or follow me @calvinallegedly\n\n$ python3 -c \"print(0x1234)\"\n4660\nAlso imagine it is 1969 and you only have 8 bit integers.\n\nOnly 2 digits in hexadecimal representation.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#stdin",
    "href": "30_bits.html#stdin",
    "title": "Bits",
    "section": "Stdin",
    "text": "Stdin\n\nWe can use stdin and read_line to read in some values.\nRecall:\n\nlet mut guess = String::new();\nstd::io::stdin().read_line(&mut guess).unwrap();",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#test",
    "href": "30_bits.html#test",
    "title": "Bits",
    "section": "Test",
    "text": "Test\n\nTest it\n\n\n\nsrc/main.rs\n\nfn main() {\n    let mut guess = String::new();\n    std::io::stdin().read_line(&mut guess).unwrap();\n    println!(\"{:?}\", guess);\n}\n\n\ncargo run -&gt; type some nonsense -&gt; press ENTER\n\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\nsome nonsense\n\"some nonsense\\n\"\n$",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#hex-reader",
    "href": "30_bits.html#hex-reader",
    "title": "Bits",
    "section": "Hex reader",
    "text": "Hex reader\n\nTo read in hexadecimal values we must:\n\nRead in the string.\nBreak into chunks.\nConvert 2 character chunks to numerical values",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#to-characters",
    "href": "30_bits.html#to-characters",
    "title": "Bits",
    "section": "To characters",
    "text": "To characters\n\nWe’ll just iterate over the characters and print them in pairs.\n\n\n\nsrc/main.rs\n\nfn main() {\n    let mut guess = String::new();\n    std::io::stdin().read_line(&mut guess).unwrap();\n    let mut flip = false;\n    for c in guess.chars() {\n        if flip {\n            println!(c);\n        } else {\n            print!(c);\n        }\n        flip = !flip;\n    println!(\"{:?}\", guess);\n}",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#test-it-1",
    "href": "30_bits.html#test-it-1",
    "title": "Bits",
    "section": "Test it",
    "text": "Test it\n\nWorks sometimes better than others\n\n$ cargo run\n   Compiling scratch v0.1.0 (/home/user/tmp/scratch)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.23s\n     Running `target/debug/scratch`\n0x1234\n0x\n12\n34\n\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\n0x123\n0x\n12\n3",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#missing-pieces",
    "href": "30_bits.html#missing-pieces",
    "title": "Bits",
    "section": "Missing pieces",
    "text": "Missing pieces\n\nWe need to throw out the prefix\nWe need to make sure we begin, rather than end, on a possible singleton.\nHere’s the plan:\n\nSkip the first two\nTraverse to the end of string.\nBuild doubles back up.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#skip",
    "href": "30_bits.html#skip",
    "title": "Bits",
    "section": "Skip",
    "text": "Skip\n\nWe can apply next() to an iterator to read characters.\nIt’s basically a pop operation.\n\n\n\nsrc/main.rs\n\nfn main() {\n    let mut guess = String::new();\n    std::io::stdin().read_line(&mut guess).unwrap();\n    let mut flip = false;\n    let mut cs = guess.chars();\n    cs.next() // 0\n    cs.next() // x\n    for c in cs {\n        if flip {\n            println!(c);\n        } else {\n            print!(c);\n        }\n        flip = !flip;\n    println!(\"{:?}\", guess);\n}",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#build-up",
    "href": "30_bits.html#build-up",
    "title": "Bits",
    "section": "Build up",
    "text": "Build up\n\nFrom there we just need to get pairs somehow.\nIt’s not too bad to get the last character…\n\nfn last(cs:std::str::Chars) -&gt; char {\n    let mut final = cs.next()\n    for c in cs {\n        final = c;\n    }\n    return final;\n}",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#uh-oh",
    "href": "30_bits.html#uh-oh",
    "title": "Bits",
    "section": "Uh oh!",
    "text": "Uh oh!\n\nWhen looping over an iterator, we get the type itself.\n\nThe loop just terminates when it has no more elements.\n\nWhen calling .next(), we get an option.\n\nThere is not always a .next() element.\n\nerror[E0308]: mismatched types\n --&gt; src/main.rs:4:16\n|\n2 |     let mut last = cs.next();\n|                    --------- expected due to this value\n3 |     for c in cs {\n4 |         last = c;\n|                ^ expected `Option&lt;char&gt;`, found `char`",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#recurse",
    "href": "30_bits.html#recurse",
    "title": "Bits",
    "section": "Recurse",
    "text": "Recurse\nfn last(mut cs:std::str::Chars) -&gt; Option&lt;char&gt; {\n    return match cs.next() {\n        Some(n) =&gt; match last(cs) {  // if there's digits here, look for more\n            Some(m) =&gt; Some(m),      // if the last is found, return it\n            None =&gt; Some(n),         // no more letters - we are last, return n\n        },\n        None =&gt; None,                // required by `rustc` in case we don't input anything\n    }\n}",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#try-it-out",
    "href": "30_bits.html#try-it-out",
    "title": "Bits",
    "section": "Try it out!",
    "text": "Try it out!\n$ cargo run\n   Compiling scratch v0.1.0 (/home/user/tmp/scratch)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.22s\n     Running `target/debug/scratch`\n0x1234\nSome('\\n')\n\nWhoops! Forgot the newline… match Some('\\n') to None\n\nfn last(mut cs:std::str::Chars) -&gt; Option&lt;char&gt; {\n    return match cs.next() {\n        Some('\\n') =&gt; None,",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#pair-it-up",
    "href": "30_bits.html#pair-it-up",
    "title": "Bits",
    "section": "Pair it up",
    "text": "Pair it up\n\nLet’s find the last two values.\nWe already found the last one, just now if we’ve found it, pair it up and print it.\n\nfn last(mut cs:std::str::Chars) -&gt; Option&lt;char&gt; {\n    return match cs.next() {\n        Some(n) =&gt; match last(cs) {  // if there's digits here, look for more\n            Some(m) =&gt; {\n                println!(\"{n}{m}\");  // If last is found, print this then last\n                Some(m),             // if the last is found, return it\n            None =&gt; Some(n),         // no more letters - we are last, return n\n        },\n        None =&gt; None,                // required by `rustc` in case we don't input anything\n    }\n}",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#whoops",
    "href": "30_bits.html#whoops",
    "title": "Bits",
    "section": "Whoops!",
    "text": "Whoops!\n\nWe print every digit paired with the last one!\n\n$ cargo run\n   Compiling scratch v0.1.0 (/home/user/tmp/scratch)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.23s\n     Running `target/debug/scratch`\n0x1234\n34\n24\n14\nSome('4')\n\nWe can:\n\nRemove the print from main\nReturn None after printing a pair.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#altogether",
    "href": "30_bits.html#altogether",
    "title": "Bits",
    "section": "Altogether",
    "text": "Altogether\n\n\n\nRename last to pairs\nPrint single digits in main\n\nUse if let - kind of a single pattern match.\n\n\n\n\n\nsrc/main.rs\n\nfn pairs(mut cs:std::str::Chars) -&gt; Option&lt;char&gt; {\n    return match cs.next() {\n        Some('\\n') =&gt; None,\n        Some(n) =&gt; match pairs(cs) {\n            Some(m) =&gt; {\n                println!(\"{n}{m}\");\n                None\n            }\n            None =&gt; Some(n),\n        },\n        None =&gt; None,\n    }\n}\n\nfn main() {\n    let mut guess = String::new();\n    std::io::stdin().read_line(&mut guess).unwrap();\n    let mut cs = guess.chars();\n    cs.next();\n    cs.next();\n    if let Some(n) = pairs(cs) {\n        println!(\"{n}\");\n    }\n}",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#just-parse-nm",
    "href": "30_bits.html#just-parse-nm",
    "title": "Bits",
    "section": "Just parse {n}{m}",
    "text": "Just parse {n}{m}\n\nThe built-in is from_str_radix for e.g. u8.\n\nTurn characters into singleton strings..\n(We could pattern match '1' =&gt; 1 instead)\n\n\nfn two_hex(n:char, m:char) -&gt; u8 {\n    let n = u8::from_str_radix(&n.to_string(), 16).unwrap();\n    let m = u8::from_str_radix(&m.to_string(), 16).unwrap();\n    return n * 16 + m;\n}",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#bundle-into-a-vector",
    "href": "30_bits.html#bundle-into-a-vector",
    "title": "Bits",
    "section": "Bundle into a vector",
    "text": "Bundle into a vector\n\nWe introduce vectors.\n\nSo close to a Pythonic &lt;class 'list'&gt; I can’t tell the difference.\n\nVs. printing, toss numeric values into a vectors.\nThis is slightly complicated by the fact that, uh…\n\nfn pairs(mut cs:std::str::Chars) -&gt; Option&lt;char&gt; {\n\nThere’s no vector there!\n\nCan’t just return it (because we’re using recursion #based)",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#create-vectors",
    "href": "30_bits.html#create-vectors",
    "title": "Bits",
    "section": "Create vectors",
    "text": "Create vectors\n\nTrue to form in Rust, vectors require specific initialization as they are data structure.\n\nIn this way they are like big S Strings with String::new()\n\nWe can use Vec::new() or the macro vec!. Read more\n\nlet mut vec1 = vec![1, 2, 3];\nvec1.push(4);\nlet vec2 = Vec::from([1, 2, 3, 4]);\nassert_eq!(vec1, vec2);",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#sketch",
    "href": "30_bits.html#sketch",
    "title": "Bits",
    "section": "Sketch",
    "text": "Sketch\n\nLet’s convert pairs to a helper function.\nLet’s move the odd case handlying from main to a wrapper function.\n\nAnd also popping the first two vals.\n\nLet’s initialize a mutable vector in the wrapper.\nWe’ll maintain the return type of pairs but add an argument.\nWe’ll return the vector from the wrapper.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#wrapper",
    "href": "30_bits.html#wrapper",
    "title": "Bits",
    "section": "Wrapper",
    "text": "Wrapper\n\n\nfn chars_to_vec(mut cs:std::str::Chars) -&gt; Vec&lt;u8&gt; {\n    let mut vals = Vec::new();\n    // from old main\n    cs.next();\n    cs.next();\n    if let Some(n) = pairs(cs, &mut vals) {\n        vals.push(two_hex('0', n));\n    }\n    // \"Prints and returns the value of a given\n    // expression for quick and dirty debugging.\"\n    dbg!(&vals);\n    return vals;\n}\n\n\nCreate a vector.\nLet pairs “borrow” the vector mutably - so it can add stuff.\n\n\n\n\nLet dbg! “borrow” the vector to print it.\nReturn the vector when you’re done!",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#vector-handling",
    "href": "30_bits.html#vector-handling",
    "title": "Bits",
    "section": "Vector handling",
    "text": "Vector handling\nfn pairs(mut cs:std::str::Chars, vals:&mut Vec&lt;u8&gt;) -&gt; Option&lt;char&gt; {\n    return match cs.next() {\n        Some('\\n') =&gt; None,\n        Some(n) =&gt; match pairs(cs, vals) {\n            Some(m) =&gt; {\n                vals.push(two_hex(n,m));  // only change\n                None\n            },\n            None =&gt; Some(n),\n        },\n        None =&gt; None,\n    }\n}\n\nAdd a “borrowed mutable vector argument”\nPush some u8s into it.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#how-do-we-feel-about-this",
    "href": "30_bits.html#how-do-we-feel-about-this",
    "title": "Bits",
    "section": "How do we feel about this?",
    "text": "How do we feel about this?\n$ cargo r\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\n0x01020304\n[src/main.rs:10:5] &vals = [\n    4,\n    3,\n    2,\n    1,\n]",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#quoth-wikipedia",
    "href": "30_bits.html#quoth-wikipedia",
    "title": "Bits",
    "section": "Quoth Wikipedia",
    "text": "Quoth Wikipedia\n\nIn computing, endianness is the order in which bytes within a word data type are transmitted over a data communication medium or addressed in computer memory, counting only byte significance compared to earliness.\n\n\nWe can regard our vector as a 32 bit word of 4 bytes.\nWe can regard the indices (0..4) as the addresses in computer memory.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#two-endians",
    "href": "30_bits.html#two-endians",
    "title": "Bits",
    "section": "Two endians",
    "text": "Two endians\n\nA big-endian system stores the most significant byte (MSB) of a word at the smallest memory address and the least significant byte (LSB) at the largest.\n\n\nA little-endian system, in contrast, stores the least-significant byte (LSB) at the smallest address.\n\n\nIn 0x01020304, the MSB is 1, and LSB is 4\n[4, 3, 2, 1], the smallest memory address contains a 4.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#arrays-to-numbers",
    "href": "30_bits.html#arrays-to-numbers",
    "title": "Bits",
    "section": "Arrays to Numbers",
    "text": "Arrays to Numbers\n\nWe can reverse the operation by:\n\nLooping over the array.\nMultiplying by the numerical base, some power of two\nAdding up the different values.\n\n\u0016fn custom_u8s_to_u32(vals : Vec&lt;u8&gt;) -&gt; u32 {\n  // We'll just take the first four for now\n  let mut ret : u32 = 0;\n  for i in 0..4 {\n      dbg!((i, vals[i]));\n      ret += (vals[i] as u32) * ((2 as u32).pow(8 * (i as u32)));\n  }\n  return ret;\n}",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#try-it-out-1",
    "href": "30_bits.html#try-it-out-1",
    "title": "Bits",
    "section": "Try it out",
    "text": "Try it out\n\n\n\nRemember to update main\n\nlet vals = chars_to_vec(cs);\nlet val = custom_u8s_to_u32(vals);\nprintln!(\"{:x}\", val); // hex\n\n$ cargo r\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\n0x01020304\n[src/main.rs:10:5] &vals = [\n    4,\n    3,\n    2,\n    1,\n]\n[src/main.rs:38:9] (i, vals[i]) = (\n    0,\n    4,\n)\n[src/main.rs:38:9] (i, vals[i]) = (\n    1,\n    3,\n)\n[src/main.rs:38:9] (i, vals[i]) = (\n    2,\n    2,\n)\n[src/main.rs:38:9] (i, vals[i]) = (\n    3,\n    1,\n)\n1020304",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#wait-a-minute",
    "href": "30_bits.html#wait-a-minute",
    "title": "Bits",
    "section": "Wait a minute",
    "text": "Wait a minute\n\nIsn’t this terrible?\n\nret += (vals[i] as u32) * ((2 as u32).pow(8 * (i as u32)));\n\nThere must be a better way.",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#shifts",
    "href": "30_bits.html#shifts",
    "title": "Bits",
    "section": "Shifts",
    "text": "Shifts\n\nThe remaining bitwise operator is the shift\n\nBitwise because it works on bits, but\nTakes two arguments:\n\nThe bits to “shift”\nA numerical value encoding how much “shift”",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#script-it",
    "href": "30_bits.html#script-it",
    "title": "Bits",
    "section": "Script it",
    "text": "Script it\n\nPython shift is &lt;&lt; (well, left shift)\n\npython3 -c \"[print('{} {:03d} {:08b}'.format(x, 1 &lt;&lt; x, 1 &lt;&lt; x)) for x in range(8)]\"\n\nI got:\n\n0 001 00000001\n1 002 00000010\n2 004 00000100\n3 008 00001000\n4 016 00010000\n5 032 00100000\n6 064 01000000\n7 128 10000000",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#shift-it",
    "href": "30_bits.html#shift-it",
    "title": "Bits",
    "section": "Shift it",
    "text": "Shift it\nfn custom_u8s_to_u32(vals : Vec&lt;u8&gt;) -&gt; u32 {\n    // We'll just take the first four for now\n    let mut ret : u32 = 0;\n    for i in 0..4 {\n        dbg!((i, vals[i]));\n        ret += (vals[i] as u32) &lt;&lt; (8 * i);\n    }\n    return ret;\n}\n\nMuch better!\nSaves an as u32!",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#today-1",
    "href": "30_bits.html#today-1",
    "title": "Bits",
    "section": "Today",
    "text": "Today\n\nEncoding\n\nBytes\nBitwise operators\nEndianness",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#bonus",
    "href": "30_bits.html#bonus",
    "title": "Bits",
    "section": "Bonus",
    "text": "Bonus\n\nCourtesy Indi of CS Student Assoc.\n\nfn pairs(mut cs: std::str::Chars, vals: &mut Vec&lt;u8&gt;) -&gt; Option&lt;char&gt; {\n    return match cs.next()? {\n        '\\n' =&gt; None,\n        n =&gt; pairs(cs, vals).map_or(Some(n), |m| {\n            vals.push(two_hex(n, m));\n            None\n        }),\n    };\n}",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.html#bonus-1",
    "href": "30_bits.html#bonus-1",
    "title": "Bits",
    "section": "Bonus",
    "text": "Bonus\n\nCourtesy Indi of CS Student Assoc.\n\nfn pairs(cs: std::str::Chars, vals: &mut Vec&lt;u8&gt;) -&gt; Option&lt;char&gt; {\n    cs.rev()\n        .filter(|c| *c != '\\n')\n        .collect::&lt;Vec&lt;_&gt;&gt;()\n        .chunks(2)\n        .for_each(|x| vals.push(two_hex(x[1], x[0])));\n    return None;\n}",
    "crumbs": [
      "Bits"
    ]
  },
  {
    "objectID": "30_bits.rjs.html#announcements",
    "href": "30_bits.rjs.html#announcements",
    "title": "Bits",
    "section": "Announcements",
    "text": "Announcements\n\nAction Items:\n\nWordle for Friday\n“Macros” assignment ready after class."
  },
  {
    "objectID": "30_bits.rjs.html#today",
    "href": "30_bits.rjs.html#today",
    "title": "Bits",
    "section": "Today",
    "text": "Today\n\nEncoding\n\nBytes\nBitwise operators\nEndianness"
  },
  {
    "objectID": "30_bits.rjs.html#good-at",
    "href": "30_bits.rjs.html#good-at",
    "title": "Bits",
    "section": "“Good at”",
    "text": "“Good at”\n\nComputers “are good at” storing numerical data.\n\nAt a high level numerical computing\n\nNumPy / Numba\nJulia\nFortran\n\n\nThese languages excel at wide ranges of mathematical operations, ranging from addition to solving systems of differential equations."
  },
  {
    "objectID": "30_bits.rjs.html#good-at-1",
    "href": "30_bits.rjs.html#good-at-1",
    "title": "Bits",
    "section": "“Good at”",
    "text": "“Good at”\n\nElectronics are good at propagating signals, which we often view as ordered collections of zeros and ones.\n\nAt a lower level processing\n\nC and to a lesser degree C++\nAssembly, like AMD/Intel x86 or IBM PowerPC\nRust\n\n\nThese languages often have weaker support for say, trigonometry and better support for reading files of arbitrary types, including not just .csv files but e.g. readings from radio telescopes."
  },
  {
    "objectID": "30_bits.rjs.html#low-level-languages",
    "href": "30_bits.rjs.html#low-level-languages",
    "title": "Bits",
    "section": "Low-level languages",
    "text": "Low-level languages\n\nRust is among the group of languages good at working close to the “hardware-software interface”\nMany design in decisions in Rust, such as in how Rust read file data /dev/random, reflect this:\n\nusize::from_ne_bytes(buffer);\n\nDirect references to bytes (or bits) are uncommon but present in higher level languages, and increase in popularity in languages that give more control to programs over how the device operates."
  },
  {
    "objectID": "30_bits.rjs.html#bit-manipulation",
    "href": "30_bits.rjs.html#bit-manipulation",
    "title": "Bits",
    "section": "Bit Manipulation",
    "text": "Bit Manipulation\n\nOne common application of lower-level programming is to precisely control the values of individual bits within a byte.\n\n\n\n\n\n\n\nNote\n\n\nA byte is a hardware idea - an ordered collection of 8 bits, which themselves are hardware units either containing, or lacking, some electrical charge. We view them as storing zeros or ones.\n\n\n\n\nImportantly, while we can refer to bits or bytes in software, versus types like integers or strings, we are describing actual physical phenomena rather than mathematical abstractions."
  },
  {
    "objectID": "30_bits.rjs.html#support",
    "href": "30_bits.rjs.html#support",
    "title": "Bits",
    "section": "Support",
    "text": "Support\n\nLow level support is provided most commonly through two features:\n\nA type to represent a byte or bytes.\nBitwise operators - operators like the arithmetic infix operators + or - but that perform operations on pairs of bits rather than pairs of numeric values.\n\nWe explore each in Rust."
  },
  {
    "objectID": "30_bits.rjs.html#bytes-1",
    "href": "30_bits.rjs.html#bytes-1",
    "title": "Bits",
    "section": "Byte(s)",
    "text": "Byte(s)\n\nBytes are referenced by name within in Rust std in a few places, though there is no formal byte type.\nInstead, u8 is used.\n\nThis is common - there is little meaningful difference between 8 bits pretending to be a number and 8 bits that aren’t doing anything in particular."
  },
  {
    "objectID": "30_bits.rjs.html#bytes-2",
    "href": "30_bits.rjs.html#bytes-2",
    "title": "Bits",
    "section": "Bytes",
    "text": "Bytes\n\nBytes are referenced, both as the function bytes and the data structure Bytes\n\nThe function produces a Rust iterator the produces u8 values.\n\nIn other cases, such as as_bytes, an array of u8 is often used (expressed as [u8]).\nIn any case, collections of u8s."
  },
  {
    "objectID": "30_bits.rjs.html#example",
    "href": "30_bits.rjs.html#example",
    "title": "Bits",
    "section": "Example",
    "text": "Example\n\nReally, there is no better example than just grabbing some random bits from /dev/random and taking a peek.\nRust helpfully supports printing in binary, using the b format code, to see the individual zeroes and ones of a byte or bytes.\n\nlet mut devrnd = std::fs::File::open(\"/dev/urandom\").unwrap();\nlet mut buffer = [0u8; (usize::BITS / 8) as usize];\nstd::io::Read::read_exact(&mut devrnd, &mut buffer).unwrap();\nlet sample = usize::from_ne_bytes(buffer);\nprintln!(\"{:b}\", sample);"
  },
  {
    "objectID": "30_bits.rjs.html#test-it",
    "href": "30_bits.rjs.html#test-it",
    "title": "Bits",
    "section": "Test it",
    "text": "Test it\n\nYou can run a few times to see what a random bitstring (ordered collection of bits) looks like when using :b\n\n\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\n1000111011010011001001000110100010011010101101010111100001010101\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\n1010101000100001011000111011111111011110010001010010101000111010\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\n1001110000001001110011100111110010010101110000010111010111110011\n\u0016"
  },
  {
    "objectID": "30_bits.rjs.html#simplify",
    "href": "30_bits.rjs.html#simplify",
    "title": "Bits",
    "section": "Simplify",
    "text": "Simplify\n\nTo introduce operators, we’ll use only single u8s, just for simplicity.\n\nlet mut devrnd = std::fs::File::open(\"/dev/urandom\").unwrap();\nlet mut buffer = [0u8; 2];\nstd::io::Read::read_exact(&mut devrnd, &mut buffer).unwrap();\nlet x = buffer[0];\nlet y = buffer[1];\nprintln!(\"x = {x:08b}, y = {y:08b}\");\n\nBy default, :b doesn’t render leading zeros, which is fine for numbers but not great for bytes.\nUse :08b - where 0 specifies to have leading zeros, and 8 specifies how many digits."
  },
  {
    "objectID": "30_bits.rjs.html#fixed",
    "href": "30_bits.rjs.html#fixed",
    "title": "Bits",
    "section": "Fixed",
    "text": "Fixed\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\nx = 00101010, y = 01100111\n\nWith the benefit of some bits, we can explore operators."
  },
  {
    "objectID": "30_bits.rjs.html#operator-reference",
    "href": "30_bits.rjs.html#operator-reference",
    "title": "Bits",
    "section": "Operator Reference",
    "text": "Operator Reference\n\nRust doesn’t clearly delineate bitwise from other operators.\n\nThis is pretty reasonable: “bitwise” is something of a social convention.\n\nThe overall operator reference I follow is Rust Book Appendix B\nThe next slide lifts a subset of a .md table on that page.\n\nI have included both named bitwise operators and also “shifts”, which are a bit (heh) different."
  },
  {
    "objectID": "30_bits.rjs.html#bitwise",
    "href": "30_bits.rjs.html#bitwise",
    "title": "Bits",
    "section": "Bitwise",
    "text": "Bitwise\n\n\n\n\n\n\n\n\nOperator\nExample\nExplanation\n\n\n\n\n!\n!expr\nBitwise or logical complement\n\n\n&\nexpr & expr\nBitwise AND\n\n\n&lt;&lt;\nexpr &lt;&lt; expr\nLeft-shift\n\n\n&gt;&gt;\nexpr &gt;&gt; expr\nRight-shift\n\n\n^\nexpr ^ expr\nBitwise exclusive OR\n\n\n|\nexpr | expr\nBitwise OR"
  },
  {
    "objectID": "30_bits.rjs.html#conceptual-model",
    "href": "30_bits.rjs.html#conceptual-model",
    "title": "Bits",
    "section": "Conceptual Model",
    "text": "Conceptual Model\n\nOne way to model how the bitwise operators is to:\n\nImagine a byte as an ordered collection of bits\n\nLike a list, array, or vector\n\nImagine a bit as a boolean.\n\nZero/one is equally meaningful to False/True\n\nLoop a logical operator over the booleans.\n\nWe will demonstrate first in Python then in Rust."
  },
  {
    "objectID": "30_bits.rjs.html#python-demo---bytes",
    "href": "30_bits.rjs.html#python-demo---bytes",
    "title": "Bits",
    "section": "Python Demo - Bytes",
    "text": "Python Demo - Bytes\n\nWe create two bytes using np.uint8.\n\nfrom numpy import uint8 as byte\n\nx, y = byte(0x0F), byte(0x33)\n\nBinary representation using bin or :b\n\nprint('x = {:08b}, y = {:08b}'.format(x,y))\n\nYou’ll see x = 00001111, y = 00110011"
  },
  {
    "objectID": "30_bits.rjs.html#python-bit-xor",
    "href": "30_bits.rjs.html#python-bit-xor",
    "title": "Bits",
    "section": "Python Bit XOR",
    "text": "Python Bit XOR\n\nWe can use Pythonic “Bitwise exclusive OR”\n\nprint('{:08b} ^ {:08b} = {:08b}'.format(x, y, x ^ y))\n\nWhat do we see?\n\n00001111 ^ 00110011 = 00111100\n\nWhy?"
  },
  {
    "objectID": "30_bits.rjs.html#boolean-arrays",
    "href": "30_bits.rjs.html#boolean-arrays",
    "title": "Bits",
    "section": "Boolean arrays",
    "text": "Boolean arrays\n\nConvert the bytes to arrays of booleans.\nVia string representation:\n\nto_bool_str = lambda x : [c == '1' for c in `{.08b}.format(x)]\n\nVia numeric representation, which requires a reversal:\n\nto_bool_num = lambda x : [1 == (x // 2 ** i) % 2 for i in range(8)][::-1]"
  },
  {
    "objectID": "30_bits.rjs.html#logical-xor",
    "href": "30_bits.rjs.html#logical-xor",
    "title": "Bits",
    "section": "Logical XOR",
    "text": "Logical XOR\n\nPython lacks logical XOR as it is equivalent to !=\n\n# Print a truth table in markdown\nprint(\"| x   | y   | x!=y| x^y |\")\nprint(\"|-----|-----|-----|-----|\")\nfor left in (True, False):\n    for rite in (True, False):\n        print('|{:&lt;5}|{:&lt;5}|{:&lt;5}|{:&lt;5}|'.format(*[str(b) for b in [left, rite, left != rite, left ^ rite]]))\n\nHorizontally aligned:\n\n| x   | y   | x!=y| x^y |\n|-----|-----|-----|-----|\n|True |True |False|False|\n|True |False|True |True |\n|False|True |True |True |\n|False|False|False|False|"
  },
  {
    "objectID": "30_bits.rjs.html#map-xor",
    "href": "30_bits.rjs.html#map-xor",
    "title": "Bits",
    "section": "Map XOR",
    "text": "Map XOR\n\nApply XOR to each element of the boolean arrays.\nWe would get the same numerical presentation.\n\nprint(to_bool_num(x ^ y))\nprint([a != b for a, b in zip(to_bool_num(x),to_bool_num(y))])\n\nBoth will yield the same boolean array.\n\n[True, True, False, False, False, False, True, True]"
  },
  {
    "objectID": "30_bits.rjs.html#all-operators",
    "href": "30_bits.rjs.html#all-operators",
    "title": "Bits",
    "section": "All operators",
    "text": "All operators\n\nWe can loop over all operators to inspect them visually.\n\nfrom operator import and_, or_ , xor\n\nfor op in [and_, or_ , xor]:\n    print('f({:08b}, {:08b}) = {:08b} for f ='.format(x, y, op(x,y)), op)\n\nnot is similar but unary.\n\nprint('~{:08b} = {:08b}'.format(x, ~x))\n\nSo:\n\nf(11110000, 00110011) = 00110000 for f = &lt;built-in function and_&gt;\nf(11110000, 00110011) = 11110011 for f = &lt;built-in function or_&gt;\nf(11110000, 00110011) = 11000011 for f = &lt;built-in function xor&gt;\n~11110000 = 00001111"
  },
  {
    "objectID": "30_bits.rjs.html#rust-operators",
    "href": "30_bits.rjs.html#rust-operators",
    "title": "Bits",
    "section": "Rust operators",
    "text": "Rust operators\n\nMore common convention to use ! for not (vs. ~)\nI’m not great with Rust format codes yet, so a bit silly.\n\n\n\nsrc/main.rs\n\nfn main() {\n    let mut devrnd = std::fs::File::open(\"/dev/urandom\").unwrap();\n    let mut buffer = [0u8; 2];\n    std::io::Read::read_exact(&mut devrnd, &mut buffer).unwrap();\n    let x = buffer[0];\n    let y = buffer[1];\n    let mut z = x | y;\n    println!(\"x = {x:08b}, y = {y:08b}, x | y = {z:08b}\");\n    z = x ^ y;\n    println!(\"x = {x:08b}, y = {y:08b}, x ^ y = {z:08b}\");\n    z = x & y;\n    println!(\"x = {x:08b}, y = {y:08b}, x & y = {z:08b}\");\n    let y = !buffer[0];\n    println!(\"x = {x:08b},!x = {y:08b}\");\n}"
  },
  {
    "objectID": "30_bits.rjs.html#run-it",
    "href": "30_bits.rjs.html#run-it",
    "title": "Bits",
    "section": "Run it",
    "text": "Run it\n\nSee how different random bits are combined!\n\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\nx = 01110000, y = 10001110, x | y = 11111110\nx = 01110000, y = 10001110, x ^ y = 11111110\nx = 01110000, y = 10001110, x & y = 00000000\nx = 01110000,!x = 10001111\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\nx = 10111111, y = 00110110, x | y = 10111111\nx = 10111111, y = 00110110, x ^ y = 10001001\nx = 10111111, y = 00110110, x & y = 00110110\nx = 10111111,!x = 01000000"
  },
  {
    "objectID": "30_bits.rjs.html#why",
    "href": "30_bits.rjs.html#why",
    "title": "Bits",
    "section": "Why?",
    "text": "Why?\n\n\n\nImagine thinking in digits.\nTo store a ~3 digit number, need \\(3 \\times 10 = 30\\) “things” that can hold a number.\n\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n10^0\n\n10^1\n\n10^2\n\n\n\nstruct0\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n\n\nstruct:0-&gt;struct0\n\n\n\n\n\nstruct1\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n\n\nstruct:1-&gt;struct1\n\n\n\n\n\nstruct2\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n\n\nstruct:2-&gt;struct2"
  },
  {
    "objectID": "30_bits.rjs.html#binary",
    "href": "30_bits.rjs.html#binary",
    "title": "Bits",
    "section": "Binary",
    "text": "Binary\n\nWe are familiar with binary encoding.\nWe note: \\(\\log_2(999) \\lt 10\\)\nDecimal encoding squanders \\(\\dfrac{2}{3}\\) of it’s storage space.\nSo we store in binary.\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n2^0\n\n2^1\n\n2^2\n\n2^3\n\n2^4\n\n2^5\n\n2^6\n\n2^7\n\n2^8\n\n2^9\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1"
  },
  {
    "objectID": "30_bits.rjs.html#binary-1",
    "href": "30_bits.rjs.html#binary-1",
    "title": "Bits",
    "section": "Binary",
    "text": "Binary\n\nThe benefit here is that is sufficient to note the presence or absence of a digit (1)\nVersus the specific digit \\(\\in [1,9]\\) and presence of absense (0)\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n2^0\n\n2^1\n\n2^2\n\n2^3\n\n2^4\n\n2^5\n\n2^6\n\n2^7\n\n2^8\n\n2^9\n\n \n\n1\n\n \n\n \n\n1\n\n1\n\n \n\n \n\n1"
  },
  {
    "objectID": "30_bits.rjs.html#wait-a-minute.",
    "href": "30_bits.rjs.html#wait-a-minute.",
    "title": "Bits",
    "section": "Wait a minute.",
    "text": "Wait a minute.\n\n\n\nWhy is the ones digit (\\(n^0\\)) leftmost ?\n\nThe “least significant bit” or LSB\n\nIn e.g. English place the LSB last.\n\nCS 271 ⇒\n\n\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n10^0\n\n10^1\n\n10^2\n\n\n\nstruct0\n\n \n\n1\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\n\nstruct:0-&gt;struct0\n\n\n\n\n\nstruct1\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n7\n\n \n\n \n\n\n\nstruct:1-&gt;struct1\n\n\n\n\n\nstruct2\n\n \n\n \n\n2\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\n\nstruct:2-&gt;struct2"
  },
  {
    "objectID": "30_bits.rjs.html#languages",
    "href": "30_bits.rjs.html#languages",
    "title": "Bits",
    "section": "Languages",
    "text": "Languages\n\nIn e.g. spoken word, makes sense to lead with the biggest value.\n\n200 of something is closer to 299 of something than 0 of something is to 9 of something.\n\nIn e.g. programming, we often lead with lowest numerical index.\n\nWe look at the arr[0] of something before the arr[1] of something."
  },
  {
    "objectID": "30_bits.rjs.html#in-practice",
    "href": "30_bits.rjs.html#in-practice",
    "title": "Bits",
    "section": "In Practice",
    "text": "In Practice\n\nWe end up with\n\n\"271\"[0] == '2' and 271 % (10 ** 1) == 1\n\nConfusing!\n\nRecall:\n\n# Strings are not reversed.\nto_bool_str = lambda x : [c == '1' for c in `{.08b}.format(x)]\n# Numerics are reversed.\nto_bool_num = lambda x : [1 == (x // 2 ** i) % 2 for i in range(8)][::-1]"
  },
  {
    "objectID": "30_bits.rjs.html#annoyance",
    "href": "30_bits.rjs.html#annoyance",
    "title": "Bits",
    "section": "Annoyance",
    "text": "Annoyance\n\nThis gets very annoying when trying to move numbers around that don’t quite fit in some number of bits.\n\nSay I have 0x1234 followers on Instagram📷\nBoycott Meta etc etc.\nAnd/or follow me @calvinallegedly\n\n$ python3 -c \"print(0x1234)\"\n4660\nAlso imagine it is 1969 and you only have 8 bit integers.\n\nOnly 2 digits in hexadecimal representation."
  },
  {
    "objectID": "30_bits.rjs.html#stdin",
    "href": "30_bits.rjs.html#stdin",
    "title": "Bits",
    "section": "Stdin",
    "text": "Stdin\n\nWe can use stdin and read_line to read in some values.\nRecall:\n\nlet mut guess = String::new();\nstd::io::stdin().read_line(&mut guess).unwrap();"
  },
  {
    "objectID": "30_bits.rjs.html#test",
    "href": "30_bits.rjs.html#test",
    "title": "Bits",
    "section": "Test",
    "text": "Test\n\nTest it\n\n\n\nsrc/main.rs\n\nfn main() {\n    let mut guess = String::new();\n    std::io::stdin().read_line(&mut guess).unwrap();\n    println!(\"{:?}\", guess);\n}\n\n\ncargo run -&gt; type some nonsense -&gt; press ENTER\n\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\nsome nonsense\n\"some nonsense\\n\"\n$"
  },
  {
    "objectID": "30_bits.rjs.html#hex-reader",
    "href": "30_bits.rjs.html#hex-reader",
    "title": "Bits",
    "section": "Hex reader",
    "text": "Hex reader\n\nTo read in hexadecimal values we must:\n\nRead in the string.\nBreak into chunks.\nConvert 2 character chunks to numerical values"
  },
  {
    "objectID": "30_bits.rjs.html#to-characters",
    "href": "30_bits.rjs.html#to-characters",
    "title": "Bits",
    "section": "To characters",
    "text": "To characters\n\nWe’ll just iterate over the characters and print them in pairs.\n\n\n\nsrc/main.rs\n\nfn main() {\n    let mut guess = String::new();\n    std::io::stdin().read_line(&mut guess).unwrap();\n    let mut flip = false;\n    for c in guess.chars() {\n        if flip {\n            println!(c);\n        } else {\n            print!(c);\n        }\n        flip = !flip;\n    println!(\"{:?}\", guess);\n}"
  },
  {
    "objectID": "30_bits.rjs.html#test-it-1",
    "href": "30_bits.rjs.html#test-it-1",
    "title": "Bits",
    "section": "Test it",
    "text": "Test it\n\nWorks sometimes better than others\n\n$ cargo run\n   Compiling scratch v0.1.0 (/home/user/tmp/scratch)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.23s\n     Running `target/debug/scratch`\n0x1234\n0x\n12\n34\n\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\n0x123\n0x\n12\n3"
  },
  {
    "objectID": "30_bits.rjs.html#missing-pieces",
    "href": "30_bits.rjs.html#missing-pieces",
    "title": "Bits",
    "section": "Missing pieces",
    "text": "Missing pieces\n\nWe need to throw out the prefix\nWe need to make sure we begin, rather than end, on a possible singleton.\nHere’s the plan:\n\nSkip the first two\nTraverse to the end of string.\nBuild doubles back up."
  },
  {
    "objectID": "30_bits.rjs.html#skip",
    "href": "30_bits.rjs.html#skip",
    "title": "Bits",
    "section": "Skip",
    "text": "Skip\n\nWe can apply next() to an iterator to read characters.\nIt’s basically a pop operation.\n\n\n\nsrc/main.rs\n\nfn main() {\n    let mut guess = String::new();\n    std::io::stdin().read_line(&mut guess).unwrap();\n    let mut flip = false;\n    let mut cs = guess.chars();\n    cs.next() // 0\n    cs.next() // x\n    for c in cs {\n        if flip {\n            println!(c);\n        } else {\n            print!(c);\n        }\n        flip = !flip;\n    println!(\"{:?}\", guess);\n}"
  },
  {
    "objectID": "30_bits.rjs.html#build-up",
    "href": "30_bits.rjs.html#build-up",
    "title": "Bits",
    "section": "Build up",
    "text": "Build up\n\nFrom there we just need to get pairs somehow.\nIt’s not too bad to get the last character…\n\nfn last(cs:std::str::Chars) -&gt; char {\n    let mut final = cs.next()\n    for c in cs {\n        final = c;\n    }\n    return final;\n}"
  },
  {
    "objectID": "30_bits.rjs.html#uh-oh",
    "href": "30_bits.rjs.html#uh-oh",
    "title": "Bits",
    "section": "Uh oh!",
    "text": "Uh oh!\n\nWhen looping over an iterator, we get the type itself.\n\nThe loop just terminates when it has no more elements.\n\nWhen calling .next(), we get an option.\n\nThere is not always a .next() element.\n\nerror[E0308]: mismatched types\n --&gt; src/main.rs:4:16\n|\n2 |     let mut last = cs.next();\n|                    --------- expected due to this value\n3 |     for c in cs {\n4 |         last = c;\n|                ^ expected `Option&lt;char&gt;`, found `char`"
  },
  {
    "objectID": "30_bits.rjs.html#recurse",
    "href": "30_bits.rjs.html#recurse",
    "title": "Bits",
    "section": "Recurse",
    "text": "Recurse\nfn last(mut cs:std::str::Chars) -&gt; Option&lt;char&gt; {\n    return match cs.next() {\n        Some(n) =&gt; match last(cs) {  // if there's digits here, look for more\n            Some(m) =&gt; Some(m),      // if the last is found, return it\n            None =&gt; Some(n),         // no more letters - we are last, return n\n        },\n        None =&gt; None,                // required by `rustc` in case we don't input anything\n    }\n}"
  },
  {
    "objectID": "30_bits.rjs.html#try-it-out",
    "href": "30_bits.rjs.html#try-it-out",
    "title": "Bits",
    "section": "Try it out!",
    "text": "Try it out!\n$ cargo run\n   Compiling scratch v0.1.0 (/home/user/tmp/scratch)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.22s\n     Running `target/debug/scratch`\n0x1234\nSome('\\n')\n\nWhoops! Forgot the newline… match Some('\\n') to None\n\nfn last(mut cs:std::str::Chars) -&gt; Option&lt;char&gt; {\n    return match cs.next() {\n        Some('\\n') =&gt; None,"
  },
  {
    "objectID": "30_bits.rjs.html#pair-it-up",
    "href": "30_bits.rjs.html#pair-it-up",
    "title": "Bits",
    "section": "Pair it up",
    "text": "Pair it up\n\nLet’s find the last two values.\nWe already found the last one, just now if we’ve found it, pair it up and print it.\n\nfn last(mut cs:std::str::Chars) -&gt; Option&lt;char&gt; {\n    return match cs.next() {\n        Some(n) =&gt; match last(cs) {  // if there's digits here, look for more\n            Some(m) =&gt; {\n                println!(\"{n}{m}\");  // If last is found, print this then last\n                Some(m),             // if the last is found, return it\n            None =&gt; Some(n),         // no more letters - we are last, return n\n        },\n        None =&gt; None,                // required by `rustc` in case we don't input anything\n    }\n}"
  },
  {
    "objectID": "30_bits.rjs.html#whoops",
    "href": "30_bits.rjs.html#whoops",
    "title": "Bits",
    "section": "Whoops!",
    "text": "Whoops!\n\nWe print every digit paired with the last one!\n\n$ cargo run\n   Compiling scratch v0.1.0 (/home/user/tmp/scratch)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.23s\n     Running `target/debug/scratch`\n0x1234\n34\n24\n14\nSome('4')\n\nWe can:\n\nRemove the print from main\nReturn None after printing a pair."
  },
  {
    "objectID": "30_bits.rjs.html#altogether",
    "href": "30_bits.rjs.html#altogether",
    "title": "Bits",
    "section": "Altogether",
    "text": "Altogether\n\n\n\nRename last to pairs\nPrint single digits in main\n\nUse if let - kind of a single pattern match.\n\n\n\n\n\nsrc/main.rs\n\nfn pairs(mut cs:std::str::Chars) -&gt; Option&lt;char&gt; {\n    return match cs.next() {\n        Some('\\n') =&gt; None,\n        Some(n) =&gt; match pairs(cs) {\n            Some(m) =&gt; {\n                println!(\"{n}{m}\");\n                None\n            }\n            None =&gt; Some(n),\n        },\n        None =&gt; None,\n    }\n}\n\nfn main() {\n    let mut guess = String::new();\n    std::io::stdin().read_line(&mut guess).unwrap();\n    let mut cs = guess.chars();\n    cs.next();\n    cs.next();\n    if let Some(n) = pairs(cs) {\n        println!(\"{n}\");\n    }\n}"
  },
  {
    "objectID": "30_bits.rjs.html#just-parse-nm",
    "href": "30_bits.rjs.html#just-parse-nm",
    "title": "Bits",
    "section": "Just parse {n}{m}",
    "text": "Just parse {n}{m}\n\nThe built-in is from_str_radix for e.g. u8.\n\nTurn characters into singleton strings..\n(We could pattern match '1' =&gt; 1 instead)\n\n\nfn two_hex(n:char, m:char) -&gt; u8 {\n    let n = u8::from_str_radix(&n.to_string(), 16).unwrap();\n    let m = u8::from_str_radix(&m.to_string(), 16).unwrap();\n    return n * 16 + m;\n}"
  },
  {
    "objectID": "30_bits.rjs.html#bundle-into-a-vector",
    "href": "30_bits.rjs.html#bundle-into-a-vector",
    "title": "Bits",
    "section": "Bundle into a vector",
    "text": "Bundle into a vector\n\nWe introduce vectors.\n\nSo close to a Pythonic &lt;class 'list'&gt; I can’t tell the difference.\n\nVs. printing, toss numeric values into a vectors.\nThis is slightly complicated by the fact that, uh…\n\nfn pairs(mut cs:std::str::Chars) -&gt; Option&lt;char&gt; {\n\nThere’s no vector there!\n\nCan’t just return it (because we’re using recursion #based)"
  },
  {
    "objectID": "30_bits.rjs.html#create-vectors",
    "href": "30_bits.rjs.html#create-vectors",
    "title": "Bits",
    "section": "Create vectors",
    "text": "Create vectors\n\nTrue to form in Rust, vectors require specific initialization as they are data structure.\n\nIn this way they are like big S Strings with String::new()\n\nWe can use Vec::new() or the macro vec!. Read more\n\nlet mut vec1 = vec![1, 2, 3];\nvec1.push(4);\nlet vec2 = Vec::from([1, 2, 3, 4]);\nassert_eq!(vec1, vec2);"
  },
  {
    "objectID": "30_bits.rjs.html#sketch",
    "href": "30_bits.rjs.html#sketch",
    "title": "Bits",
    "section": "Sketch",
    "text": "Sketch\n\nLet’s convert pairs to a helper function.\nLet’s move the odd case handlying from main to a wrapper function.\n\nAnd also popping the first two vals.\n\nLet’s initialize a mutable vector in the wrapper.\nWe’ll maintain the return type of pairs but add an argument.\nWe’ll return the vector from the wrapper."
  },
  {
    "objectID": "30_bits.rjs.html#wrapper",
    "href": "30_bits.rjs.html#wrapper",
    "title": "Bits",
    "section": "Wrapper",
    "text": "Wrapper\n\n\nfn chars_to_vec(mut cs:std::str::Chars) -&gt; Vec&lt;u8&gt; {\n    let mut vals = Vec::new();\n    // from old main\n    cs.next();\n    cs.next();\n    if let Some(n) = pairs(cs, &mut vals) {\n        vals.push(two_hex('0', n));\n    }\n    // \"Prints and returns the value of a given\n    // expression for quick and dirty debugging.\"\n    dbg!(&vals);\n    return vals;\n}\n\n\nCreate a vector.\nLet pairs “borrow” the vector mutably - so it can add stuff.\n\n\n\nLet dbg! “borrow” the vector to print it.\nReturn the vector when you’re done!"
  },
  {
    "objectID": "30_bits.rjs.html#vector-handling",
    "href": "30_bits.rjs.html#vector-handling",
    "title": "Bits",
    "section": "Vector handling",
    "text": "Vector handling\nfn pairs(mut cs:std::str::Chars, vals:&mut Vec&lt;u8&gt;) -&gt; Option&lt;char&gt; {\n    return match cs.next() {\n        Some('\\n') =&gt; None,\n        Some(n) =&gt; match pairs(cs, vals) {\n            Some(m) =&gt; {\n                vals.push(two_hex(n,m));  // only change\n                None\n            },\n            None =&gt; Some(n),\n        },\n        None =&gt; None,\n    }\n}\n\nAdd a “borrowed mutable vector argument”\nPush some u8s into it."
  },
  {
    "objectID": "30_bits.rjs.html#how-do-we-feel-about-this",
    "href": "30_bits.rjs.html#how-do-we-feel-about-this",
    "title": "Bits",
    "section": "How do we feel about this?",
    "text": "How do we feel about this?\n$ cargo r\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\n0x01020304\n[src/main.rs:10:5] &vals = [\n    4,\n    3,\n    2,\n    1,\n]"
  },
  {
    "objectID": "30_bits.rjs.html#quoth-wikipedia",
    "href": "30_bits.rjs.html#quoth-wikipedia",
    "title": "Bits",
    "section": "Quoth Wikipedia",
    "text": "Quoth Wikipedia\n\nIn computing, endianness is the order in which bytes within a word data type are transmitted over a data communication medium or addressed in computer memory, counting only byte significance compared to earliness.\n\n\nWe can regard our vector as a 32 bit word of 4 bytes.\nWe can regard the indices (0..4) as the addresses in computer memory."
  },
  {
    "objectID": "30_bits.rjs.html#two-endians",
    "href": "30_bits.rjs.html#two-endians",
    "title": "Bits",
    "section": "Two endians",
    "text": "Two endians\n\nA big-endian system stores the most significant byte (MSB) of a word at the smallest memory address and the least significant byte (LSB) at the largest.\n\n\nA little-endian system, in contrast, stores the least-significant byte (LSB) at the smallest address.\n\n\nIn 0x01020304, the MSB is 1, and LSB is 4\n[4, 3, 2, 1], the smallest memory address contains a 4."
  },
  {
    "objectID": "30_bits.rjs.html#arrays-to-numbers",
    "href": "30_bits.rjs.html#arrays-to-numbers",
    "title": "Bits",
    "section": "Arrays to Numbers",
    "text": "Arrays to Numbers\n\nWe can reverse the operation by:\n\nLooping over the array.\nMultiplying by the numerical base, some power of two\nAdding up the different values.\n\n\u0016fn custom_u8s_to_u32(vals : Vec&lt;u8&gt;) -&gt; u32 {\n  // We'll just take the first four for now\n  let mut ret : u32 = 0;\n  for i in 0..4 {\n      dbg!((i, vals[i]));\n      ret += (vals[i] as u32) * ((2 as u32).pow(8 * (i as u32)));\n  }\n  return ret;\n}"
  },
  {
    "objectID": "30_bits.rjs.html#try-it-out-1",
    "href": "30_bits.rjs.html#try-it-out-1",
    "title": "Bits",
    "section": "Try it out",
    "text": "Try it out\n\n\n\nRemember to update main\n\nlet vals = chars_to_vec(cs);\nlet val = custom_u8s_to_u32(vals);\nprintln!(\"{:x}\", val); // hex\n\n$ cargo r\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/scratch`\n0x01020304\n[src/main.rs:10:5] &vals = [\n    4,\n    3,\n    2,\n    1,\n]\n[src/main.rs:38:9] (i, vals[i]) = (\n    0,\n    4,\n)\n[src/main.rs:38:9] (i, vals[i]) = (\n    1,\n    3,\n)\n[src/main.rs:38:9] (i, vals[i]) = (\n    2,\n    2,\n)\n[src/main.rs:38:9] (i, vals[i]) = (\n    3,\n    1,\n)\n1020304"
  },
  {
    "objectID": "30_bits.rjs.html#wait-a-minute",
    "href": "30_bits.rjs.html#wait-a-minute",
    "title": "Bits",
    "section": "Wait a minute",
    "text": "Wait a minute\n\nIsn’t this terrible?\n\nret += (vals[i] as u32) * ((2 as u32).pow(8 * (i as u32)));\n\nThere must be a better way."
  },
  {
    "objectID": "30_bits.rjs.html#shifts",
    "href": "30_bits.rjs.html#shifts",
    "title": "Bits",
    "section": "Shifts",
    "text": "Shifts\n\nThe remaining bitwise operator is the shift\n\nBitwise because it works on bits, but\nTakes two arguments:\n\nThe bits to “shift”\nA numerical value encoding how much “shift”"
  },
  {
    "objectID": "30_bits.rjs.html#script-it",
    "href": "30_bits.rjs.html#script-it",
    "title": "Bits",
    "section": "Script it",
    "text": "Script it\n\nPython shift is &lt;&lt; (well, left shift)\n\npython3 -c \"[print('{} {:03d} {:08b}'.format(x, 1 &lt;&lt; x, 1 &lt;&lt; x)) for x in range(8)]\"\n\nI got:\n\n0 001 00000001\n1 002 00000010\n2 004 00000100\n3 008 00001000\n4 016 00010000\n5 032 00100000\n6 064 01000000\n7 128 10000000"
  },
  {
    "objectID": "30_bits.rjs.html#shift-it",
    "href": "30_bits.rjs.html#shift-it",
    "title": "Bits",
    "section": "Shift it",
    "text": "Shift it\nfn custom_u8s_to_u32(vals : Vec&lt;u8&gt;) -&gt; u32 {\n    // We'll just take the first four for now\n    let mut ret : u32 = 0;\n    for i in 0..4 {\n        dbg!((i, vals[i]));\n        ret += (vals[i] as u32) &lt;&lt; (8 * i);\n    }\n    return ret;\n}\n\nMuch better!\nSaves an as u32!"
  },
  {
    "objectID": "30_bits.rjs.html#today-1",
    "href": "30_bits.rjs.html#today-1",
    "title": "Bits",
    "section": "Today",
    "text": "Today\n\nEncoding\n\nBytes\nBitwise operators\nEndianness"
  },
  {
    "objectID": "30_bits.rjs.html#bonus",
    "href": "30_bits.rjs.html#bonus",
    "title": "Bits",
    "section": "Bonus",
    "text": "Bonus\n\nCourtesy Indi of CS Student Assoc.\n\nfn pairs(mut cs: std::str::Chars, vals: &mut Vec&lt;u8&gt;) -&gt; Option&lt;char&gt; {\n    return match cs.next()? {\n        '\\n' =&gt; None,\n        n =&gt; pairs(cs, vals).map_or(Some(n), |m| {\n            vals.push(two_hex(n, m));\n            None\n        }),\n    };\n}"
  },
  {
    "objectID": "30_bits.rjs.html#bonus-1",
    "href": "30_bits.rjs.html#bonus-1",
    "title": "Bits",
    "section": "Bonus",
    "text": "Bonus\n\nCourtesy Indi of CS Student Assoc.\n\nfn pairs(cs: std::str::Chars, vals: &mut Vec&lt;u8&gt;) -&gt; Option&lt;char&gt; {\n    cs.rev()\n        .filter(|c| *c != '\\n')\n        .collect::&lt;Vec&lt;_&gt;&gt;()\n        .chunks(2)\n        .for_each(|x| vals.push(two_hex(x[1], x[0])));\n    return None;\n}"
  },
  {
    "objectID": "21_guess.html",
    "href": "21_guess.html",
    "title": "Guess",
    "section": "",
    "text": "Lab Day\n\nPrepare for Wordle",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#announcements",
    "href": "21_guess.html#announcements",
    "title": "Guess",
    "section": "",
    "text": "Lab Day\n\nPrepare for Wordle",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#homework",
    "href": "21_guess.html#homework",
    "title": "Guess",
    "section": "Homework",
    "text": "Homework\n\nWordle is ready after this class.\n\nIt is exactly hard enough to use all programming basics.\nWindows development is no longer supported.\n\nDue Friday, 19 Sept. at 1440 ET.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#citation",
    "href": "21_guess.html#citation",
    "title": "Guess",
    "section": "Citation",
    "text": "Citation\n\nThe idea to do Wordle as the first Rust assignment was inspired by the Chapter 2 of the Rust Book, Guessing Game\nThe idea to do Wordle as a programming assignment is inspired by the Nifty Assignment of the same name.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#today",
    "href": "21_guess.html#today",
    "title": "Guess",
    "section": "Today",
    "text": "Today\n\nconst\nCharacter iteration\n/dev/urandom\nstdin()\n“Fixes”",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#compile-time",
    "href": "21_guess.html#compile-time",
    "title": "Guess",
    "section": "Compile time",
    "text": "Compile time\n\nIn Wordle, you’ll likely have two kinds of values that won’t change.\n\nThe “ANSI Escape Codes” which allow you to print to the terminal in color, which are set when you install your operating system.\n\nFor these we may use a Rust const\n\nThe “answer” which will be set as soon as the program begins running, and never be altered thereafter.\n\nFor these, we use a let.\n\n\nI refer to the first as “compile time constants” and declare them outside of any function.\n\n\n\nsrc/main.rs\n\nconst RED : &str = \"\\u{001b}[31m\";\nconst WHT : &str = \"\\u{001b}[0m\";\n\nfn main() {\n    println!(\"White text. {RED}Red text. {WHT}White text.\");\n}\n\nThis section transparently added in response to a question in class. I do not use const in my own code rather than let, though perhaps I should.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#create-constants",
    "href": "21_guess.html#create-constants",
    "title": "Guess",
    "section": "Create constants",
    "text": "Create constants\n\nCreate your own constants for yellow and green.\n\nYou may want to write a loop to try different colors, or consult documentation.\n\nFor Wordle, I used a function with the following type, which you may wish to take as inspiration, to print a single character in a given color.\n\nfn letter(a:char, c:i32)",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#strings-lack-indices",
    "href": "21_guess.html#strings-lack-indices",
    "title": "Guess",
    "section": "Strings lack indices",
    "text": "Strings lack indices\n\nIn Python, we have some packing and unpacking to do to edit strings by character index.\n\n&gt;&gt;&gt; s = list(\"hello, world\")\n&gt;&gt;&gt; s[10] = 'd'\n&gt;&gt;&gt; s[11] = 'l'\n&gt;&gt;&gt; \"\".join(s)\n'hello, wordl'",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#rust-uses-.chars",
    "href": "21_guess.html#rust-uses-.chars",
    "title": "Guess",
    "section": "Rust uses .chars()",
    "text": "Rust uses .chars()\n\nIn the case of Wordle, all solutions are formulated as 5 characters, so we can assume the underlying character-ness of strings.\n\nThis is not permitted generally in Rust, but in our case we may.\n\nTo unpack Rust strings into characters, you may use .chars()\n\n\n\nsrc/main.rs\n\nfn main() {\n    let s = \"Hello, world\";\n    println!(\"{:?}\", s.chars());\n}\n\n\nWhat do you see?\n\nCan you access the ith element?\nCan you loop over object?",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#iterators",
    "href": "21_guess.html#iterators",
    "title": "Guess",
    "section": "Iterators",
    "text": "Iterators\n\nWhat .chars() returns is called an iterator, it is much like a Python generator.\n\n&gt;&gt;&gt; gen = (i ** i for i in range(100))\n&gt;&gt;&gt; next(gen)\n1\n&gt;&gt;&gt; next(gen)\n1\n&gt;&gt;&gt; next(gen)\n4\n&gt;&gt;&gt; next(gen)\n27\n&gt;&gt;&gt; next(gen)\n256\n\nBasically, it is a collection type of unknown size where next elements may be queried.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#rust-uses-.nth",
    "href": "21_guess.html#rust-uses-.nth",
    "title": "Guess",
    "section": "Rust uses .nth()",
    "text": "Rust uses .nth()\n\nYou can see the nth element of an iterator with .nth(), more or less:\n\n\n\nsrc/main.rs\n\nfn main() {\n    let s = \"Hello, world\";\n    println!(\"{:?}\", s.chars().nth(10));\n}\n\n\nWhat do you see?\n\nWhat happens if you ask for the 256th letter?",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#options",
    "href": "21_guess.html#options",
    "title": "Guess",
    "section": "Options",
    "text": "Options\n\nRust library functions almost always return an Option\n\nThis is just good practice, it beats returning e.g. Python None sometimes, or crashing.\n\nAn option is simple:\n\npub enum Option&lt;T&gt; {\n    None,\n    Some(T),\n}",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#options-for-options",
    "href": "21_guess.html#options-for-options",
    "title": "Guess",
    "section": "Options for options",
    "text": "Options for options\n\nPattern match\nExpect\nUnwrap",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#pattern-match",
    "href": "21_guess.html#pattern-match",
    "title": "Guess",
    "section": "Pattern match",
    "text": "Pattern match\n\nThe language designers intend options to be handled as follows:\n\n\n\nsrc/main.rs\n\nfn main() {\n    let s = \"Hello, world\";\n    match s.chars().nth(11) {\n        Some(c) =&gt; println!(\"The 11th character is {:?}\", c),\n        None =&gt; println!(\"String `s` is fewer than 11 characters in length\"),\n    }\n}\n\n\nI very rarely see code that looks like this, including in official Rust documentation.\nFor example, the Polars documentation does not manage Option return types this way.\nThis is, however, the only way to ensure code does not crash on e.g. arbitrary length input.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#expect",
    "href": "21_guess.html#expect",
    "title": "Guess",
    "section": "Expect",
    "text": "Expect\n\nThe incrementally less heavyweight option is with .expect(), a method of options that either:\n\nSucessful unpacks the option into a usable type, or\nCauses a “panic” - a comparatively graceful program crash.\n\nThis panic prints the message you furnished to expect.\n\n\n\n\n\nsrc/main.rs\n\nfn main() {\n    let s = \"Hello, world\";\n    println!(\"{:?}\", s.chars().nth(13).expect(\"The string literal is known to be of length 11\"));\n}\n\n\nTry checking for existing and non-existant characters. What do you find?",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#rust-uses-.unwrap",
    "href": "21_guess.html#rust-uses-.unwrap",
    "title": "Guess",
    "section": "Rust uses .unwrap()",
    "text": "Rust uses .unwrap()\n\nThe incrementally less heavyweight option is with .unwrap().\nUnwrap does not require a message but is otherwise just like .expect()\nUnwrap is used by e.g. the Polars documentation.\n\n\n\nsrc/main.rs\n\nfn main() {\n    let s = \"Hello, world\";\n    println!(\"{:?}\", s.chars().nth(13).unwrap());\n}\n\n\nTry .unwrap() on both successful and failed .nth() calls.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#unwrap-vs.-expect",
    "href": "21_guess.html#unwrap-vs.-expect",
    "title": "Guess",
    "section": "Unwrap vs. Expect",
    "text": "Unwrap vs. Expect\n\nI have never voluntarily used .expect() instead of .unwrap(), but…\n\n\n\n\n\n\n\nHelp Yourself\n\n\n\nIf your code uses .unwrap() instead of .expect() you should carefully consider converting any .unwrap()s to .expect()s before asking someone else, who is less familiar with the assumptions you made when writing your code, for help.\nThis applies to colleagues, QUAD TAs, and potential to the course instructor depending on how busy things are.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#randomization",
    "href": "21_guess.html#randomization",
    "title": "Guess",
    "section": "Randomization",
    "text": "Randomization\n\nThere are always many ways to generated results that are vaguely random.\nAs a security researcher, I am required to instruct you about /dev/random rather than use the Rust Book recommendations.\nSeparately we:\n\nLearn to read from a file.\nGet to think about how random different things really are.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#quoth-wikipedia",
    "href": "21_guess.html#quoth-wikipedia",
    "title": "Guess",
    "section": "Quoth Wikipedia",
    "text": "Quoth Wikipedia\n\nIn Unix-like operating systems, /dev/random and /dev/urandom are special files that provide random numbers from a cryptographically secure pseudorandom number generator (CSPRNG). The CSPRNG is seeded with entropy (a value that provides randomness) from environmental noise, collected from device drivers and other sources. Users can obtain random numbers from the CSPRNG simply by reading the file.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#peep-it",
    "href": "21_guess.html#peep-it",
    "title": "Guess",
    "section": "Peep it",
    "text": "Peep it\n\nVerify you are on a system implementing /dev/random with the following, at command line:\n\nhead -1 /dev/random\n\nFor me, I see:\n\n$ head -1 /dev/random\n6��c�W�Y|S�t��|��=���U�&gt;�$��8�����E���*�&;�F�§�6␦8�{X�~�1U�J␦�Y���Eyg��Z��{ ��^\"/%!7���vv@�w{p��q�y\"� AD�/Ahb��fb��Ed�\n                                                                                                                      ­�k�:���F�&gt;����09h��Ʊl#�&gt;�J����:J����5|I�E���04�������NH��-�X����l�,k�&lt;�������=.4^qav�}Y��\n        ��(�)1���B���c)�&*�#r��\"H�(�:�e���֩A\n$\n\nYou can test what head does on a file with which you are familiar, or consult man head",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#open",
    "href": "21_guess.html#open",
    "title": "Guess",
    "section": "open",
    "text": "open\n\nA la Python, Rust utilizes open to read files.\nUnlike Python, Rust has a great love for gobs of a text and Options.\nThe following opens /dev/random to be read.\n\nThink about why we need to .unwrap() when opening a file.\nWhat is the Python equivalent?\n\nstd::fs::File::open(\"/dev/random\").unwrap();\nWe require mutability to be able to read successive bits from the file, as our location in the file is tracked within the Rust File object.\n\n\nAn object providing access to an open file on the filesystem.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#use",
    "href": "21_guess.html#use",
    "title": "Guess",
    "section": "use",
    "text": "use\n\nA lot of people who aren’t me prefer to use use to have shorter names.\nI don’t personally understand this, but I do use from pgl import * in Python.\nHere’s an example from Rust documentation of a use:\n\n\n\nsrc/main.rs\n\nuse std::fs::File;\n\nfn main() {\n    let mut devrnd = File::open(\"/dev/random\").unwrap();\n}\n\n\nThe Used - The Bird And The Worm (Video)",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#read",
    "href": "21_guess.html#read",
    "title": "Guess",
    "section": "read",
    "text": "read\n\nTrue to form, read has a variety of complexities introduced by:\n\nNot assuming anything about the Rust File object\nNot assuming anything about how to read or save data.\nNot assuming anything about the underlying file within the computer’s file system.\n\nI use it as follows:\n\nstd::io::Read::read_exact(&mut devrnd, &mut buffer).unwrap();\n\nAn astute reader will notice a few idiosyncracies.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#mut",
    "href": "21_guess.html#mut",
    "title": "Guess",
    "section": "&mut",
    "text": "&mut\n\nWhen we:\n\nHave a variable in Rust\nFor which the ownership model applies, such as a file of arbitrary size\nFor which mutability is necessary, such as a File object from which n bytes have been read.\n\nWe can use this variable:\n\nWithin some other function, while\nRetaining the ability to use it again in some future function.\n\nWe do so by passing a “mutable reference”, generated by prefixing the variable name with &mut and a space.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#buffers",
    "href": "21_guess.html#buffers",
    "title": "Guess",
    "section": "Buffers",
    "text": "Buffers\n\nIt is common in lower level languages to read from a file into a “buffer”, a temporary storage space within the executing program.\nThese are commonly implemented as multiple of bytes of some fixed size in that language’s array type.\nThese bits are commonly initialized to zero.\nI am aware of no graceful way to do this in Rust, so I’ll tell you what I’m doing now and why.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#arrays",
    "href": "21_guess.html#arrays",
    "title": "Guess",
    "section": "Arrays",
    "text": "Arrays\n\nArrays in Rust are fixed size and typed, not unlike NumPy array.\nThey see little use versus the more common vector type, but I preferred arrays for Wordle.\n\nAnd in fact expect to prefer arrays this term.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#quoth-the-docs",
    "href": "21_guess.html#quoth-the-docs",
    "title": "Guess",
    "section": "Quoth the Docs",
    "text": "Quoth the Docs\n\nA fixed-size array, denoted [T; N], for the element type, T, and the non-negative compile-time constant size, N.\nThere are two syntactic forms for creating an array:\n\nA list with each element, i.e., [x, y, z].\nA repeat expression [expr; N] where N is how many times to repeat expr in the array. expr must either be:\n\nA value of a type implementing the Copy trait\nA const value\n\n\nI never read this, I found this page through a search engine and ripped it.\n\nSearch for dev/urandom on that page.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#create-an-array",
    "href": "21_guess.html#create-an-array",
    "title": "Guess",
    "section": "Create an array",
    "text": "Create an array\n\nThe following is a mutable - so we can read file data into it - array of 8 bytes.\n\nlet mut buffer = [0u8; 8];\n\nBreakdown.\n\nThe 0 in 0u8 is the initialization value.\nThe u8 is the type, unsigned 8 bit value.\nThe post comma 8 is the number of 8 bit values to store.\n\nThere’s only one problem here.\n\nThat second 8 is a magic number, which to me represents poor style.\n\nBelieve me, I wanted to just type 8, but we shouldn’t.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#on-magic-numbers",
    "href": "21_guess.html#on-magic-numbers",
    "title": "Guess",
    "section": "On Magic Numbers",
    "text": "On Magic Numbers\n\nTo select a random word, eventually you will probably have:\n\nAn array of 5 letter words.\nThat array will have some length.\nThat length will be whatever Rust uses to store the size of memory objects.\nDifferent computers have different ways of address memory…\nSo we cannot make assumptions about the size of values which themselves store the size of memory.\n\nI wish I was kidding! I’m not!",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#vs-64-bit",
    "href": "21_guess.html#vs-64-bit",
    "title": "Guess",
    "section": "32 vs 64 bit",
    "text": "32 vs 64 bit\n\nFor example, how many memory locations can be addressed by a 32 bit system?\nHow many on a 64 bit system?\nDoes your device potentially use 48 bit addresses?\nHow could you tell?\nWhat if you run code on a 16 bit microcontroller?\nEnter usize\n\nThe unsigned value that is the right size to store a size.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#usize",
    "href": "21_guess.html#usize",
    "title": "Guess",
    "section": "usize",
    "text": "usize\n\nWe will use usize by name twice:\n\nWe need to read a random usize.\n\nWe can determine how many u8s are required to make up a usize by checking how many bits are in a usize. and dividing by 8.\n\nusize::BITS / 8\n\nOnly one problem - for some reason usize stores its size as a u32.\nSo to get enough bits to fill I usize, I ended up doing… this?\n\nlet mut buffer = [0u8; (usize::BITS / 8) as usize];\n\nPresumably I’m doing this wrong.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#check-in",
    "href": "21_guess.html#check-in",
    "title": "Guess",
    "section": "Check in",
    "text": "Check in\n\nI have this so far:\n\nlet mut devrnd = std::fs::File::open(\"/dev/urandom\").unwrap();\nlet mut buffer = [0u8; (usize::BITS / 8) as usize];\nstd::io::Read::read_exact(&mut devrnd, &mut buffer).unwrap();",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#candidate-answers",
    "href": "21_guess.html#candidate-answers",
    "title": "Guess",
    "section": "Candidate Answers",
    "text": "Candidate Answers\n\nYou can imagine testing with a smaller word list, like the words of the Sator Square\n\nconst WORDS : [&str; 5] = [\"rotas\", \"opera\", \"tenet\", \"arepo\", \"sator\"];\n\nHere &str is used to refer to string literals, that is, not the String quasi-data structure of arbitrary size.\n\nThis was the type that e.g. \"hello world\" had the whole time under the hood.\n\n\n\n\nsrc/main.rs\n\nconst WORDS : [&str; 5] = [\"rotas\", \"opera\", \"tenet\", \"arepo\", \"sator\"];\n\nfn main() {\n    let i : u8 = 2;\n    println!(\"{:?}\", WORDS[i]);\n}\n\n\nThis doesn’t work.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#indices",
    "href": "21_guess.html#indices",
    "title": "Guess",
    "section": "Indices",
    "text": "Indices\n\nAn array can be as large as memory.\nSo it’s index can be as large as memory.\nThe thing as large memory is usize.\n\nerror[E0277]: the type `[&'static str]` cannot be indexed by `u8`\n --&gt; src/main.rs:5:28\n  |\n5 |     println!(\"{:?}\", WORDS[i]);\n  |                            ^ slice indices are of type `usize` or ranges of `usize`",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#byte-array-to-usize",
    "href": "21_guess.html#byte-array-to-usize",
    "title": "Guess",
    "section": "Byte array to usize",
    "text": "Byte array to usize\n\nUsize helpfully has “from bytes” methods.\n\nThere are 3 such methods for different endiannesses, a future topic.\n\nI use little endianness because it doesn’t matter - le\n\nlet secret = usize::from_le_bytes(buffer);\n\nThis can be used as an index, but it’s probably too large.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#len",
    "href": "21_guess.html#len",
    "title": "Guess",
    "section": ".len()",
    "text": ".len()\n\nRust furnishes the .len() method of arrays to detect their type.\n\nWORDS[secret % WORDS.len()]",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#altogether",
    "href": "21_guess.html#altogether",
    "title": "Guess",
    "section": "Altogether",
    "text": "Altogether\n\nWe use String::from() to get a String from a &str, as the array contains fixed length strings and I use the String type for consistency with lecture recommendations.\n\nlet mut devrnd = std::fs::File::open(\"/dev/urandom\").unwrap();\nlet mut buffer = [0u8; (usize::BITS / 8) as usize];\nstd::io::Read::read_exact(&mut devrnd, &mut buffer).unwrap();\nlet mut secret = usize::from_ne_bytes(buffer);\nlet answer : String = String::from(WORDS[secret % WORDS.len()]);",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#today-1",
    "href": "21_guess.html#today-1",
    "title": "Guess",
    "section": "Today",
    "text": "Today\n\nconst\nCharacter iteration\n/dev/urandom\nstdin()\n“Fixes”",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#input",
    "href": "21_guess.html#input",
    "title": "Guess",
    "section": "input()",
    "text": "input()\n\nPython furnishes the straight-forward input() function.\nWe don’t have that in rust, but we do have”\n\nstdin() - the “standard input” that represents text provided at terminal.\n.read_line() - like Python .read_line() in that it reads to the next newline character, but a bit different in type.\n\nEssentially, stdin() is a function that returns a File the refers to the terminal.\n\nstd::io::stdin().read_line(&mut guess).unwrap();\n\nWhat happens if you don’t unwrap?\nWhat type is guess? Array? &str? String?\n\nlet mut guess = String::new();",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#trim",
    "href": "21_guess.html#trim",
    "title": "Guess",
    "section": ".trim()",
    "text": ".trim()\n\nReading lines will return slightly longer strings that end with a newline character.\nThis can be removed with .trim().\nTry reading in e.g. opera or tenet and seeing the trimmed vs. untrimmed versions.\n\nYou may want to inspect their length, perhaps by converting to characters and using .nth().",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#contains",
    "href": "21_guess.html#contains",
    "title": "Guess",
    "section": ".contains()",
    "text": ".contains()\n\nYou can check if a value is present in an array using .contains().\nCheck to see if the trimmed and untrimmed versions of opera or tenet are contained in the WORDS array.\n\nYou will need to fiddle with types a bit!\nWill you need to use &? &mut? String::from()? Try each and see what happens - and consider why!",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#clone",
    "href": "21_guess.html#clone",
    "title": "Guess",
    "section": ".clone()",
    "text": ".clone()\n\nSometimes you will need to read a word from stdin and perhaps both compare it some other word and also decompose it into characters.\nIf you need multiple copies, you may want to use .clone() or cargo may recommend use of .clone().",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#range",
    "href": "21_guess.html#range",
    "title": "Guess",
    "section": "range()",
    "text": "range()\n\nYou may benefit from using for loops of fixed index.\nRust has a syntactical rather than functional range.\nIt follows the same start/stop rules as Python.\n\n\n\nsrc/main.rs\n\nfn main() {\n    for i in 1..5 {\n        println!(\"{:?}\", i);\n    }\n}",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#vectors",
    "href": "21_guess.html#vectors",
    "title": "Guess",
    "section": "Vectors",
    "text": "Vectors\n\nA lot of Rust programmers are extremely fond of the Vector, which completely coincidentally was not necessary for Wordle as everything in Wordle is fixed size.\nIf you want to learn Vectors instead of arrays, simply consult this documentation.\n[Rust By Example: Vectors]\nYou will find them similar to Python list.",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "21_guess.html#today-2",
    "href": "21_guess.html#today-2",
    "title": "Guess",
    "section": "Today",
    "text": "Today\n\nconst\nCharacter iteration\n/dev/urandom\nstdin()\n“Fixes”",
    "crumbs": [
      "Guess"
    ]
  },
  {
    "objectID": "12_hicargo.html",
    "href": "12_hicargo.html",
    "title": "Hi cargo",
    "section": "",
    "text": "There’s a hot new trend that all the cool kids are talking about in town.\nData Science.\nRust is, of course, one of the best data science langauges.\n\n\n\n\n\nYou should have\n\ngit installed and working.\nA repository named 271rs, both a local repository on your device and a remote repository on GitHub.\nAn editor, which really should be text-based, in-console text editor, but I can’t actually ban you from using VS Code.\ncargo installed and working.\n\nIf you miss any of this, back to lab.\n\n\n\n\n\nTo complete this assignment, you must:\n\nCreate a 12 directory in your 271rs repository.\nThis folder must be a Cargo package.\nIt must leverage other Cargo packages, namely “polars” and “chrono”\n\n\n\n\n\n\nTo complete this assignment, your code must produce precisely the following DataFrame:\n\n┌────────────────┬────────────┬────────┬────────┐\n│ name           ┆ birthdate  ┆ weight ┆ height │\n│ ---            ┆ ---        ┆ ---    ┆ ---    │\n│ str            ┆ date       ┆ f64    ┆ f64    │\n╞════════════════╪════════════╪════════╪════════╡\n│ Alice Archer   ┆ 1997-01-10 ┆ 57.9   ┆ 1.56   │\n│ Ben Brown      ┆ 1985-02-15 ┆ 72.5   ┆ 1.77   │\n│ Chloe Cooper   ┆ 1983-03-22 ┆ 53.6   ┆ 1.65   │\n│ Daniel Donovan ┆ 1981-04-30 ┆ 83.1   ┆ 1.75   │\n└────────────────┴────────────┴────────┴────────┘",
    "crumbs": [
      "Hi cargo"
    ]
  },
  {
    "objectID": "12_hicargo.html#sketch",
    "href": "12_hicargo.html#sketch",
    "title": "Hi cargo",
    "section": "",
    "text": "There’s a hot new trend that all the cool kids are talking about in town.\nData Science.\nRust is, of course, one of the best data science langauges.",
    "crumbs": [
      "Hi cargo"
    ]
  },
  {
    "objectID": "12_hicargo.html#pre-flight-checks",
    "href": "12_hicargo.html#pre-flight-checks",
    "title": "Hi cargo",
    "section": "",
    "text": "You should have\n\ngit installed and working.\nA repository named 271rs, both a local repository on your device and a remote repository on GitHub.\nAn editor, which really should be text-based, in-console text editor, but I can’t actually ban you from using VS Code.\ncargo installed and working.\n\nIf you miss any of this, back to lab.",
    "crumbs": [
      "Hi cargo"
    ]
  },
  {
    "objectID": "12_hicargo.html#requirements",
    "href": "12_hicargo.html#requirements",
    "title": "Hi cargo",
    "section": "",
    "text": "To complete this assignment, you must:\n\nCreate a 12 directory in your 271rs repository.\nThis folder must be a Cargo package.\nIt must leverage other Cargo packages, namely “polars” and “chrono”",
    "crumbs": [
      "Hi cargo"
    ]
  },
  {
    "objectID": "12_hicargo.html#requirements-1",
    "href": "12_hicargo.html#requirements-1",
    "title": "Hi cargo",
    "section": "",
    "text": "To complete this assignment, your code must produce precisely the following DataFrame:\n\n┌────────────────┬────────────┬────────┬────────┐\n│ name           ┆ birthdate  ┆ weight ┆ height │\n│ ---            ┆ ---        ┆ ---    ┆ ---    │\n│ str            ┆ date       ┆ f64    ┆ f64    │\n╞════════════════╪════════════╪════════╪════════╡\n│ Alice Archer   ┆ 1997-01-10 ┆ 57.9   ┆ 1.56   │\n│ Ben Brown      ┆ 1985-02-15 ┆ 72.5   ┆ 1.77   │\n│ Chloe Cooper   ┆ 1983-03-22 ┆ 53.6   ┆ 1.65   │\n│ Daniel Donovan ┆ 1981-04-30 ┆ 83.1   ┆ 1.75   │\n└────────────────┴────────────┴────────┴────────┘",
    "crumbs": [
      "Hi cargo"
    ]
  },
  {
    "objectID": "12_hicargo.html#new-folder",
    "href": "12_hicargo.html#new-folder",
    "title": "Hi cargo",
    "section": "New Folder",
    "text": "New Folder\n\nYou will need to make an 12 folder in 271rs to save your work.\nEnsure your shell/terminal/console/command line is in the 271rs repository.\n\nReview the lecture/lab.\n\nCreate the package.\n\ncargo new 12 --name packages --vcs none\n\nEnter the 12 directory.\n\ncd 12\n\nPrepare to modify the src/main.rs file.\n\nhelix src/main.rs # or vi, vim, nvim, emacs, etc",
    "crumbs": [
      "Hi cargo"
    ]
  },
  {
    "objectID": "12_hicargo.html#comments",
    "href": "12_hicargo.html#comments",
    "title": "Hi cargo",
    "section": "Comments",
    "text": "Comments\n\nComments are important to good code!\nRust comments are double-slash prefixed.\n\nprintln!{\"This is code\"}\n// This is a comment!",
    "crumbs": [
      "Hi cargo"
    ]
  },
  {
    "objectID": "12_hicargo.html#citation",
    "href": "12_hicargo.html#citation",
    "title": "Hi cargo",
    "section": "Citation",
    "text": "Citation\n\nThe following content is lifted directly from the Polars documentation.",
    "crumbs": [
      "Hi cargo"
    ]
  },
  {
    "objectID": "12_hicargo.html#example",
    "href": "12_hicargo.html#example",
    "title": "Hi cargo",
    "section": "Example",
    "text": "Example\n\nMost things here should look vaguely familiar to you…\n\nuse chrono::prelude::*;\nuse polars::prelude::*;\n\nlet mut df: DataFrame = df!(\n    \"name\" =&gt; [\"Alice Archer\", \"Ben Brown\", \"Chloe Cooper\", \"Daniel Donovan\"],\n    \"birthdate\" =&gt; [\n        NaiveDate::from_ymd_opt(1997, 1, 10).unwrap(),\n        NaiveDate::from_ymd_opt(1985, 2, 15).unwrap(),\n        NaiveDate::from_ymd_opt(1983, 3, 22).unwrap(),\n        NaiveDate::from_ymd_opt(1981, 4, 30).unwrap(),\n    ],\n    \"weight\" =&gt; [57.9, 72.5, 53.6, 83.1],  // (kg)\n    \"height\" =&gt; [1.56, 1.77, 1.65, 1.75],  // (m)\n)\n.unwrap();\nprintln!(\"{df}\");",
    "crumbs": [
      "Hi cargo"
    ]
  },
  {
    "objectID": "12_hicargo.html#useimport",
    "href": "12_hicargo.html#useimport",
    "title": "Hi cargo",
    "section": "Use/Import",
    "text": "Use/Import\n\nThese are like Python import\n\nuse chrono::prelude::*;\nuse polars::prelude::*;\n\nTo use Polars in Python, we would do the following:\n\nimport polars as pl\nimport datetime as dt",
    "crumbs": [
      "Hi cargo"
    ]
  },
  {
    "objectID": "12_hicargo.html#single-equals-assignment",
    "href": "12_hicargo.html#single-equals-assignment",
    "title": "Hi cargo",
    "section": "Single Equals Assignment",
    "text": "Single Equals Assignment\n\nThese are variable declarations.\n\nIn Rust, the first time a variable is declared:\n\nThe let keyword is used (different from Python, similar to JavaScript)\nThe type of the variable is given (different from Python, similar to C)\nThe mutability (think tuple vs. list) is specified (similar to JavaScript)\n\nlet mut df: DataFrame = df!( // More to come.\n\nTo create a df variable in Python, we would do the following:\n\ndf = pl.DataFrame( # More to come.",
    "crumbs": [
      "Hi cargo"
    ]
  },
  {
    "objectID": "12_hicargo.html#key-value-pairs",
    "href": "12_hicargo.html#key-value-pairs",
    "title": "Hi cargo",
    "section": "Key-Value pairs",
    "text": "Key-Value pairs\n\nThis is pattern matching.\n\nSimilar enough to to C switch\nSimilar enough to Python dict\nBased on Haskell/Standard ML pattern matching, Read more\n\n\"name\" =&gt; [\"Alice Archer\", \"Ben Brown\", \"Chloe Cooper\", \"Daniel Donovan\"],\nIn Python, we match a string with a collection of strings using a dictionary for key-value storage.\n\nWe note in Python this operation must occur within a dictionary, not as a free-standing expression like x = 1 if True else 0\n\n{\n  \"name\": [\"Alice Archer\", \"Ben Brown\", \"Chloe Cooper\", \"Daniel Donovan\"],",
    "crumbs": [
      "Hi cargo"
    ]
  },
  {
    "objectID": "12_hicargo.html#access-and-errors",
    "href": "12_hicargo.html#access-and-errors",
    "title": "Hi cargo",
    "section": "Access and Errors",
    "text": "Access and Errors\n\nTo use things in a Rust package, rather than dot notation . we use “path related synatx” ::\n\nNaiveDate::from_ymd_opt(1997, 1, 10).unwrap(),\n\nIn Python, we typical use a module name which is incidentally a file name, which we import as some alias and then look up an internal value using .\n\ndt.date(1997, 1, 10),",
    "crumbs": [
      "Hi cargo"
    ]
  },
  {
    "objectID": "12_hicargo.html#options",
    "href": "12_hicargo.html#options",
    "title": "Hi cargo",
    "section": "Options",
    "text": "Options\n\nMore on this next week.\nRust manages errors, such as there not being a 57th of Thirteentober, using options\n\nSame as a Haskell option. Read more\nEverything in Python is kinda an object because it could technical be None\n\n&gt;&gt;&gt; f = lambda x: x if x &gt; 0 else None\n&gt;&gt;&gt; f(10)\n10\n&gt;&gt;&gt; f(-10)\n&gt;&gt;&gt;",
    "crumbs": [
      "Hi cargo"
    ]
  },
  {
    "objectID": "12_hicargo.html#optional-options",
    "href": "12_hicargo.html#optional-options",
    "title": "Hi cargo",
    "section": "Optional Options",
    "text": "Optional Options\n\nYou can use from_ymd with or without the option error handling, but using options is good form and to be encouraged.\nOptions must be unwrapped, which throws a graceful error if there is nothing inside of them.\nThe following are equivalent specifically in the case of well-formed dates:\nThe first gracefully may throw an error.\n\nNaiveDate::from_ymd_opt(1997, 1, 10).unwrap(),\n\nIf this fails, the program crashes:\n\nNaiveDate::from_ymd(1997, 1, 10),",
    "crumbs": [
      "Hi cargo"
    ]
  },
  {
    "objectID": "12_hicargo.html#unwrap",
    "href": "12_hicargo.html#unwrap",
    "title": "Hi cargo",
    "section": "Unwrap",
    "text": "Unwrap\n\nVersus Python, where pl.DataFrame will return a dataframe, df! in Rust will return an option.\n\nIt may not be able to coerce something into a dataframe.\n\nWe have to unwrap that option. This is the last line before print\n\nI’ve removed the contents so you can see it here:\n\nlet mut df: DataFrame = df!(\n)\n.unwrap();  // This line!\nprintln!(\"{df}\");",
    "crumbs": [
      "Hi cargo"
    ]
  },
  {
    "objectID": "12_hicargo.html#try-it",
    "href": "12_hicargo.html#try-it",
    "title": "Hi cargo",
    "section": "Try it!",
    "text": "Try it!\n\nThe provided code, above, is debugged Polars code that will run successfully!\nHowever, that doesn’t mean that it does run successfully.\n\nerror[E0433]: failed to resolve: use of unresolved module or unlinked crate `polars`\n --&gt; src/main.rs:3:9\n  |\n3 |     use polars::prelude::*;\n  |         ^^^^^^ use of unresolved module or unlinked crate `polars`\n  |\n  = help: if you wanted to use a crate named `polars`, use `cargo add polars` to add it to your `Cargo.toml`",
    "crumbs": [
      "Hi cargo"
    ]
  },
  {
    "objectID": "12_hicargo.html#cargo-add",
    "href": "12_hicargo.html#cargo-add",
    "title": "Hi cargo",
    "section": "Cargo add",
    "text": "Cargo add\n\nTo use packages within your own code, you need to cargo add them.\nThe example code uses two packages: polars and chrono\nThis is mostly similar to pip install for Python, but is specific to one Cargo project.\n\nThis reflects the growing consensus in package management.\n\nTry using cargo add to get the code to work!\n\nThink about what directory you should be in when using cargo add\nThink about how you would look up help if you get stuck!",
    "crumbs": [
      "Hi cargo"
    ]
  },
  {
    "objectID": "12_hicargo.html#cargo-fmt",
    "href": "12_hicargo.html#cargo-fmt",
    "title": "Hi cargo",
    "section": "Cargo fmt",
    "text": "Cargo fmt\n\nNote: If you want to stick to a standard style across Rust projects, you can use an automatic formatter tool called rustfmt to format your code in a particular style. The Rust team has included this tool with the standard Rust distribution, as rustc is, so it should already be installed on your computer!\n\n\nIn a Cargo project, you can simply use cargo fmt\nPlay around the with the code, then format it, and see what changes!",
    "crumbs": [
      "Hi cargo"
    ]
  },
  {
    "objectID": "02_hiworld.html",
    "href": "02_hiworld.html",
    "title": "Hi world",
    "section": "",
    "text": "By convention, the first program in a new language is “Hello, world!”\nRust follows this convention in the Rust Book.\n\nWe basically do Chapter 1.2\n\n\n\n\n\n\nYou should have\n\ngit installed and working.\nA repository named 271rs, both a local repository on your device and a remote repository on GitHub.\nAn editor, which really should be text-based, in-console text editor, but I can’t actually ban you from using VS Code.\nrustc installed and working.\n\nIf you miss any of this, back to lab.\n\n\n\n\n\nTo complete this assignment, you must:\n\nCreate a 02/hiworld.rs file in your 271rs repository.\nEnsure this file:\n\nIs present in the remote repository on GitHub, to which I have access after the lab, and…\nThat the file can be compiled, as specified below, and…\nThe executable produced by compilation prints “Hi world”.",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#sketch",
    "href": "02_hiworld.html#sketch",
    "title": "Hi world",
    "section": "",
    "text": "By convention, the first program in a new language is “Hello, world!”\nRust follows this convention in the Rust Book.\n\nWe basically do Chapter 1.2",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#pre-flight-checks",
    "href": "02_hiworld.html#pre-flight-checks",
    "title": "Hi world",
    "section": "",
    "text": "You should have\n\ngit installed and working.\nA repository named 271rs, both a local repository on your device and a remote repository on GitHub.\nAn editor, which really should be text-based, in-console text editor, but I can’t actually ban you from using VS Code.\nrustc installed and working.\n\nIf you miss any of this, back to lab.",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#requirements",
    "href": "02_hiworld.html#requirements",
    "title": "Hi world",
    "section": "",
    "text": "To complete this assignment, you must:\n\nCreate a 02/hiworld.rs file in your 271rs repository.\nEnsure this file:\n\nIs present in the remote repository on GitHub, to which I have access after the lab, and…\nThat the file can be compiled, as specified below, and…\nThe executable produced by compilation prints “Hi world”.",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#new-folder",
    "href": "02_hiworld.html#new-folder",
    "title": "Hi world",
    "section": "New Folder",
    "text": "New Folder\n\nYou will need to make an 02 folder in 271rs to save your work.\nEnsure your shell/terminal/console/command line is in the 271rs repository.\n\nReview the lab.\nReview the shell.\n\nUse:\n\nmkdir 02",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#new-file",
    "href": "02_hiworld.html#new-file",
    "title": "Hi world",
    "section": "New File",
    "text": "New File\n\nYou will need to edit a hi_world.rs file in the 02 folder.\nUse something like:\n\nvim 02/hi_world.rs\n\nOr perhaps:\n\ncd 02\nvim hi_world.rs\n\nWe recall that to save and exit vim we press the ESC key then type :x then press ENTER.\n\nRead more here",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#new-program",
    "href": "02_hiworld.html#new-program",
    "title": "Hi world",
    "section": "New Program",
    "text": "New Program\n\nYou should have rustc installed.\nIf I were you, I’d leave open a terminal window with vim and create another to use rustc\nFor example, when you first create and save an empty file as hiworld.rs, you can use rustc:\n\nrustc hi_world.rs\n\nYou’ll see the following:\n\nerror[E0601]: `main` function not found in crate `hi_world`\n  |\n  = note: consider adding a `main` function to `hi_world.rs`\n\nerror: aborting due to 1 previous error\n\nFor more information about this error, try `rustc --explain E0601`.\n\nThis is good enough for now.",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#citation",
    "href": "02_hiworld.html#citation",
    "title": "Hi world",
    "section": "Citation",
    "text": "Citation\n\nThe following content is lifted directly from the Rust Book",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#writing-and-running-a-rust-program",
    "href": "02_hiworld.html#writing-and-running-a-rust-program",
    "title": "Hi world",
    "section": "Writing and Running a Rust Program",
    "text": "Writing and Running a Rust Program\n\n.rs\n\nRust files always end with the .rs extension.\nIf you’re using more than one word in your filename, the convention is to use an underscore to separate them. For example, use hi_world.rs rather than HiWorld.rs.\nIn hi_world.rs enter the following:\n\n\n\nhi_world.rs\n\nfn main() {\n    println!(\"Hello, world!\");\n}\n\n\n\nrustc\n\nSave (ESC + :w in vim) the file and go back to your terminal window.\nEnter the following commands to compile the file:\n\nrustc hi_world.rs\n\n\n\n\n\n\nNote\n\n\n\nRust is a compiled language, unlike Python, bash, or R. To create programs in Rust, we first “compile” the source code in an executable. We do not “run” .rs files, as we do with .py files using the python3 command.\n\n\n\n\nVerify\n\nVerify that compilation was successful by using ls to list the files in your folder.\n\nls\n\nYou should see the following.\n\nhi_world  hi_world.rs\n\nhi_world is a program, and hi_world.rs is source code.\n\n\n\nRun\n\nTo use a Rust program, we do not have to call rustc like we do with Python .py scripts!\nWe use ./ notation to have the shell interpret hi_world as a program to be run\n\n. means use the current folder (should be 02)\n/ means find the file by name in the current folder.\n\n./hi_world\nYou should see:\n\nHello, world!\n\n\n\n\n\n\nNote\n\n\n\nIf you created your hi_world.rs file using e.g. vim 02/hi_world.rs, then the file will be in a different folder. You may need to run rustc 02/hi_world.rs or ./02/hi_world. Review the file system if you get stuck.",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#the-first-piece",
    "href": "02_hiworld.html#the-first-piece",
    "title": "Hi world",
    "section": "The first piece",
    "text": "The first piece\nfn main() {\n\n}\n\nThese lines define a function named main.\nThe main function is special:\n\nIt is always the first code that runs in every executable Rust program.\n\nThe first line declares a function named main that has no parameters and returns nothing.\nIf there were parameters, they would go inside the parentheses ().",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#white-space-and",
    "href": "02_hiworld.html#white-space-and",
    "title": "Hi world",
    "section": "White space and {}",
    "text": "White space and {}\nfn main() {\n\n}\n\nThe function body is wrapped in {}.\nRust requires curly brackets around all function bodies. It’s good style to place the opening curly bracket on the same line as the function declaration, adding one space in between.",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#rustfmt",
    "href": "02_hiworld.html#rustfmt",
    "title": "Hi world",
    "section": "rustfmt",
    "text": "rustfmt\n\nNote: If you want to stick to a standard style across Rust projects, you can use an automatic formatter tool called rustfmt to format your code in a particular style. The Rust team has included this tool with the standard Rust distribution, as rustc is, so it should already be installed on your computer!",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#function-body",
    "href": "02_hiworld.html#function-body",
    "title": "Hi world",
    "section": "Function Body",
    "text": "Function Body\n\nThe body of the main function holds the following code:\n\nprintln!(\"Hello, world!\");\n\nThis line does all the work in this little program: it prints text to the screen.\nThere are three important details to notice here.",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#printing",
    "href": "02_hiworld.html#printing",
    "title": "Hi world",
    "section": "Printing",
    "text": "Printing\n\nFirst, println! calls a Rust macro.\nIf it had called a function instead, it would be entered as println (without the !).\nRust macros are a way to writecode that generates code to extend Rust syntax, a latter topic.\nIt is common for printing to be uncommonly complex when learning new programming languages; Rust follows this trend.\nFor now, you just need to know that using a ! means that you’re calling a macro instead of a normal function and that macros don’t always follow the same rules as functions.",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#strings",
    "href": "02_hiworld.html#strings",
    "title": "Hi world",
    "section": "Strings",
    "text": "Strings\n\nSecond, you see the \"Hello, world!\" string.\nWe pass this string as an argument to println!.\nThen string is printed to the screen.",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "02_hiworld.html#semicolons",
    "href": "02_hiworld.html#semicolons",
    "title": "Hi world",
    "section": "Semicolons",
    "text": "Semicolons\n\nThird, we end the line with a semicolon (;), which indicates that this expression is over and the next one is ready to begin.\n\nAn expression is the atomic unit of code.\n\nThis is an expression:\nx = 1\nThis is not, it is divisible into valid code (two expressions)\nx = 1\nprint(x)\nTHis is not, it is not independently valid code.\nx = \n\n\nMost lines of Rust code end with a semicolon.\n\nThis is legal in Python:\nx = 1;\nprint(x);",
    "crumbs": [
      "Hi world"
    ]
  },
  {
    "objectID": "00_welcome.html",
    "href": "00_welcome.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to Systems in Rust\n\nWhat is in point of fact a systems cryptography course.\nBut it’s in Rust so you have to take it.\n\nAction Items:\n\nAccess the course webpage\nJoin the Discord!\n\nYou should have gotten an email…\n\nSet up Linux/Rust/Git.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#announcements",
    "href": "00_welcome.html#announcements",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to Systems in Rust\n\nWhat is in point of fact a systems cryptography course.\nBut it’s in Rust so you have to take it.\n\nAction Items:\n\nAccess the course webpage\nJoin the Discord!\n\nYou should have gotten an email…\n\nSet up Linux/Rust/Git.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#homework",
    "href": "00_welcome.html#homework",
    "title": "Welcome",
    "section": "Homework",
    "text": "Homework\n\nThe first homework, “Hello”, is ready after this class.\n\nIt is comically trivial.\nMostly makes sure you have everything set up.\n\nDue Friday, 5 Sept. at 1440 PT.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#today",
    "href": "00_welcome.html#today",
    "title": "Welcome",
    "section": "Today",
    "text": "Today\n\nLogistics\nOn Systems\nOn Rust\nOn Git\nCourse Sketch",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#it-me",
    "href": "00_welcome.html#it-me",
    "title": "Welcome",
    "section": "It me",
    "text": "It me\n\nName\n\n(Prof. )?Calvin\n\nCredentials\n\nB.A. Mathematics\nB.S., M.S., Ph.D. Computer Science\n\nPronouns\n\nthey/them",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#the-great-work",
    "href": "00_welcome.html#the-great-work",
    "title": "Welcome",
    "section": "The Great Work",
    "text": "The Great Work\n\nThesis Title\n\nMining Secure Behavior of Hardware Designs\n\nPlain English\n\nJust as there are bugs in code that makes software, modern hardware is also written in code and therefore may contain bugs. I find these bugs.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#course-format",
    "href": "00_welcome.html#course-format",
    "title": "Welcome",
    "section": "Course Format",
    "text": "Course Format\n\nLecture Monday\nLab Wednesday\nHomework due Friday 1440 PT (the next Friday)\nIn-class midterm week of 10/06\nFinal project due whenever the final is scheduled.\n\nWaiting on registrar to announce.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#ungrading",
    "href": "00_welcome.html#ungrading",
    "title": "Welcome",
    "section": "Ungrading++",
    "text": "Ungrading++\n\nYour voices have been heard: &gt; I think failing my systems class was the best thing that happened to me.\n\n\nThis course demanded strong self-motivation… Thus, I didn’t learn as much as I might’ve if grading mattered more.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#proposal",
    "href": "00_welcome.html#proposal",
    "title": "Welcome",
    "section": "Proposal",
    "text": "Proposal\n\nI will offer two option\n\nUngrading\nSpecification Grading\n\nVote as a class (anonymously)\nI update syllabus before add/drop ends.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#ungrading-1",
    "href": "00_welcome.html#ungrading-1",
    "title": "Welcome",
    "section": "1. Ungrading",
    "text": "1. Ungrading\n\nI provide autograders for all assignments except final.\n\nOr a reference solution with a rubric, if automated testing is too weird (with spoiler alerts).\nI will have a final reference solution but will at most share snippets individually.\n\nYou do whatever you want.\nEnrolled students get an A.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#specification-grading",
    "href": "00_welcome.html#specification-grading",
    "title": "Welcome",
    "section": "2. Specification Grading",
    "text": "2. Specification Grading\n\nAll the rage. I was never fan but tell me what you think.\nBasically, I will assign some stuff but you don’t have to do all of it perfectly.\n\nNo partial credit, everything is yes/no grading.\n\nI took distributions over final, midterm, and Lab/HW",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#it-pays-to-get-as",
    "href": "00_welcome.html#it-pays-to-get-as",
    "title": "Welcome",
    "section": "It pays to get A’s",
    "text": "It pays to get A’s\n\n\n\nGrade\nRequirements\n\n\n\n\nA\nFinal meets spec\n\n\nA\n90% ave HW/Lab/Midterm, Final compiles\n\n\nA-\n90% ave HW/Lab, Midterm/Final compile\n\n\nA-\nMidterm meets spec, Final compiles",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#but-bs-are-the-knees",
    "href": "00_welcome.html#but-bs-are-the-knees",
    "title": "Welcome",
    "section": "But B’s are the Knees",
    "text": "But B’s are the Knees\n\n\n\nGrade\nRequirements\n\n\n\n\nB+\n90% ave HW/Lab, Midterm compiles\n\n\nB\n80% ave HW/Lab, Midterm compiles\n\n\nB-\n80% ave HW/Lab",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#these-may-earn-degrees",
    "href": "00_welcome.html#these-may-earn-degrees",
    "title": "Welcome",
    "section": "These may (???) earn degrees",
    "text": "These may (???) earn degrees\n\n\n\nGrade\nRequirements\n\n\n\n\nC\n80% ave Lab\n\n\nD\n60% ave Lab\n\n\nF\nAnything else",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#lab-grading",
    "href": "00_welcome.html#lab-grading",
    "title": "Welcome",
    "section": "Lab Grading",
    "text": "Lab Grading\n\nA (=100%)\n\nMeets spec by end of class\n\nB (=90%)\n\nCompiles at end of class\n\nCan be turned into an executable.\n\n\nF (=0%)\n\nAnything else",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#hw-grading",
    "href": "00_welcome.html#hw-grading",
    "title": "Welcome",
    "section": "HW Grading",
    "text": "HW Grading\n\nA (=100%)\n\nOn time\nPasses autograder.\n\nB (=90%)\n\nOn time\nCompiles\n\nCan be turned into an executable.\n\n\nF (=0%)\n\nAnything else",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#final",
    "href": "00_welcome.html#final",
    "title": "Welcome",
    "section": "Final",
    "text": "Final\n\nCreate, document, and publish a self-hosting version control system.\nEntire codebase in Rust.\nMinimum specifications:\n\nSupport nested directory structures.\nSupport text-based files (.rs, .py, .txt)\nAllow reverting to named changes (commits).\nCompleted by you and at most a partner.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#late-work-policy",
    "href": "00_welcome.html#late-work-policy",
    "title": "Welcome",
    "section": "Late Work Policy",
    "text": "Late Work Policy\n\nLate work is not accepted.\n\nTurning in anything at all for on 90% of assignments yields B.\nMiss 100% of assignments and midterm but do the final for an A.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#ai-policy",
    "href": "00_welcome.html#ai-policy",
    "title": "Welcome",
    "section": "AI Policy",
    "text": "AI Policy\n\nI would be shocked if it is helpful to you.\nIf you think it is helpful, that is probably not a good sign.\nYou can use it (I wouldn’t)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#collaboration-policy",
    "href": "00_welcome.html#collaboration-policy",
    "title": "Welcome",
    "section": "Collaboration Policy",
    "text": "Collaboration Policy\n\nNon-final:\n\nAny size group via enthusiastic consent.\nTurn in your own code/copy.\n\nFinal:\n\nPartners via enthusiastic consent.\nTurn in your own code/copy.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#vote",
    "href": "00_welcome.html#vote",
    "title": "Welcome",
    "section": "Vote",
    "text": "Vote\n\nIf there’s not a Forms link here I should add one quickly.\nhttps://forms.gle/Cu3FDLHvhHJ1EjYW9",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#the-hard-part",
    "href": "00_welcome.html#the-hard-part",
    "title": "Welcome",
    "section": "The Hard Part",
    "text": "The Hard Part\n\nAfter ~10 years of systems research I’ve convinced myself only two things really matter:\n\nPointers, and\nRecursion\n\nRecursion isn’t too bad…\n\n&gt;&gt;&gt; exp = lambda b, n : b if n == 1 else b*exp(b,n-1)\n&gt;&gt;&gt; exp(2,8)\n256",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#pointers",
    "href": "00_welcome.html#pointers",
    "title": "Welcome",
    "section": "Pointers",
    "text": "Pointers\n\nPointers are a beast, but without them nothing makes sense!\n\n\n\n&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; def addx():\n...     x += 1\n...\n&gt;&gt;&gt; addx()\nUnboundLocalError:\n&lt;blah blah blah error messages&gt;\n\n&gt;&gt;&gt; x = [1]\n&gt;&gt;&gt; def addx():\n...     x[0] += 1\n...\n&gt;&gt;&gt; addx()\n&gt;&gt;&gt; x\n[2]",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#insight",
    "href": "00_welcome.html#insight",
    "title": "Welcome",
    "section": "Insight",
    "text": "Insight\n\nDefinition:\n\nPointers: Variables that store memory addresses.\nRecursion: Functions calling themselves to solve sub-problems.\n\nImportance:\n\nCore to efficient algorithms and memory management in low-level programming.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#python-and-pointers",
    "href": "00_welcome.html#python-and-pointers",
    "title": "Welcome",
    "section": "Python and Pointers",
    "text": "Python and Pointers\n\nWhy not .py (.js, .java, .cs, .cpp, etc)?\n\nThese languages abstract memory.\nThis abstraction makes computation unclear\nThis lack of clarity:\n\nAdversely impacts education\nComplicates low-level design\nLeads to low performance\n\nGood languages (except Java) but not for us",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#rust-and-pointers",
    "href": "00_welcome.html#rust-and-pointers",
    "title": "Welcome",
    "section": "Rust and Pointers",
    "text": "Rust and Pointers\n\nRust:\n\nObscures pointers, but…\nDoes not obscure memory.\n\nThis is good!\n\nMemory matters, but pointers are historical accident.\n\nYou should probably use Rust in every application where correctness or performance matters.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#rust-and-recursion",
    "href": "00_welcome.html#rust-and-recursion",
    "title": "Welcome",
    "section": "Rust and Recursion",
    "text": "Rust and Recursion\n\nSeparately, Rust is built on one of the most exciting ongoing computer science research efforts:\nLLVM (stands for LLVM)\nBasically, a way of turning human-readable code into machine-executable code.\n\nVery good at turning recursion into iteration and/or vice versa.\n\nSo Rust experiences less costs on recursion than many other languages.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git",
    "href": "00_welcome.html#git",
    "title": "Welcome",
    "section": "Git",
    "text": "Git\n\nIf you don’t know git, you should soon.\nGit corresponds, like the others, to a command: git\n\nIt is common now to use other techniques, but the command remains extremely stable\n\nQuoth GitHub, the first and greatest of the collaboration tools:\n\n\nIf you want a lot of control and flexibility, you can use the command line.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example",
    "href": "00_welcome.html#git-example",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nSo basically, you have things called repositories or “repos”\n\n\n\n\n\n\nflowchart LR\n  A(My ️‍🔥 code repo)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-1",
    "href": "00_welcome.html#git-example-1",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nThen you realize you wrote an infinite loop so you update it\n\n\n\n\n\n\nflowchart LR\n  A(My ️‍🔥 code repo v0 ) --&gt; B(My ️‍🔥 code repo v1)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-2",
    "href": "00_welcome.html#git-example-2",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nThen you come to class and realize your code is on your gaming rig in your apartment.\n\n\n\n\n\n\nflowchart LR\n  A(&lt;s&gt;My ️‍🔥 code repo v0&lt;/s&gt;) --&gt; B(&lt;s&gt;My ️‍🔥 code repo v1&lt;/s&gt;)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-3",
    "href": "00_welcome.html#git-example-3",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nSo you save your code on GitHub\n\nGH = GitHub, GR = Gaming Rig\n\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GH.‍🔥 v0)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-4",
    "href": "00_welcome.html#git-example-4",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nBut you realize you didn’t sanitize your inputs so you update again.\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-5",
    "href": "00_welcome.html#git-example-5",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nThen you have class again and grab the GitHub version onto your LT = Laptop\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-6",
    "href": "00_welcome.html#git-example-6",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nYou notice it has the bug so you fix it again on your laptop in almost the same way\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-7",
    "href": "00_welcome.html#git-example-7",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nAnd save that back to GitHub then head back home to play Nethack on your 12000USD Gaming PC\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-8",
    "href": "00_welcome.html#git-example-8",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nYou realize you also added some ASCII art and try to send that to GitHub\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)\n  G --&gt; H(GH.‍🔥 v2)\n  C --&gt; H",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-9",
    "href": "00_welcome.html#git-example-9",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nTwo arrows into one thing is a merge conflict and out-of-scope for now.\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)\n  G --&gt; H{💥}\n  C --&gt; H",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-10",
    "href": "00_welcome.html#git-example-10",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nBasically versions of code can live in more than one place.\n\nAh, versions, our old friend…\n\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)\n  G --&gt; H{💥}\n  C --&gt; H",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#visually",
    "href": "00_welcome.html#visually",
    "title": "Welcome",
    "section": "Visually",
    "text": "Visually\n\n\n\n\n\nflowchart LR\n  B(Wordle)\n  B --&gt; C(SHA512)\n  C --&gt; D(Ed25519)\n  B --&gt; F(Graphs)\n  C --&gt; H(Merkle)\n  F --&gt; H\n  F --&gt; G(LCS)\n  H --&gt; I(VCS)\n  G --&gt; I\n  D --&gt; I\n\n\n\n\n\n\n\nLCS = Longest common subsequence, like diff\nVCS = Version Control System, like git",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#sha",
    "href": "00_welcome.html#sha",
    "title": "Welcome",
    "section": "SHA",
    "text": "SHA\n\nSHA Basics:\n\nCryptographic hash function family.\nInput data into fixed-size hash values.\n\nUse Cases:\n\nData integrity.\n\nLearning Objectives:\n\nReason about bits and bytes.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#ed25519",
    "href": "00_welcome.html#ed25519",
    "title": "Welcome",
    "section": "Ed25519",
    "text": "Ed25519\n\nEd25519 Basics:\n\nPublic-key signature system.\nBased on elliptic curve cryptography (specifically, Edwards curves).\nUses SHA-512 and Curve25519.\n\nUse Cases:\n\nConfidentiality and authentication.\n\nLearning Objectives:\n\nReason about numerical computing.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#graphs",
    "href": "00_welcome.html#graphs",
    "title": "Welcome",
    "section": "Graphs",
    "text": "Graphs\n\nIntroduce graphs as a way to:\n\nOrganize files\nCompare files\nTrack changes.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#longest-common-subseq.-lcs",
    "href": "00_welcome.html#longest-common-subseq.-lcs",
    "title": "Welcome",
    "section": "Longest Common Subseq. (LCS)",
    "text": "Longest Common Subseq. (LCS)\n\nLCS Basics:\n\nFind longest sequence of characters in the same relative order in two or more sequences, but not necessarily contiguously.\nOften solved using dynamic programming.\n\nUse Cases:\n\nFile comparison (e.g., diff utility).\n\nLearning Objectives:\n\nLinear data structure.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#merkle-trees",
    "href": "00_welcome.html#merkle-trees",
    "title": "Welcome",
    "section": "Merkle Trees",
    "text": "Merkle Trees\n\nMerkle Trees:\n\nTree structure using SHA for data integrity.\nHashes stored as nodes; pointers link them.\nLeaf nodes are RSA signatures!\n\nMerkle Trees are balanced\n\nHierarchical data structure embedded in linear data structure.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#file-system",
    "href": "00_welcome.html#file-system",
    "title": "Welcome",
    "section": "File System",
    "text": "File System\n\nThe file system a tree that cannot (easily) be embedded in a linear data structure.\n\nr\n├── DESCRIPTION\n├── Makefile\n├── NAMESPACE\n├── R\n│   └── vcd2df.R\n├── man\n│   └── vcd2df.Rd\n├── r\n├── vcd2df.Rcheck\n│   ├── 00_pkg_src\n│   │   └── vcd2df\n│   │       ├── DESCRIPTION\n│   │       ├── NAMESPACE\n│   │       ├── R\n│   │       │   └── vcd2df.R\n│   │       ├── build\n│   │       │   └── vignette.rds\n│   │       ├── inst\n│   │       │   └── doc\n│   │       │       ├── index.R\n│   │       │       ├── index.html\n│   │       │       └── index.qmd\n│   │       ├── man\n│   │       │   └── vcd2df.Rd\n│   │       └── vignettes\n│   │           └── index.qmd\n│   ├── 00check.log\n│   ├── 00install.out\n│   ├── Rdlatex.log\n│   ├── vcd2df\n│   │   ├── DESCRIPTION\n│   │   ├── INDEX\n│   │   ├── Meta\n│   │   │   ├── Rd.rds\n│   │   │   ├── features.rds\n│   │   │   ├── hsearch.rds\n│   │   │   ├── links.rds\n│   │   │   ├── nsInfo.rds\n│   │   │   ├── package.rds\n│   │   │   └── vignette.rds\n│   │   ├── NAMESPACE\n│   │   ├── R\n│   │   │   ├── vcd2df\n│   │   │   ├── vcd2df.rdb\n│   │   │   └── vcd2df.rdx\n│   │   ├── doc\n│   │   │   ├── index.R\n│   │   │   ├── index.html\n│   │   │   └── index.qmd\n│   │   ├── help\n│   │   │   ├── AnIndex\n│   │   │   ├── aliases.rds\n│   │   │   ├── paths.rds\n│   │   │   ├── vcd2df.rdb\n│   │   │   └── vcd2df.rdx\n│   │   └── html\n│   │       ├── 00Index.html\n│   │       └── R.css\n│   ├── vcd2df-Ex.R\n│   ├── vcd2df-Ex.Rout\n│   ├── vcd2df-Ex.pdf\n│   ├── vcd2df-manual.log\n│   └── vcd2df-manual.pdf\n├── vcd2df_1.0.1.tar.gz\n└── vignettes\n    └── index.qmd",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#vim",
    "href": "00_welcome.html#vim",
    "title": "Welcome",
    "section": "Vim",
    "text": "Vim\n\nYou should use vim or another console-based editor as a component of your learning in this class.\nThis will not be assessed (how can it be) but will likely be expected in a non-trivial subset of settings this course material will be useful.\nI will live-code in either vim or helix",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.rjs.html#announcements",
    "href": "00_welcome.rjs.html#announcements",
    "title": "Welcome",
    "section": "Announcements",
    "text": "Announcements\n\nWelcome to Systems in Rust\n\nWhat is in point of fact a systems cryptography course.\nBut it’s in Rust so you have to take it.\n\nAction Items:\n\nAccess the course webpage\nJoin the Discord!\n\nYou should have gotten an email…\n\nSet up Linux/Rust/Git."
  },
  {
    "objectID": "00_welcome.rjs.html#homework",
    "href": "00_welcome.rjs.html#homework",
    "title": "Welcome",
    "section": "Homework",
    "text": "Homework\n\nThe first homework, “Hello”, is ready after this class.\n\nIt is comically trivial.\nMostly makes sure you have everything set up.\n\nDue Friday, 5 Sept. at 1440 PT."
  },
  {
    "objectID": "00_welcome.rjs.html#today",
    "href": "00_welcome.rjs.html#today",
    "title": "Welcome",
    "section": "Today",
    "text": "Today\n\nLogistics\nOn Systems\nOn Rust\nOn Git\nCourse Sketch"
  },
  {
    "objectID": "00_welcome.rjs.html#it-me",
    "href": "00_welcome.rjs.html#it-me",
    "title": "Welcome",
    "section": "It me",
    "text": "It me\n\nName\n\n(Prof. )?Calvin\n\nCredentials\n\nB.A. Mathematics\nB.S., M.S., Ph.D. Computer Science\n\nPronouns\n\nthey/them"
  },
  {
    "objectID": "00_welcome.rjs.html#the-great-work",
    "href": "00_welcome.rjs.html#the-great-work",
    "title": "Welcome",
    "section": "The Great Work",
    "text": "The Great Work\n\nThesis Title\n\nMining Secure Behavior of Hardware Designs\n\nPlain English\n\nJust as there are bugs in code that makes software, modern hardware is also written in code and therefore may contain bugs. I find these bugs."
  },
  {
    "objectID": "00_welcome.rjs.html#course-format",
    "href": "00_welcome.rjs.html#course-format",
    "title": "Welcome",
    "section": "Course Format",
    "text": "Course Format\n\nLecture Monday\nLab Wednesday\nHomework due Friday 1440 PT (the next Friday)\nIn-class midterm week of 10/06\nFinal project due whenever the final is scheduled.\n\nWaiting on registrar to announce."
  },
  {
    "objectID": "00_welcome.rjs.html#ungrading",
    "href": "00_welcome.rjs.html#ungrading",
    "title": "Welcome",
    "section": "Ungrading++",
    "text": "Ungrading++\n\nYour voices have been heard: &gt; I think failing my systems class was the best thing that happened to me.\n\n\nThis course demanded strong self-motivation… Thus, I didn’t learn as much as I might’ve if grading mattered more."
  },
  {
    "objectID": "00_welcome.rjs.html#proposal",
    "href": "00_welcome.rjs.html#proposal",
    "title": "Welcome",
    "section": "Proposal",
    "text": "Proposal\n\nI will offer two option\n\nUngrading\nSpecification Grading\n\nVote as a class (anonymously)\nI update syllabus before add/drop ends."
  },
  {
    "objectID": "00_welcome.rjs.html#ungrading-1",
    "href": "00_welcome.rjs.html#ungrading-1",
    "title": "Welcome",
    "section": "1. Ungrading",
    "text": "1. Ungrading\n\nI provide autograders for all assignments except final.\n\nOr a reference solution with a rubric, if automated testing is too weird (with spoiler alerts).\nI will have a final reference solution but will at most share snippets individually.\n\nYou do whatever you want.\nEnrolled students get an A."
  },
  {
    "objectID": "00_welcome.rjs.html#specification-grading",
    "href": "00_welcome.rjs.html#specification-grading",
    "title": "Welcome",
    "section": "2. Specification Grading",
    "text": "2. Specification Grading\n\nAll the rage. I was never fan but tell me what you think.\nBasically, I will assign some stuff but you don’t have to do all of it perfectly.\n\nNo partial credit, everything is yes/no grading.\n\nI took distributions over final, midterm, and Lab/HW"
  },
  {
    "objectID": "00_welcome.rjs.html#it-pays-to-get-as",
    "href": "00_welcome.rjs.html#it-pays-to-get-as",
    "title": "Welcome",
    "section": "It pays to get A’s",
    "text": "It pays to get A’s\n\n\n\nGrade\nRequirements\n\n\n\n\nA\nFinal meets spec\n\n\nA\n90% ave HW/Lab/Midterm, Final compiles\n\n\nA-\n90% ave HW/Lab, Midterm/Final compile\n\n\nA-\nMidterm meets spec, Final compiles"
  },
  {
    "objectID": "00_welcome.rjs.html#but-bs-are-the-knees",
    "href": "00_welcome.rjs.html#but-bs-are-the-knees",
    "title": "Welcome",
    "section": "But B’s are the Knees",
    "text": "But B’s are the Knees\n\n\n\nGrade\nRequirements\n\n\n\n\nB+\n90% ave HW/Lab, Midterm compiles\n\n\nB\n80% ave HW/Lab, Midterm compiles\n\n\nB-\n80% ave HW/Lab"
  },
  {
    "objectID": "00_welcome.rjs.html#these-may-earn-degrees",
    "href": "00_welcome.rjs.html#these-may-earn-degrees",
    "title": "Welcome",
    "section": "These may (???) earn degrees",
    "text": "These may (???) earn degrees\n\n\n\nGrade\nRequirements\n\n\n\n\nC\n80% ave Lab\n\n\nD\n60% ave Lab\n\n\nF\nAnything else"
  },
  {
    "objectID": "00_welcome.rjs.html#lab-grading",
    "href": "00_welcome.rjs.html#lab-grading",
    "title": "Welcome",
    "section": "Lab Grading",
    "text": "Lab Grading\n\nA (=100%)\n\nMeets spec by end of class\n\nB (=90%)\n\nCompiles at end of class\n\nCan be turned into an executable.\n\n\nF (=0%)\n\nAnything else"
  },
  {
    "objectID": "00_welcome.rjs.html#hw-grading",
    "href": "00_welcome.rjs.html#hw-grading",
    "title": "Welcome",
    "section": "HW Grading",
    "text": "HW Grading\n\nA (=100%)\n\nOn time\nPasses autograder.\n\nB (=90%)\n\nOn time\nCompiles\n\nCan be turned into an executable.\n\n\nF (=0%)\n\nAnything else"
  },
  {
    "objectID": "00_welcome.rjs.html#final",
    "href": "00_welcome.rjs.html#final",
    "title": "Welcome",
    "section": "Final",
    "text": "Final\n\nCreate, document, and publish a self-hosting version control system.\nEntire codebase in Rust.\nMinimum specifications:\n\nSupport nested directory structures.\nSupport text-based files (.rs, .py, .txt)\nAllow reverting to named changes (commits).\nCompleted by you and at most a partner."
  },
  {
    "objectID": "00_welcome.rjs.html#late-work-policy",
    "href": "00_welcome.rjs.html#late-work-policy",
    "title": "Welcome",
    "section": "Late Work Policy",
    "text": "Late Work Policy\n\nLate work is not accepted.\n\nTurning in anything at all for on 90% of assignments yields B.\nMiss 100% of assignments and midterm but do the final for an A."
  },
  {
    "objectID": "00_welcome.rjs.html#ai-policy",
    "href": "00_welcome.rjs.html#ai-policy",
    "title": "Welcome",
    "section": "AI Policy",
    "text": "AI Policy\n\nI would be shocked if it is helpful to you.\nIf you think it is helpful, that is probably not a good sign.\nYou can use it (I wouldn’t)"
  },
  {
    "objectID": "00_welcome.rjs.html#collaboration-policy",
    "href": "00_welcome.rjs.html#collaboration-policy",
    "title": "Welcome",
    "section": "Collaboration Policy",
    "text": "Collaboration Policy\n\nNon-final:\n\nAny size group via enthusiastic consent.\nTurn in your own code/copy.\n\nFinal:\n\nPartners via enthusiastic consent.\nTurn in your own code/copy."
  },
  {
    "objectID": "00_welcome.rjs.html#vote",
    "href": "00_welcome.rjs.html#vote",
    "title": "Welcome",
    "section": "Vote",
    "text": "Vote\n\nIf there’s not a Forms link here I should add one quickly.\nhttps://forms.gle/Cu3FDLHvhHJ1EjYW9"
  },
  {
    "objectID": "00_welcome.rjs.html#the-hard-part",
    "href": "00_welcome.rjs.html#the-hard-part",
    "title": "Welcome",
    "section": "The Hard Part",
    "text": "The Hard Part\n\nAfter ~10 years of systems research I’ve convinced myself only two things really matter:\n\nPointers, and\nRecursion\n\nRecursion isn’t too bad…\n\n&gt;&gt;&gt; exp = lambda b, n : b if n == 1 else b*exp(b,n-1)\n&gt;&gt;&gt; exp(2,8)\n256"
  },
  {
    "objectID": "00_welcome.rjs.html#pointers",
    "href": "00_welcome.rjs.html#pointers",
    "title": "Welcome",
    "section": "Pointers",
    "text": "Pointers\n\nPointers are a beast, but without them nothing makes sense!\n\n\n\n&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; def addx():\n...     x += 1\n...\n&gt;&gt;&gt; addx()\nUnboundLocalError:\n&lt;blah blah blah error messages&gt;\n\n&gt;&gt;&gt; x = [1]\n&gt;&gt;&gt; def addx():\n...     x[0] += 1\n...\n&gt;&gt;&gt; addx()\n&gt;&gt;&gt; x\n[2]"
  },
  {
    "objectID": "00_welcome.rjs.html#insight",
    "href": "00_welcome.rjs.html#insight",
    "title": "Welcome",
    "section": "Insight",
    "text": "Insight\n\nDefinition:\n\nPointers: Variables that store memory addresses.\nRecursion: Functions calling themselves to solve sub-problems.\n\nImportance:\n\nCore to efficient algorithms and memory management in low-level programming."
  },
  {
    "objectID": "00_welcome.rjs.html#python-and-pointers",
    "href": "00_welcome.rjs.html#python-and-pointers",
    "title": "Welcome",
    "section": "Python and Pointers",
    "text": "Python and Pointers\n\nWhy not .py (.js, .java, .cs, .cpp, etc)?\n\nThese languages abstract memory.\nThis abstraction makes computation unclear\nThis lack of clarity:\n\nAdversely impacts education\nComplicates low-level design\nLeads to low performance\n\nGood languages (except Java) but not for us"
  },
  {
    "objectID": "00_welcome.rjs.html#rust-and-pointers",
    "href": "00_welcome.rjs.html#rust-and-pointers",
    "title": "Welcome",
    "section": "Rust and Pointers",
    "text": "Rust and Pointers\n\nRust:\n\nObscures pointers, but…\nDoes not obscure memory.\n\nThis is good!\n\nMemory matters, but pointers are historical accident.\n\nYou should probably use Rust in every application where correctness or performance matters."
  },
  {
    "objectID": "00_welcome.rjs.html#rust-and-recursion",
    "href": "00_welcome.rjs.html#rust-and-recursion",
    "title": "Welcome",
    "section": "Rust and Recursion",
    "text": "Rust and Recursion\n\nSeparately, Rust is built on one of the most exciting ongoing computer science research efforts:\nLLVM (stands for LLVM)\nBasically, a way of turning human-readable code into machine-executable code.\n\nVery good at turning recursion into iteration and/or vice versa.\n\nSo Rust experiences less costs on recursion than many other languages."
  },
  {
    "objectID": "00_welcome.rjs.html#git",
    "href": "00_welcome.rjs.html#git",
    "title": "Welcome",
    "section": "Git",
    "text": "Git\n\nIf you don’t know git, you should soon.\nGit corresponds, like the others, to a command: git\n\nIt is common now to use other techniques, but the command remains extremely stable\n\nQuoth GitHub, the first and greatest of the collaboration tools:\n\n\nIf you want a lot of control and flexibility, you can use the command line."
  },
  {
    "objectID": "00_welcome.rjs.html#git-example",
    "href": "00_welcome.rjs.html#git-example",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nSo basically, you have things called repositories or “repos”\n\n\n\n\n\n\nflowchart LR\n  A(My ️‍🔥 code repo)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-1",
    "href": "00_welcome.rjs.html#git-example-1",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nThen you realize you wrote an infinite loop so you update it\n\n\n\n\n\n\nflowchart LR\n  A(My ️‍🔥 code repo v0 ) --&gt; B(My ️‍🔥 code repo v1)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-2",
    "href": "00_welcome.rjs.html#git-example-2",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nThen you come to class and realize your code is on your gaming rig in your apartment.\n\n\n\n\n\n\nflowchart LR\n  A(&lt;s&gt;My ️‍🔥 code repo v0&lt;/s&gt;) --&gt; B(&lt;s&gt;My ️‍🔥 code repo v1&lt;/s&gt;)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-3",
    "href": "00_welcome.rjs.html#git-example-3",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nSo you save your code on GitHub\n\nGH = GitHub, GR = Gaming Rig\n\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GH.‍🔥 v0)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-4",
    "href": "00_welcome.rjs.html#git-example-4",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nBut you realize you didn’t sanitize your inputs so you update again.\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-5",
    "href": "00_welcome.rjs.html#git-example-5",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nThen you have class again and grab the GitHub version onto your LT = Laptop\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-6",
    "href": "00_welcome.rjs.html#git-example-6",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nYou notice it has the bug so you fix it again on your laptop in almost the same way\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-7",
    "href": "00_welcome.rjs.html#git-example-7",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nAnd save that back to GitHub then head back home to play Nethack on your 12000USD Gaming PC\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-8",
    "href": "00_welcome.rjs.html#git-example-8",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nYou realize you also added some ASCII art and try to send that to GitHub\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)\n  G --&gt; H(GH.‍🔥 v2)\n  C --&gt; H"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-9",
    "href": "00_welcome.rjs.html#git-example-9",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nTwo arrows into one thing is a merge conflict and out-of-scope for now.\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)\n  G --&gt; H{💥}\n  C --&gt; H"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-10",
    "href": "00_welcome.rjs.html#git-example-10",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nBasically versions of code can live in more than one place.\n\nAh, versions, our old friend…\n\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)\n  G --&gt; H{💥}\n  C --&gt; H"
  },
  {
    "objectID": "00_welcome.rjs.html#visually",
    "href": "00_welcome.rjs.html#visually",
    "title": "Welcome",
    "section": "Visually",
    "text": "Visually\n\n\n\n\n\nflowchart LR\n  B(Wordle)\n  B --&gt; C(SHA512)\n  C --&gt; D(Ed25519)\n  B --&gt; F(Graphs)\n  C --&gt; H(Merkle)\n  F --&gt; H\n  F --&gt; G(LCS)\n  H --&gt; I(VCS)\n  G --&gt; I\n  D --&gt; I\n\n\n\n\n\n\n\nLCS = Longest common subsequence, like diff\nVCS = Version Control System, like git"
  },
  {
    "objectID": "00_welcome.rjs.html#sha",
    "href": "00_welcome.rjs.html#sha",
    "title": "Welcome",
    "section": "SHA",
    "text": "SHA\n\nSHA Basics:\n\nCryptographic hash function family.\nInput data into fixed-size hash values.\n\nUse Cases:\n\nData integrity.\n\nLearning Objectives:\n\nReason about bits and bytes."
  },
  {
    "objectID": "00_welcome.rjs.html#ed25519",
    "href": "00_welcome.rjs.html#ed25519",
    "title": "Welcome",
    "section": "Ed25519",
    "text": "Ed25519\n\nEd25519 Basics:\n\nPublic-key signature system.\nBased on elliptic curve cryptography (specifically, Edwards curves).\nUses SHA-512 and Curve25519.\n\nUse Cases:\n\nConfidentiality and authentication.\n\nLearning Objectives:\n\nReason about numerical computing."
  },
  {
    "objectID": "00_welcome.rjs.html#graphs",
    "href": "00_welcome.rjs.html#graphs",
    "title": "Welcome",
    "section": "Graphs",
    "text": "Graphs\n\nIntroduce graphs as a way to:\n\nOrganize files\nCompare files\nTrack changes."
  },
  {
    "objectID": "00_welcome.rjs.html#longest-common-subseq.-lcs",
    "href": "00_welcome.rjs.html#longest-common-subseq.-lcs",
    "title": "Welcome",
    "section": "Longest Common Subseq. (LCS)",
    "text": "Longest Common Subseq. (LCS)\n\nLCS Basics:\n\nFind longest sequence of characters in the same relative order in two or more sequences, but not necessarily contiguously.\nOften solved using dynamic programming.\n\nUse Cases:\n\nFile comparison (e.g., diff utility).\n\nLearning Objectives:\n\nLinear data structure."
  },
  {
    "objectID": "00_welcome.rjs.html#merkle-trees",
    "href": "00_welcome.rjs.html#merkle-trees",
    "title": "Welcome",
    "section": "Merkle Trees",
    "text": "Merkle Trees\n\nMerkle Trees:\n\nTree structure using SHA for data integrity.\nHashes stored as nodes; pointers link them.\nLeaf nodes are RSA signatures!\n\nMerkle Trees are balanced\n\nHierarchical data structure embedded in linear data structure."
  },
  {
    "objectID": "00_welcome.rjs.html#file-system",
    "href": "00_welcome.rjs.html#file-system",
    "title": "Welcome",
    "section": "File System",
    "text": "File System\n\nThe file system a tree that cannot (easily) be embedded in a linear data structure.\n\nr\n├── DESCRIPTION\n├── Makefile\n├── NAMESPACE\n├── R\n│   └── vcd2df.R\n├── man\n│   └── vcd2df.Rd\n├── r\n├── vcd2df.Rcheck\n│   ├── 00_pkg_src\n│   │   └── vcd2df\n│   │       ├── DESCRIPTION\n│   │       ├── NAMESPACE\n│   │       ├── R\n│   │       │   └── vcd2df.R\n│   │       ├── build\n│   │       │   └── vignette.rds\n│   │       ├── inst\n│   │       │   └── doc\n│   │       │       ├── index.R\n│   │       │       ├── index.html\n│   │       │       └── index.qmd\n│   │       ├── man\n│   │       │   └── vcd2df.Rd\n│   │       └── vignettes\n│   │           └── index.qmd\n│   ├── 00check.log\n│   ├── 00install.out\n│   ├── Rdlatex.log\n│   ├── vcd2df\n│   │   ├── DESCRIPTION\n│   │   ├── INDEX\n│   │   ├── Meta\n│   │   │   ├── Rd.rds\n│   │   │   ├── features.rds\n│   │   │   ├── hsearch.rds\n│   │   │   ├── links.rds\n│   │   │   ├── nsInfo.rds\n│   │   │   ├── package.rds\n│   │   │   └── vignette.rds\n│   │   ├── NAMESPACE\n│   │   ├── R\n│   │   │   ├── vcd2df\n│   │   │   ├── vcd2df.rdb\n│   │   │   └── vcd2df.rdx\n│   │   ├── doc\n│   │   │   ├── index.R\n│   │   │   ├── index.html\n│   │   │   └── index.qmd\n│   │   ├── help\n│   │   │   ├── AnIndex\n│   │   │   ├── aliases.rds\n│   │   │   ├── paths.rds\n│   │   │   ├── vcd2df.rdb\n│   │   │   └── vcd2df.rdx\n│   │   └── html\n│   │       ├── 00Index.html\n│   │       └── R.css\n│   ├── vcd2df-Ex.R\n│   ├── vcd2df-Ex.Rout\n│   ├── vcd2df-Ex.pdf\n│   ├── vcd2df-manual.log\n│   └── vcd2df-manual.pdf\n├── vcd2df_1.0.1.tar.gz\n└── vignettes\n    └── index.qmd"
  },
  {
    "objectID": "00_welcome.rjs.html#vim",
    "href": "00_welcome.rjs.html#vim",
    "title": "Welcome",
    "section": "Vim",
    "text": "Vim\n\nYou should use vim or another console-based editor as a component of your learning in this class.\nThis will not be assessed (how can it be) but will likely be expected in a non-trivial subset of settings this course material will be useful.\nI will live-code in either vim or helix"
  },
  {
    "objectID": "01_rustup.rjs.html#announcements",
    "href": "01_rustup.rjs.html#announcements",
    "title": "Rustup",
    "section": "Announcements",
    "text": "Announcements\n\nLab Day\n\nSet up environment"
  },
  {
    "objectID": "01_rustup.rjs.html#homework",
    "href": "01_rustup.rjs.html#homework",
    "title": "Rustup",
    "section": "Homework",
    "text": "Homework\n\n“Wordle” is ready after this class.\n\nIt will teach you all the Rust you need to know, I think.\nWindows officially no longer supported.\n\nDue Friday, 19 Sept. at 1440 ET."
  },
  {
    "objectID": "01_rustup.rjs.html#today",
    "href": "01_rustup.rjs.html#today",
    "title": "Rustup",
    "section": "Today",
    "text": "Today\n\nSet up your operating system, if it is not UNIX-based.\nInstall Rust.\nInstall Git\nBonus!\n\nInstall Vim, Neovim, or Helix."
  },
  {
    "objectID": "01_rustup.rjs.html#windows",
    "href": "01_rustup.rjs.html#windows",
    "title": "Rustup",
    "section": "Windows",
    "text": "Windows\n\nWindows usage is not supported in the course.\nIf you are using Windows, you must:\n\nUse Windows Subsystem for Linux (Recommended)\nUse Docker or Podman\nUse Git Bash or Mingw in some other way (Discouraged)\nUse Cygwin (Discouraged) ### WSL 2\n\nWindows Subsystem for Linux\nFollow this guide\nNotes:\n\nUse WSL 2. It is the default.\nI recommend using Ubuntu distribution. You will be asked.\nI prefer Windows Terminal.\n\nWindows key -&gt; “Terminal” -&gt; Enter -&gt; wsl"
  },
  {
    "objectID": "01_rustup.rjs.html#rustup",
    "href": "01_rustup.rjs.html#rustup",
    "title": "Rustup",
    "section": "Rustup",
    "text": "Rustup\n\nOn your UNIX-based OS:\n\nLinux\nMacOS\nWSL 2\nFreeBSD\n\nOpen the command line and run the following:\n\ncurl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n\nRead more"
  },
  {
    "objectID": "01_rustup.rjs.html#verify",
    "href": "01_rustup.rjs.html#verify",
    "title": "Rustup",
    "section": "Verify",
    "text": "Verify\n\nTo ensure you have a Rust installation, run:\n\nrustc --version\n\nAt time of slide creation, I saw this version:\n\nrustc 1.87.0 (17067e9ac 2025-05-09)"
  },
  {
    "objectID": "01_rustup.rjs.html#git-installation",
    "href": "01_rustup.rjs.html#git-installation",
    "title": "Rustup",
    "section": "Git Installation",
    "text": "Git Installation\n\nEnsure you have a Git installation:\n\nWindows:\n\nLaunch WSL\n\nwsl ~\n\nInstall git within WSL\n\nsudo apt install git\nMacOS:\n\nLaunch the terminal and then:\n\nxcode-select --install"
  },
  {
    "objectID": "01_rustup.rjs.html#verify-1",
    "href": "01_rustup.rjs.html#verify-1",
    "title": "Rustup",
    "section": "Verify",
    "text": "Verify\n\nVerify install via:\n\ngit --version\n\nI had:\n\ngit version 2.34.1"
  },
  {
    "objectID": "01_rustup.rjs.html#account",
    "href": "01_rustup.rjs.html#account",
    "title": "Rustup",
    "section": "Account",
    "text": "Account\n\nEnsure you have an account on GitHub.\nRead More"
  },
  {
    "objectID": "01_rustup.rjs.html#repository",
    "href": "01_rustup.rjs.html#repository",
    "title": "Rustup",
    "section": "Repository",
    "text": "Repository\n\nCreate a repository for this class.\nRequirements\n\nName is 271rs\nUse this template\nMay be public or private to you and me (cd-public).\n\nRead more\n\nMust email me a link to your repository from your @willamette.edu email.\n\nhttps://github.com/cd-example/271rs"
  },
  {
    "objectID": "01_rustup.rjs.html#remote",
    "href": "01_rustup.rjs.html#remote",
    "title": "Rustup",
    "section": "Remote",
    "text": "Remote\n\nWe have now created a remote repository on GitHub.\n\nRemote as in “not on our computer we are using right now”\nAs in “on a web server somewhere”\n\nNo we will make a local repository on our own computer.\nThen connect them!"
  },
  {
    "objectID": "01_rustup.rjs.html#security-concession",
    "href": "01_rustup.rjs.html#security-concession",
    "title": "Rustup",
    "section": "Security Concession",
    "text": "Security Concession\n\nWe will use SSH, the “Secure Shell Protocol”\nIt is supported by git/GitHub and all major operating systems."
  },
  {
    "objectID": "01_rustup.rjs.html#keygen",
    "href": "01_rustup.rjs.html#keygen",
    "title": "Rustup",
    "section": "Keygen",
    "text": "Keygen\n\nSSH is based around having “keys”\n\nUnder the hood, these are special numbers with special properties related to primes, basically.\n\nWe generate a special unique key we can use as a password or signature.\n\nssh-keygen"
  },
  {
    "objectID": "01_rustup.rjs.html#prompts",
    "href": "01_rustup.rjs.html#prompts",
    "title": "Rustup",
    "section": "Prompts",
    "text": "Prompts\n\nThis example uses (1) the default location and (2) no passphrase.\n\nThis is less secure but easier to manage.\nWork in a passphrase as soon as you can!\n\n\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/home/calvin/.ssh/id_ed25519): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/calvin/.ssh/id_ed25519\n$ cat ~/.ssh/id_ed25519.pub \nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIE5cnx/tgBp8v/LnuHz28evmnRPrnlz3cvYaAAM4G0ik calvin@calvin-Precision-3490\n\nYou now have a key! Let’s find a lock."
  },
  {
    "objectID": "01_rustup.rjs.html#github-1",
    "href": "01_rustup.rjs.html#github-1",
    "title": "Rustup",
    "section": "GitHub",
    "text": "GitHub\n\nThe purpose of this exercise is to connect to GitHub!\nWe will mostly use git for that, but we can check if we have a connection easily:\n\nssh -T git@github.com\n\nRead more"
  },
  {
    "objectID": "01_rustup.rjs.html#example",
    "href": "01_rustup.rjs.html#example",
    "title": "Rustup",
    "section": "Example",
    "text": "Example\n\nThis is what I see:\n\nThe authenticity of host 'github.com (140.82.116.3)' can't be established.\nED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])?\n\nBefore saying “yes” or “no” compare versus the “public SSH key fingerprints”\n\nCheck them here\n\nBy default, the modern keygen uses “Ed25519” so compare those keys, and click “yes” if they match!"
  },
  {
    "objectID": "01_rustup.rjs.html#connecting",
    "href": "01_rustup.rjs.html#connecting",
    "title": "Rustup",
    "section": "Connecting",
    "text": "Connecting\n\nAfter confirming the key correctness, you will likely see this.\n\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added 'github.com' (ED25519) to the list of known hosts.\ngit@github.com: Permission denied (publickey)."
  },
  {
    "objectID": "01_rustup.rjs.html#one-way",
    "href": "01_rustup.rjs.html#one-way",
    "title": "Rustup",
    "section": "One Way",
    "text": "One Way\n\nNow we have instructed our computer to trust GitHub.\nTo save our code to GitHub, we must also get GitHub to trust our computer.\nWe generated our key, now we must match it to our lock on GitHub!"
  },
  {
    "objectID": "01_rustup.rjs.html#github-pt-1",
    "href": "01_rustup.rjs.html#github-pt-1",
    "title": "Rustup",
    "section": "GitHub pt 1",
    "text": "GitHub pt 1\n\nWe follow this guide\nReturn to GitHub and in the top right click your profile.\n\nFor me, a picture of myself.\n\nScroll down to “Settings” and click.\n\nLast in 2nd grouping, for me."
  },
  {
    "objectID": "01_rustup.rjs.html#github-pt-2",
    "href": "01_rustup.rjs.html#github-pt-2",
    "title": "Rustup",
    "section": "GitHub pt 2",
    "text": "GitHub pt 2\n\nWithin settings left-side menu click “SSH and GPG keys”\n\nMiddle of 2nd group (Access) for me.\n\nWithin the center block click New SSH key in the top right of the block."
  },
  {
    "objectID": "01_rustup.rjs.html#prompt",
    "href": "01_rustup.rjs.html#prompt",
    "title": "Rustup",
    "section": "Prompt",
    "text": "Prompt\n\nI get a page “Add new SSH Key”.\nI provide a title (like “For 271rs class” or “Laptop”)\nNow we’ll get our key from our system to use.\nRecall we previously generated a key to the default location, like /home/calvin/.ssh/id_ed25519\n\nIf you don’t remember, just type ssh-keygen and it’ll show you."
  },
  {
    "objectID": "01_rustup.rjs.html#copypaste",
    "href": "01_rustup.rjs.html#copypaste",
    "title": "Rustup",
    "section": "Copy/Paste",
    "text": "Copy/Paste\n\nTo get the key for GitHub, we can can\n\ncat that file in the command line\nCopy from the command line\nPaste into the GitHub “Key” field\nClick Add SSH key"
  },
  {
    "objectID": "01_rustup.rjs.html#ssh-test",
    "href": "01_rustup.rjs.html#ssh-test",
    "title": "Rustup",
    "section": "SSH Test",
    "text": "SSH Test\n\nAfter adding the key to the account, I confirm via SSH like so:\n\nssh -T git@github.com\n\nI see the following:\n\nHi cd-public! You've successfully authenticated, but GitHub does not provide shell access."
  },
  {
    "objectID": "01_rustup.rjs.html#clone-pt1",
    "href": "01_rustup.rjs.html#clone-pt1",
    "title": "Rustup",
    "section": "Clone pt1",
    "text": "Clone pt1\n\nNavigate to the repository webpage, like github.com/cd-example/271rs\nFind the &lt;&gt; Code button in the top right.\nClick it:\n\nSelect the top “local” tab (for or local repository)\nSelect the SSH option (for our SSH key)\nCopy the name, like\n\n\n\ngit@github.com:cd-example/271rs"
  },
  {
    "objectID": "01_rustup.rjs.html#clone-pt2",
    "href": "01_rustup.rjs.html#clone-pt2",
    "title": "Rustup",
    "section": "Clone pt2",
    "text": "Clone pt2\n\nWithin terminal, where you keep files for this class.\n\nProbably just do\n\ncd ~\ngit clone git@github.com:cd-example/271rs \nVerify by listing the contents of the 271rs directory via:\n\nls 271rs\n\nYou should see a README.md and a LICENSE"
  },
  {
    "objectID": "01_rustup.rjs.html#enter-the-repository",
    "href": "01_rustup.rjs.html#enter-the-repository",
    "title": "Rustup",
    "section": "Enter the Repository",
    "text": "Enter the Repository\n\nTo change the directory within which you are working in the commandline from your home to the repository for this class, do:\n\ncd 271rs\n\nVerify the change via\n\npwd\n\nThis will give the full address of your class folder, ending in 271rs"
  },
  {
    "objectID": "01_rustup.rjs.html#today-1",
    "href": "01_rustup.rjs.html#today-1",
    "title": "Rustup",
    "section": "Today",
    "text": "Today\n\nTo complete the lab today, add a 01/rustup.md file to your 271rs\nSend me a link to a 271rs repository I have permission to view.\n\nTo be clear:\n\nI must receive an email with a hyperlink to a GitHub repository.\nI must have view access to public repository or a repository on which I am added as a collaborator."
  },
  {
    "objectID": "01_rustup.rjs.html#names-matter",
    "href": "01_rustup.rjs.html#names-matter",
    "title": "Rustup",
    "section": "Names Matter",
    "text": "Names Matter\n\nYour submission will be tested be a script.\n\nThe file must be named rustup.md\nIt must be in a folder named 01\nThe repository must be named 271rs\nNo other arrangement constitutes a lab submission.\nThe contents of rustup.md are not relevant."
  },
  {
    "objectID": "01_rustup.rjs.html#useful-commands",
    "href": "01_rustup.rjs.html#useful-commands",
    "title": "Rustup",
    "section": "Useful commands",
    "text": "Useful commands\n\nYou may use ls to list files/folders.\nYou make use mkdir 01 to creat the 01 folder.\nYou may use vim 01/rustup.md to edit the rustup.md file in the 01 folder.\n\nThe 01 folder must exist to do this.\n\nLearn more here"
  },
  {
    "objectID": "01_rustup.rjs.html#file-editor",
    "href": "01_rustup.rjs.html#file-editor",
    "title": "Rustup",
    "section": "File Editor",
    "text": "File Editor\n\nLet’s make a new file.\nI recommend using vim, neovim, or helix.\nProbably already have it on MacOS.\nOn WSL install via\n\nsudo apt install vim"
  },
  {
    "objectID": "01_rustup.rjs.html#file-editting",
    "href": "01_rustup.rjs.html#file-editting",
    "title": "Rustup",
    "section": "File Editting",
    "text": "File Editting\n\nTo create said file, type vim then the name of the file.\nIf you just cloned 271rs, there will be a 271rs folder into which you should create a 01 folder.\n\nStands for week 0, day 1\n\nvim 01/rustup.md"
  },
  {
    "objectID": "01_rustup.rjs.html#using-vim",
    "href": "01_rustup.rjs.html#using-vim",
    "title": "Rustup",
    "section": "Using vim",
    "text": "Using vim\n\nThere’s more to life that using vim but basically:\n\nPress i to enter “insert mode” (so you can type)\nWhen you are done typing, press ESC then type :x to save and exit.\nRead more\n\nJust type some notes you have from today."
  },
  {
    "objectID": "01_rustup.rjs.html#check-status",
    "href": "01_rustup.rjs.html#check-status",
    "title": "Rustup",
    "section": "Check Status",
    "text": "Check Status\n\nYou have now added a new file to your repository.\nI consult status often, yours will likely look like this:\n\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        01/rustup.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
  },
  {
    "objectID": "01_rustup.rjs.html#add",
    "href": "01_rustup.rjs.html#add",
    "title": "Rustup",
    "section": "Add",
    "text": "Add\n\nThe first thing we not is that there are “Untracked files”\nWhile we made a hello.py and have it in our hello-world directory, it isn’t yet “tracked” by git!\nBy default, git only keeps track of what we tell it to!\nSo, we tell it to track our code!\n\ngit add 01/rustup.md"
  },
  {
    "objectID": "01_rustup.rjs.html#status",
    "href": "01_rustup.rjs.html#status",
    "title": "Rustup",
    "section": "Status",
    "text": "Status\n\nI check status again\n\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   01_rustup.md"
  },
  {
    "objectID": "01_rustup.rjs.html#commit",
    "href": "01_rustup.rjs.html#commit",
    "title": "Rustup",
    "section": "Commit",
    "text": "Commit\n\nWith git now aware of hello.py, we need to commit or changes for git to save them.\n\nSimilar to saving files to the file system.\nThere are, of course, ways to automate this.\n\nThis probably won’t work at first (next slide!) but try:\n\ngit commit -a -m \"first commit\""
  },
  {
    "objectID": "01_rustup.rjs.html#a--m",
    "href": "01_rustup.rjs.html#a--m",
    "title": "Rustup",
    "section": "“-a -m”",
    "text": "“-a -m”\n\nCommits require a commit message (like a version name or number) so specify with -m\nUsually I provide -a to commit “all” files.\nI usually make some effort to make my life easier with specific commit messages, perhaps listing:\n\nWhat I’m trying to do\nWhy?"
  },
  {
    "objectID": "01_rustup.rjs.html#config",
    "href": "01_rustup.rjs.html#config",
    "title": "Rustup",
    "section": "Config",
    "text": "Config\n\nIf you haven’t used git on your system before, you’ll have to tell git who you are.\n\nIn git there are no anonymous changes - you have to sign every change you make.\n\nYou’ll be prompted to provide something like this:\n\ngit config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\""
  },
  {
    "objectID": "01_rustup.rjs.html#my-name",
    "href": "01_rustup.rjs.html#my-name",
    "title": "Rustup",
    "section": "My name",
    "text": "My name\n\nI often include which computer I’m using in my name and also don’t use a real email address.\n\nMy GitHub account is already attached to an email address, so I use a throwaway for commits.\n\n\ngit config --global user.email \"prof_calvin@c89&gt;rs.edu\"\ngit config --global user.name \"Calvin for Class\""
  },
  {
    "objectID": "01_rustup.rjs.html#looping-back",
    "href": "01_rustup.rjs.html#looping-back",
    "title": "Rustup",
    "section": "Looping Back",
    "text": "Looping Back\n\nOnce you have provided your identity, you can successfuly complete a commit.\n\ngit commit -a -m \"first commit\"\n\nThis will:\n\nMark current code as a version, named by your commit message.\n\nThis won’t:\n\nDo anything to GitHub."
  },
  {
    "objectID": "01_rustup.rjs.html#push",
    "href": "01_rustup.rjs.html#push",
    "title": "Rustup",
    "section": "Push",
    "text": "Push\n\nA commit saves changing on your computer.\nTo save on GitHub, push changes to the cloud\n\ngit push\n\nAfter a moment and some diagnostic text, you should be able to see your code on GitHub, possibly after refreshing the page!"
  },
  {
    "objectID": "01_rustup.rjs.html#diagnostics",
    "href": "01_rustup.rjs.html#diagnostics",
    "title": "Rustup",
    "section": "Diagnostics",
    "text": "Diagnostics\n\nFor example, you might see the following:\n\nEnumerating objects: 27, done.\nCounting objects: 100% (27/27), done.\nDelta compression using up to 22 threads\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (16/16), 98.54 KiB | 2.46 MiB/s, done.\nTotal 16 (delta 11), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (11/11), completed with 10 local objects.\nTo github.com:cd-example/271rs.git\n   adaa3a7..ba3c794  main -&gt; main"
  },
  {
    "objectID": "01_rustup.rjs.html#verify-2",
    "href": "01_rustup.rjs.html#verify-2",
    "title": "Rustup",
    "section": "Verify",
    "text": "Verify\n\nEnsure you have a 01/rustup.md\nEmail me."
  },
  {
    "objectID": "01_rustup.rjs.html#easier-after",
    "href": "01_rustup.rjs.html#easier-after",
    "title": "Rustup",
    "section": "Easier After",
    "text": "Easier After\n\nA lot of what we did, we only have to do once:\n\ngit config\nssh-keygen\nset origin\n\nMany are special cases:\n\nOnly have to make new repositories for… new repositories (likely projects)\nOnly have to git add for new files."
  },
  {
    "objectID": "01_rustup.rjs.html#quick-example",
    "href": "01_rustup.rjs.html#quick-example",
    "title": "Rustup",
    "section": "Quick Example",
    "text": "Quick Example\n\nLet’s add 02/hi_world.rs\nWe’ll create a new file at the command line.\n\nvim 02/hi_world.rs\n\nAdd any text\n\n\n\nhi_world.rs\n\nWait I don't know rust yet."
  },
  {
    "objectID": "01_rustup.rjs.html#add-commit-push",
    "href": "01_rustup.rjs.html#add-commit-push",
    "title": "Rustup",
    "section": "Add, Commit, Push",
    "text": "Add, Commit, Push\n\nTo get the code onto Github, add to the repo:\n\ngit add hi_world.rs \n\nCommit changes to a version:\n\ngit commit -a -m \"You say hello, I say goodbye\"\n\nPush to GitHub\n\ngit push\n\nAnd that’s that!"
  },
  {
    "objectID": "01_rustup.rjs.html#altogether",
    "href": "01_rustup.rjs.html#altogether",
    "title": "Rustup",
    "section": "Altogether",
    "text": "Altogether\n\nFor a single copy/paste\n\ngit add bye.py\ngit commit -a -m \"You say hello, I say goodbye\"\ngit push\n\nIf it works, you’ll see the change on GitHub!"
  },
  {
    "objectID": "01_rustup.rjs.html#again",
    "href": "01_rustup.rjs.html#again",
    "title": "Rustup",
    "section": "Again",
    "text": "Again\n\nPerhaps we wish to be more correct with a well-formed Rust comment.\n\n\n\nbye.py\n\n// TODO: Homework 0 \n\n\nWe’ll learn Rust latter."
  },
  {
    "objectID": "01_rustup.rjs.html#no-add",
    "href": "01_rustup.rjs.html#no-add",
    "title": "Rustup",
    "section": "No Add",
    "text": "No Add\n\nDon’t need an add this time!\n\ngit commit -a -m \"Rust comment\"\ngit push"
  },
  {
    "objectID": "01_rustup.rjs.html#pulling",
    "href": "01_rustup.rjs.html#pulling",
    "title": "Rustup",
    "section": "Pulling",
    "text": "Pulling\n\nTo get remote changes reflected locally, simply use\n\ngit pull\n\nThis will be how assignment feedback is distributed.\nJust git pull every time you start working, basically.\nAlso good when you are working on multiple devices."
  },
  {
    "objectID": "01_rustup.html",
    "href": "01_rustup.html",
    "title": "Rustup",
    "section": "",
    "text": "Lab Day\n\nSet up environment",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#announcements",
    "href": "01_rustup.html#announcements",
    "title": "Rustup",
    "section": "",
    "text": "Lab Day\n\nSet up environment",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#homework",
    "href": "01_rustup.html#homework",
    "title": "Rustup",
    "section": "Homework",
    "text": "Homework\n\n“Wordle” is ready after this class.\n\nIt will teach you all the Rust you need to know, I think.\nWindows officially no longer supported.\n\nDue Friday, 19 Sept. at 1440 ET.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#today",
    "href": "01_rustup.html#today",
    "title": "Rustup",
    "section": "Today",
    "text": "Today\n\nSet up your operating system, if it is not UNIX-based.\nInstall Rust.\nInstall Git\nBonus!\n\nInstall Vim, Neovim, or Helix.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#windows",
    "href": "01_rustup.html#windows",
    "title": "Rustup",
    "section": "Windows",
    "text": "Windows\n\nWindows usage is not supported in the course.\nIf you are using Windows, you must:\n\nUse Windows Subsystem for Linux (Recommended)\nUse Docker or Podman\nUse Git Bash or Mingw in some other way (Discouraged)\nUse Cygwin (Discouraged) ### WSL 2\n\nWindows Subsystem for Linux\nFollow this guide\nNotes:\n\nUse WSL 2. It is the default.\nI recommend using Ubuntu distribution. You will be asked.\nI prefer Windows Terminal.\n\nWindows key -&gt; “Terminal” -&gt; Enter -&gt; wsl\n\n\n\n\n\nDocker or Podman\n\nBoth will require WSL 2, but install for you\nDocker has better Windows support, I believe Podman is seeing more use.\nFollow this guide.\nNotes:\n\nUse WSL 2 backend.\nYou are responsible for teaching yourself containers.\nSlides for last year.\n\n\n\n\n\nGit Bash\n\nI have set up guide for Git Bash for another course\nThis seemed like it could work. I won’t be checking.\n\n\n\n\nCygwin\n\nI have no idea how Cygwin works but it’s pretty cool.\nBasically no longer in use due to WSL 2 and Docker.\nFollow this guide",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#rustup",
    "href": "01_rustup.html#rustup",
    "title": "Rustup",
    "section": "Rustup",
    "text": "Rustup\n\nOn your UNIX-based OS:\n\nLinux\nMacOS\nWSL 2\nFreeBSD\n\nOpen the command line and run the following:\n\ncurl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n\nRead more",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#verify",
    "href": "01_rustup.html#verify",
    "title": "Rustup",
    "section": "Verify",
    "text": "Verify\n\nTo ensure you have a Rust installation, run:\n\nrustc --version\n\nAt time of slide creation, I saw this version:\n\nrustc 1.87.0 (17067e9ac 2025-05-09)",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#git-installation",
    "href": "01_rustup.html#git-installation",
    "title": "Rustup",
    "section": "Git Installation",
    "text": "Git Installation\n\nEnsure you have a Git installation:\n\nWindows:\n\nLaunch WSL\n\nwsl ~\n\nInstall git within WSL\n\nsudo apt install git\nMacOS:\n\nLaunch the terminal and then:\n\nxcode-select --install",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#verify-1",
    "href": "01_rustup.html#verify-1",
    "title": "Rustup",
    "section": "Verify",
    "text": "Verify\n\nVerify install via:\n\ngit --version\n\nI had:\n\ngit version 2.34.1",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#account",
    "href": "01_rustup.html#account",
    "title": "Rustup",
    "section": "Account",
    "text": "Account\n\nEnsure you have an account on GitHub.\nRead More",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#repository",
    "href": "01_rustup.html#repository",
    "title": "Rustup",
    "section": "Repository",
    "text": "Repository\n\nCreate a repository for this class.\nRequirements\n\nName is 271rs\nUse this template\nMay be public or private to you and me (cd-public).\n\nRead more\n\nMust email me a link to your repository from your @willamette.edu email.\n\nhttps://github.com/cd-example/271rs",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#remote",
    "href": "01_rustup.html#remote",
    "title": "Rustup",
    "section": "Remote",
    "text": "Remote\n\nWe have now created a remote repository on GitHub.\n\nRemote as in “not on our computer we are using right now”\nAs in “on a web server somewhere”\n\nNo we will make a local repository on our own computer.\nThen connect them!",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#security-concession",
    "href": "01_rustup.html#security-concession",
    "title": "Rustup",
    "section": "Security Concession",
    "text": "Security Concession\n\nWe will use SSH, the “Secure Shell Protocol”\nIt is supported by git/GitHub and all major operating systems.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#keygen",
    "href": "01_rustup.html#keygen",
    "title": "Rustup",
    "section": "Keygen",
    "text": "Keygen\n\nSSH is based around having “keys”\n\nUnder the hood, these are special numbers with special properties related to primes, basically.\n\nWe generate a special unique key we can use as a password or signature.\n\nssh-keygen",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#prompts",
    "href": "01_rustup.html#prompts",
    "title": "Rustup",
    "section": "Prompts",
    "text": "Prompts\n\nThis example uses (1) the default location and (2) no passphrase.\n\nThis is less secure but easier to manage.\nWork in a passphrase as soon as you can!\n\n\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/home/calvin/.ssh/id_ed25519): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/calvin/.ssh/id_ed25519\n$ cat ~/.ssh/id_ed25519.pub \nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIE5cnx/tgBp8v/LnuHz28evmnRPrnlz3cvYaAAM4G0ik calvin@calvin-Precision-3490\n\nYou now have a key! Let’s find a lock.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#github-1",
    "href": "01_rustup.html#github-1",
    "title": "Rustup",
    "section": "GitHub",
    "text": "GitHub\n\nThe purpose of this exercise is to connect to GitHub!\nWe will mostly use git for that, but we can check if we have a connection easily:\n\nssh -T git@github.com\n\nRead more",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#example",
    "href": "01_rustup.html#example",
    "title": "Rustup",
    "section": "Example",
    "text": "Example\n\nThis is what I see:\n\nThe authenticity of host 'github.com (140.82.116.3)' can't be established.\nED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])?\n\nBefore saying “yes” or “no” compare versus the “public SSH key fingerprints”\n\nCheck them here\n\nBy default, the modern keygen uses “Ed25519” so compare those keys, and click “yes” if they match!",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#connecting",
    "href": "01_rustup.html#connecting",
    "title": "Rustup",
    "section": "Connecting",
    "text": "Connecting\n\nAfter confirming the key correctness, you will likely see this.\n\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added 'github.com' (ED25519) to the list of known hosts.\ngit@github.com: Permission denied (publickey).",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#one-way",
    "href": "01_rustup.html#one-way",
    "title": "Rustup",
    "section": "One Way",
    "text": "One Way\n\nNow we have instructed our computer to trust GitHub.\nTo save our code to GitHub, we must also get GitHub to trust our computer.\nWe generated our key, now we must match it to our lock on GitHub!",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#github-pt-1",
    "href": "01_rustup.html#github-pt-1",
    "title": "Rustup",
    "section": "GitHub pt 1",
    "text": "GitHub pt 1\n\nWe follow this guide\nReturn to GitHub and in the top right click your profile.\n\nFor me, a picture of myself.\n\nScroll down to “Settings” and click.\n\nLast in 2nd grouping, for me.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#github-pt-2",
    "href": "01_rustup.html#github-pt-2",
    "title": "Rustup",
    "section": "GitHub pt 2",
    "text": "GitHub pt 2\n\nWithin settings left-side menu click “SSH and GPG keys”\n\nMiddle of 2nd group (Access) for me.\n\nWithin the center block click New SSH key in the top right of the block.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#prompt",
    "href": "01_rustup.html#prompt",
    "title": "Rustup",
    "section": "Prompt",
    "text": "Prompt\n\nI get a page “Add new SSH Key”.\nI provide a title (like “For 271rs class” or “Laptop”)\nNow we’ll get our key from our system to use.\nRecall we previously generated a key to the default location, like /home/calvin/.ssh/id_ed25519\n\nIf you don’t remember, just type ssh-keygen and it’ll show you.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#copypaste",
    "href": "01_rustup.html#copypaste",
    "title": "Rustup",
    "section": "Copy/Paste",
    "text": "Copy/Paste\n\nTo get the key for GitHub, we can can\n\ncat that file in the command line\nCopy from the command line\nPaste into the GitHub “Key” field\nClick Add SSH key",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#ssh-test",
    "href": "01_rustup.html#ssh-test",
    "title": "Rustup",
    "section": "SSH Test",
    "text": "SSH Test\n\nAfter adding the key to the account, I confirm via SSH like so:\n\nssh -T git@github.com\n\nI see the following:\n\nHi cd-public! You've successfully authenticated, but GitHub does not provide shell access.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#clone-pt1",
    "href": "01_rustup.html#clone-pt1",
    "title": "Rustup",
    "section": "Clone pt1",
    "text": "Clone pt1\n\nNavigate to the repository webpage, like github.com/cd-example/271rs\nFind the &lt;&gt; Code button in the top right.\nClick it:\n\nSelect the top “local” tab (for or local repository)\nSelect the SSH option (for our SSH key)\nCopy the name, like\n\n\n\ngit@github.com:cd-example/271rs",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#clone-pt2",
    "href": "01_rustup.html#clone-pt2",
    "title": "Rustup",
    "section": "Clone pt2",
    "text": "Clone pt2\n\nWithin terminal, where you keep files for this class.\n\nProbably just do\n\ncd ~\ngit clone git@github.com:cd-example/271rs \nVerify by listing the contents of the 271rs directory via:\n\nls 271rs\n\nYou should see a README.md and a LICENSE",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#enter-the-repository",
    "href": "01_rustup.html#enter-the-repository",
    "title": "Rustup",
    "section": "Enter the Repository",
    "text": "Enter the Repository\n\nTo change the directory within which you are working in the commandline from your home to the repository for this class, do:\n\ncd 271rs\n\nVerify the change via\n\npwd\n\nThis will give the full address of your class folder, ending in 271rs",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#today-1",
    "href": "01_rustup.html#today-1",
    "title": "Rustup",
    "section": "Today",
    "text": "Today\n\nTo complete the lab today, add a 01/rustup.md file to your 271rs\nSend me a link to a 271rs repository I have permission to view.\n\nTo be clear:\n\nI must receive an email with a hyperlink to a GitHub repository.\nI must have view access to public repository or a repository on which I am added as a collaborator.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#names-matter",
    "href": "01_rustup.html#names-matter",
    "title": "Rustup",
    "section": "Names Matter",
    "text": "Names Matter\n\nYour submission will be tested be a script.\n\nThe file must be named rustup.md\nIt must be in a folder named 01\nThe repository must be named 271rs\nNo other arrangement constitutes a lab submission.\nThe contents of rustup.md are not relevant.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#useful-commands",
    "href": "01_rustup.html#useful-commands",
    "title": "Rustup",
    "section": "Useful commands",
    "text": "Useful commands\n\nYou may use ls to list files/folders.\nYou make use mkdir 01 to creat the 01 folder.\nYou may use vim 01/rustup.md to edit the rustup.md file in the 01 folder.\n\nThe 01 folder must exist to do this.\n\nLearn more here",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#file-editor",
    "href": "01_rustup.html#file-editor",
    "title": "Rustup",
    "section": "File Editor",
    "text": "File Editor\n\nLet’s make a new file.\nI recommend using vim, neovim, or helix.\nProbably already have it on MacOS.\nOn WSL install via\n\nsudo apt install vim",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#file-editting",
    "href": "01_rustup.html#file-editting",
    "title": "Rustup",
    "section": "File Editting",
    "text": "File Editting\n\nTo create said file, type vim then the name of the file.\nIf you just cloned 271rs, there will be a 271rs folder into which you should create a 01 folder.\n\nStands for week 0, day 1\n\nvim 01/rustup.md",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#using-vim",
    "href": "01_rustup.html#using-vim",
    "title": "Rustup",
    "section": "Using vim",
    "text": "Using vim\n\nThere’s more to life that using vim but basically:\n\nPress i to enter “insert mode” (so you can type)\nWhen you are done typing, press ESC then type :x to save and exit.\nRead more\n\nJust type some notes you have from today.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#check-status",
    "href": "01_rustup.html#check-status",
    "title": "Rustup",
    "section": "Check Status",
    "text": "Check Status\n\nYou have now added a new file to your repository.\nI consult status often, yours will likely look like this:\n\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        01/rustup.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#add",
    "href": "01_rustup.html#add",
    "title": "Rustup",
    "section": "Add",
    "text": "Add\n\nThe first thing we not is that there are “Untracked files”\nWhile we made a hello.py and have it in our hello-world directory, it isn’t yet “tracked” by git!\nBy default, git only keeps track of what we tell it to!\nSo, we tell it to track our code!\n\ngit add 01/rustup.md",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#status",
    "href": "01_rustup.html#status",
    "title": "Rustup",
    "section": "Status",
    "text": "Status\n\nI check status again\n\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   01_rustup.md",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#commit",
    "href": "01_rustup.html#commit",
    "title": "Rustup",
    "section": "Commit",
    "text": "Commit\n\nWith git now aware of hello.py, we need to commit or changes for git to save them.\n\nSimilar to saving files to the file system.\nThere are, of course, ways to automate this.\n\nThis probably won’t work at first (next slide!) but try:\n\ngit commit -a -m \"first commit\"",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#a--m",
    "href": "01_rustup.html#a--m",
    "title": "Rustup",
    "section": "“-a -m”",
    "text": "“-a -m”\n\nCommits require a commit message (like a version name or number) so specify with -m\nUsually I provide -a to commit “all” files.\nI usually make some effort to make my life easier with specific commit messages, perhaps listing:\n\nWhat I’m trying to do\nWhy?",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#config",
    "href": "01_rustup.html#config",
    "title": "Rustup",
    "section": "Config",
    "text": "Config\n\nIf you haven’t used git on your system before, you’ll have to tell git who you are.\n\nIn git there are no anonymous changes - you have to sign every change you make.\n\nYou’ll be prompted to provide something like this:\n\ngit config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#my-name",
    "href": "01_rustup.html#my-name",
    "title": "Rustup",
    "section": "My name",
    "text": "My name\n\nI often include which computer I’m using in my name and also don’t use a real email address.\n\nMy GitHub account is already attached to an email address, so I use a throwaway for commits.\n\n\ngit config --global user.email \"prof_calvin@c89&gt;rs.edu\"\ngit config --global user.name \"Calvin for Class\"",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#looping-back",
    "href": "01_rustup.html#looping-back",
    "title": "Rustup",
    "section": "Looping Back",
    "text": "Looping Back\n\nOnce you have provided your identity, you can successfuly complete a commit.\n\ngit commit -a -m \"first commit\"\n\nThis will:\n\nMark current code as a version, named by your commit message.\n\nThis won’t:\n\nDo anything to GitHub.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#push",
    "href": "01_rustup.html#push",
    "title": "Rustup",
    "section": "Push",
    "text": "Push\n\nA commit saves changing on your computer.\nTo save on GitHub, push changes to the cloud\n\ngit push\n\nAfter a moment and some diagnostic text, you should be able to see your code on GitHub, possibly after refreshing the page!",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#diagnostics",
    "href": "01_rustup.html#diagnostics",
    "title": "Rustup",
    "section": "Diagnostics",
    "text": "Diagnostics\n\nFor example, you might see the following:\n\nEnumerating objects: 27, done.\nCounting objects: 100% (27/27), done.\nDelta compression using up to 22 threads\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (16/16), 98.54 KiB | 2.46 MiB/s, done.\nTotal 16 (delta 11), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (11/11), completed with 10 local objects.\nTo github.com:cd-example/271rs.git\n   adaa3a7..ba3c794  main -&gt; main",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#verify-2",
    "href": "01_rustup.html#verify-2",
    "title": "Rustup",
    "section": "Verify",
    "text": "Verify\n\nEnsure you have a 01/rustup.md\nEmail me.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#easier-after",
    "href": "01_rustup.html#easier-after",
    "title": "Rustup",
    "section": "Easier After",
    "text": "Easier After\n\nA lot of what we did, we only have to do once:\n\ngit config\nssh-keygen\nset origin\n\nMany are special cases:\n\nOnly have to make new repositories for… new repositories (likely projects)\nOnly have to git add for new files.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#quick-example",
    "href": "01_rustup.html#quick-example",
    "title": "Rustup",
    "section": "Quick Example",
    "text": "Quick Example\n\nLet’s add 02/hi_world.rs\nWe’ll create a new file at the command line.\n\nvim 02/hi_world.rs\n\nAdd any text\n\n\n\nhi_world.rs\n\nWait I don't know rust yet.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#add-commit-push",
    "href": "01_rustup.html#add-commit-push",
    "title": "Rustup",
    "section": "Add, Commit, Push",
    "text": "Add, Commit, Push\n\nTo get the code onto Github, add to the repo:\n\ngit add hi_world.rs \n\nCommit changes to a version:\n\ngit commit -a -m \"You say hello, I say goodbye\"\n\nPush to GitHub\n\ngit push\n\nAnd that’s that!",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#altogether",
    "href": "01_rustup.html#altogether",
    "title": "Rustup",
    "section": "Altogether",
    "text": "Altogether\n\nFor a single copy/paste\n\ngit add bye.py\ngit commit -a -m \"You say hello, I say goodbye\"\ngit push\n\nIf it works, you’ll see the change on GitHub!",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#again",
    "href": "01_rustup.html#again",
    "title": "Rustup",
    "section": "Again",
    "text": "Again\n\nPerhaps we wish to be more correct with a well-formed Rust comment.\n\n\n\nbye.py\n\n// TODO: Homework 0 \n\n\nWe’ll learn Rust latter.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#no-add",
    "href": "01_rustup.html#no-add",
    "title": "Rustup",
    "section": "No Add",
    "text": "No Add\n\nDon’t need an add this time!\n\ngit commit -a -m \"Rust comment\"\ngit push",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#pulling",
    "href": "01_rustup.html#pulling",
    "title": "Rustup",
    "section": "Pulling",
    "text": "Pulling\n\nTo get remote changes reflected locally, simply use\n\ngit pull\n\nThis will be how assignment feedback is distributed.\nJust git pull every time you start working, basically.\nAlso good when you are working on multiple devices.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "11_packages.rjs.html#announcements",
    "href": "11_packages.rjs.html#announcements",
    "title": "Packages",
    "section": "Announcements",
    "text": "Announcements\n\nThe second homework, “Hi cargo”, is ready after this class.\n\nIt is comically trivial.\nMostly makes sure you have everything set up.\n\nDue Friday, 12 Sept. at 1440 ET."
  },
  {
    "objectID": "11_packages.rjs.html#today",
    "href": "11_packages.rjs.html#today",
    "title": "Packages",
    "section": "Today",
    "text": "Today\n\nHybrid Day\nBuild system/package manager\n\nTheory behind Cargo\nTrap in Cargo\nUse Cargo"
  },
  {
    "objectID": "11_packages.rjs.html#interpretation",
    "href": "11_packages.rjs.html#interpretation",
    "title": "Packages",
    "section": "Interpretation",
    "text": "Interpretation\n\nWe once again address interpretation vs. compilation\n\nI think of this as programming vs. scripting\nWe can think in terms of languages - Rust/C vs. Python/JavaScript"
  },
  {
    "objectID": "11_packages.rjs.html#scripts",
    "href": "11_packages.rjs.html#scripts",
    "title": "Packages",
    "section": "Scripts",
    "text": "Scripts\n\nI regard a script a:\n\nText file\nWhich describes actions for a computer\nReadable to humans\nAnd readable to a program (like python) which can direct the computer to act\n\n\n\nwhat_up_earth.py\n\nprint(\"what up earth\")\n\nWe note that this is much closer to being a text file that it is to being a program."
  },
  {
    "objectID": "11_packages.rjs.html#programs",
    "href": "11_packages.rjs.html#programs",
    "title": "Packages",
    "section": "Programs",
    "text": "Programs\n\nWe can create programs but we also use existing programs.\nAs an example, consider the Firefox web-browser\n\nIf you use Chrome, keep that to yourself, that’s embarassing.\n\nThis is what “Firefox.exe” looks like on a Window device.\n\n\n\nFirefox.exe\n\nA{Ÿ@€ÿ\u0019w.\u000f·þ9Ï\u000fCñ~¿‰ó€Ë @€ÿ\u001a\u000f¶û\u000fCþD8ßu\u000fé¬%  Aƒù/\u000f„î%  L‹R\bHƒÂ\bHƒÀ\bM…Ò\u000f…wÿÿÿM…À\u000f„Ã\u0002  ID$\u0010¹ÿ   A\u000f·\u0010ƒú-\u000f…“\u0002  IP\u0002MH\u0004fAƒx\u0002-I\u000fDÑD\u000f·\u0002fE…À\u000f„|\u0002  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùc\u000f…P\u0002  D\u000f·B\u0002fE…À\u000f„A\u0002  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùo\u000f…\u0015\u0002  D\u000f·B\u0004fE…À\u000f„\u0006\u0002  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùn\u000f…Ú\u0001  D\u000f·B\u0006fE…À\u000f„Ë\u0001  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùt\u000f…Ÿ\u0001  D\u000f·B\bfE…À\u000f„\u0001  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùe\u000f…d\u0001  D\u000f·B\nfE…À\u000f„U\u0001  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùn\u000f…)\u0001  D\u000f·B\ffE…À\u000f„\u001a\u0001  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùt\u000f…î   D\u000f·B\u000efE…À\u000f„ß   E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùp\u000f…³   D\u000f·B\u0010fE…À\u000f„¤   E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùru|D\u000f·B\u0012fE…ÀtqE\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùouID\u000f·B\u0014fE…Àt&gt;E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùcu\u0016fƒz\u0016 \u000f„*\u001c  ë   ƒú/\u000f„i#  L‹ HƒÀ\bM…À\u000f…GýÿÿHŒ$ð\u0001  è)˜  f\u000fïÀL„$ \u0007  fA\u000f@ fA\u000f@\u0010fA\u000f H„$à\u0002  H‰D$ HÇÁÿÿÿÿ1ÒA¹0   è\u001bE\u0005 …À\u000fˆ\u001e#  L‹„$H\u0007  ¹ \u0010  1Òÿ\u0015\u001eû\u0005 H‰ÃH…À\u000f„;#  L´$@\u0007  AÇFà    AÆFø LŒ$à\u0002  AÇ\u0001   \u0002  H‰Ùº\u0001   M‰ðÿ\u0015õú\u0005 L‰ÿ…À\u000f„4#  €¼$8\u0007   \u000f…_#  D‹„$ \u0007  L¼$0\u0001  L‰ùL‰òè\u0019™  A€\u0018 \u000f…X#  L´$ \u0003  AÇFà\u0001   AÆFø 1ÉL‰òA¸ \u0002  ÿ\u00150ù\u0005 =  \u0002  t\b…À\u000f…\u0002!  ÿ\u0015\u000bù\u0005 \u000f·èÍ  \u0007€…À\u000fNèA¼)   @¶\u0001L=t˜\u0005 H‰ØHÿÀHƒø\u0002r    H‰Ùÿ\u0015°÷\u0005 @„ö\u000f…*\"  A€÷\u0001³\u00011íH\n\u0005¤\u0005 ÿ\u0015’ü\u0005 H…ÀL‹d$`\u000f…6#  L‹\u0007M…À\u000f„w\u0002  ID$\u0010¹ÿ   A\u000f·\u0010ƒú-t\u001aƒú/\u000f„»!  L‹ HƒÀ\bM…ÀuâéJ\u0002  IP\u0002MH\u0004fAƒx\u0002-I\u000fDÑD\u000f·\u0002fE…ÀtÓE\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùlu«D\u000f·B\u0002fE…Àt E\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øa\u000f…jÿÿÿD\u000f·B\u0004fE…À\u000f„[ÿÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øu\u000f…%ÿÿÿD\u000f·B\u0006fE…À\u000f„\u0016ÿÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øn\u000f…àþÿÿD\u000f·B\bfE…À\u000f„ÑþÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øc\u000f…›þÿÿD\u000f·B\nfE…À\u000f„ŒþÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øh\u000f…VþÿÿD\u000f·B\ffE…À\u000f„GþÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øe\u000f…\u0011þÿÿD\u000f·B\u000efE…À\u000f„\u0002þÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€ør\u000f…Ìýÿÿfƒz\u0010 \u000f…ÁýÿÿH‹\bH‰HøHƒÀ\bH…ÉuðAÿÍ°\u0001L‹d$`ë\u00021À„Û\u000f„Æ   A\bÇE1ÉAöÇ\u0001tyL‹\u0007M…ÀtqID$\u0010¹ÿ   A\u000f·\u0010ƒú-uIIP\u0002MP\u0004fAƒx\u0002-I\u000fDÒD\u000f·\u0002fE…Àt6E\u000f·ÐA9ÊD\u000fCÁEP¿E‰ÃA€Ë A€ú\u001aE\u000f¶ÓE\u000fCÐA€úfu\u000eéj   ƒú/\u000f„\u0010$  L‹ HƒÀ\bM…Àu™Aö×E\u000f¶ÇAƒà\u0001HŒ$ð\u0001  Hœ$ \u0007  H‰Úè\u000f˜  @Šs\u0010@„ö\u000f…à#  ƒ¼$ \u0007   I‰ÿu\u00041íë/H\n} \u0005 ÿ\u0015$ù\u0005 H…À\u000f…à%  H\n\n\nI would not regard that as readable to humans (depends on the human)"
  },
  {
    "objectID": "11_packages.rjs.html#compilation",
    "href": "11_packages.rjs.html#compilation",
    "title": "Packages",
    "section": "Compilation",
    "text": "Compilation\n\nCompilation is the process that takes text-based code to whatever we saw on the last slide.\nCan be quite simple - we made hi_world, a program, already.\n\nNotably it didn’t do a lot.\n\nrustc takes a .rs file and makes an executable\n\na program, sort of\n\nExecutables run as command with ./ prefix\n\nThis differs from python3 which runs a script without creating a corresponding program."
  },
  {
    "objectID": "11_packages.rjs.html#py-vs-.rs",
    "href": "11_packages.rjs.html#py-vs-.rs",
    "title": "Packages",
    "section": ".py vs .rs",
    "text": ".py vs .rs\n\n\n\n\n\nflowchart LR\n  A(Python) --&gt; B[fname.py file]\n  B --&gt; C[python fname.py]\n  C --&gt; D{hello world}\n  E(Rust) --&gt; F[fname.rs  file]\n  F --&gt; G[rustc fname.rs]\n  G --&gt; H[./fname]\n  H --&gt; I{hello world}\n\n\n\n\n\n\n\nYou only have to compile once to have the executable forever.\nMost programs are executables, not scripts."
  },
  {
    "objectID": "11_packages.rjs.html#rustc",
    "href": "11_packages.rjs.html#rustc",
    "title": "Packages",
    "section": "Rustc",
    "text": "Rustc\n\nrustc is rarely, if ever, used directly\n\nOver the years (since like, 1960) code has increased in complexity.\n\nMany files (think pgl.py, WordleGraphics.py, EnigmaRotor.py)\nMany libraries (think NumPy, pandas, scikit)\nComplex file systems (01/rustup.md)\n\n\nThe solution was automation."
  },
  {
    "objectID": "11_packages.rjs.html#build-systems-1",
    "href": "11_packages.rjs.html#build-systems-1",
    "title": "Packages",
    "section": "Build Systems",
    "text": "Build Systems\n\nWe don’t have a real equivalence to compilation for Python.\n\nThere is Numba\n\nWe do have a build system equivalent.\n\nI use flit, which is easy.\nI think there’s others… Setuptools? Hatchling?"
  },
  {
    "objectID": "11_packages.rjs.html#flit",
    "href": "11_packages.rjs.html#flit",
    "title": "Packages",
    "section": "Flit",
    "text": "Flit\n\nFlit solves a novel problem for Python programers.\n\nNot: Let’s make some code that I can run.\nInstead: Let’s make code that can be used in code other people run."
  },
  {
    "objectID": "11_packages.rjs.html#packaging",
    "href": "11_packages.rjs.html#packaging",
    "title": "Packages",
    "section": "Packaging",
    "text": "Packaging\n\nNumPy, pandas, and things like CS 151 PGL can be “built” into packages with Flit and friends.\n\nBasically, instead of running e.g. python3 mycode.py\nRun flit init to make a new folder, edit some code, then run flit publish to add it to pip\n\nTakeaway - package management and build systems work real well together."
  },
  {
    "objectID": "11_packages.rjs.html#wheels",
    "href": "11_packages.rjs.html#wheels",
    "title": "Packages",
    "section": "Wheels",
    "text": "Wheels\n\nThe thing that flit and friends create and distribute is not a .py file.\nRather, they are “wheels” which are not human readable.\nA lot like compiled code\nTakeaway - a good way to think of Rust is that we’re writing packages for ourselves."
  },
  {
    "objectID": "11_packages.rjs.html#cargo",
    "href": "11_packages.rjs.html#cargo",
    "title": "Packages",
    "section": "Cargo",
    "text": "Cargo\n\nWith Python, we use python3 (or pip, but perhaps as python3 -m pip).\nrustc is not really the equivalent to that:\nRather, we use cargo, the Rust build and package manager.\ncargo will handle any usage of rustc that we may need.\n\nWe can easily then distribute code across multiple files."
  },
  {
    "objectID": "11_packages.rjs.html#buildpackage",
    "href": "11_packages.rjs.html#buildpackage",
    "title": "Packages",
    "section": "Build+Package",
    "text": "Build+Package\n\nCargo is Rust’s build system (like flit) and package manager (like pip).\nWe will use Cargo instead of rustc for the rest of the term.\n\nMy sense is that this is the industry standard.\n\nWe’ll step through an example, then you’ll do a (very simple) exercise."
  },
  {
    "objectID": "11_packages.rjs.html#new",
    "href": "11_packages.rjs.html#new",
    "title": "Packages",
    "section": "New",
    "text": "New\n\nThe first thing to do with Cargo, as a rule, is great a new package.\n\nThis is kinda like creating a new .py file.\nIt is a bit more like creating a Python project from a template repository."
  },
  {
    "objectID": "11_packages.rjs.html#do-it",
    "href": "11_packages.rjs.html#do-it",
    "title": "Packages",
    "section": "Do it",
    "text": "Do it\n\nTo do so:\n\ncargo new throwaway_example\n\ncargo is, well, Cargo\nnew creates a new package.\nthrowaway_example is the name of the package1.\n\nWell, kinda. We’ll get to that."
  },
  {
    "objectID": "11_packages.rjs.html#examine",
    "href": "11_packages.rjs.html#examine",
    "title": "Packages",
    "section": "Examine",
    "text": "Examine\n\nThe most natural thing is to see what has changed.\n\nls\n\nFor me, I see a new directory: throwaway_example\nI change into the directory to examine it.\n\ncd throwaway_example\nls\n\nNot much there:\n\nCargo.toml  src"
  },
  {
    "objectID": "11_packages.rjs.html#aside-tree",
    "href": "11_packages.rjs.html#aside-tree",
    "title": "Packages",
    "section": "Aside: Tree",
    "text": "Aside: Tree\n\nCan also see directory structure.\nInstall tree with your preferred installer (perhaps apt or brew)\n\nsudo apt install tree\n\nThen use tree instead of ls\n\n.\n├── Cargo.toml\n└── src\n    └── main.rs\n\n1 directory, 2 files"
  },
  {
    "objectID": "11_packages.rjs.html#main.rs",
    "href": "11_packages.rjs.html#main.rs",
    "title": "Packages",
    "section": "main.rs",
    "text": "main.rs\n\nCargo creates projects with a default main file.\n\n\n\nmain.rs\n\nfn main() {\n    println!(\"Hello, world!\");\n}\n\n\nThe name “main” is basically mainful to Cargo - it says which, if multiple, .rs files to read first when trying to execute the code in a package.\n\nMake sure you understand that sentence."
  },
  {
    "objectID": "11_packages.rjs.html#run",
    "href": "11_packages.rjs.html#run",
    "title": "Packages",
    "section": "Run",
    "text": "Run\n\ncargo run is probably our closest equivalent to python3 throwaway_example.py or the “Run” button in VS Code.\nOf note, you can not simply do “new” then “run”.\n\n“New” creates a new folder.\n“Run” must be done from within that folder."
  },
  {
    "objectID": "11_packages.rjs.html#try-it",
    "href": "11_packages.rjs.html#try-it",
    "title": "Packages",
    "section": "Try it",
    "text": "Try it\n\nDo this:\n\ncargo run\n\nSee this:\n\n   Compiling throwaway_example v0.1.0 (/home/user/throwaway_example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.56s\n     Running `target/debug/throwaway_example`\nHello, world!"
  },
  {
    "objectID": "11_packages.rjs.html#again",
    "href": "11_packages.rjs.html#again",
    "title": "Packages",
    "section": "Again!",
    "text": "Again!\n\nIf you run again, the process will:\n\nSkip the compile step.\nBe way faster (∞x reported here)\n\n\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/throwaway_example`\nHello, world!\n\n0.56s -&gt; 0.00s"
  },
  {
    "objectID": "11_packages.rjs.html#its-fast",
    "href": "11_packages.rjs.html#its-fast",
    "title": "Packages",
    "section": "It’s fast",
    "text": "It’s fast\n\n0.56s -&gt; 0.00s\nThis is why we use languages which compile.\n\nPython took around .04s, for me.\n\ntime python3 -c \"print('Hello, world')\"\nThe results are:\n\nHello, world\n\nreal    0m0.039s\nuser    0m0.007s\nsys     0m0.008s\n\nGuess how long it takes to compile python, by the way."
  },
  {
    "objectID": "11_packages.rjs.html#other-files",
    "href": "11_packages.rjs.html#other-files",
    "title": "Packages",
    "section": "Other files",
    "text": "Other files\n\nGo ahead and add another .rs file and see what happens.\n\nAdd it to the src directory!\n\nI’ll use this one - I change filename and text, but\n\n\n\nsecondary.rs\n\nfn secondary() {\n    println!(\"Goodbye, space!\");\n}"
  },
  {
    "objectID": "11_packages.rjs.html#run-it-again",
    "href": "11_packages.rjs.html#run-it-again",
    "title": "Packages",
    "section": "Run it again…",
    "text": "Run it again…\n\nNothing changes.\n\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/throwaway_example`\nHello, world!\n\nThis is the same as adding another .py file then not using import or including its code in any other way."
  },
  {
    "objectID": "11_packages.rjs.html#swap-the-names.",
    "href": "11_packages.rjs.html#swap-the-names.",
    "title": "Packages",
    "section": "Swap the names.",
    "text": "Swap the names.\n\nI use mv (move) to change:\n\nmain.rs to old_main.rs\nsecondary.rs to main.rs\n\nThings change!\n\n   Compiling throwaway_example v0.1.0 (/home/user/throwaway_example)\nerror[E0601]: `main` function not found in crate `throwaway_example`\n --&gt; src/main.rs:3:2\n  |\n3 | }\n  |  ^ consider adding a `main` function to `src/main.rs`\n\nFor more information about this error, try `rustc --explain E0601`.\nerror: could not compile `throwaway_example` (bin \"throwaway_example\") due to 1 previous error"
  },
  {
    "objectID": "11_packages.rjs.html#requirements",
    "href": "11_packages.rjs.html#requirements",
    "title": "Packages",
    "section": "Requirements",
    "text": "Requirements\n\nYou need a main.rs with a function named main.\nnvim src/main.rs -&gt; Change “secondary” to “main” -&gt; “cargo run”\n\n   Compiling throwaway_example v0.1.0 (/home/user/throwaway_example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.33s\n     Running `target/debug/throwaway_example`\nGoodbye, space!"
  },
  {
    "objectID": "11_packages.rjs.html#carry-on-only",
    "href": "11_packages.rjs.html#carry-on-only",
    "title": "Packages",
    "section": "Carry-on only",
    "text": "Carry-on only\n\nI try to live me life without baggage.\n\n(I don’t like cargo)\n\nWhy? Well…\n\nI can’t name things the way I want\nI can’t add cargo created directories to repositories.\n\nWell, I can, but it I have to use options."
  },
  {
    "objectID": "11_packages.rjs.html#option-1-names",
    "href": "11_packages.rjs.html#option-1-names",
    "title": "Packages",
    "section": "Option 1: Names",
    "text": "Option 1: Names\n\nIt is uncommon to name a package numerically.\nIt is however, I think, useful in a course.\nIt is also, I think, useful to write packages for a course.\nSo we do so."
  },
  {
    "objectID": "11_packages.rjs.html#name-scheme",
    "href": "11_packages.rjs.html#name-scheme",
    "title": "Packages",
    "section": "Name Scheme",
    "text": "Name Scheme\n\nI have used the following scheme this term:\n\nEach class day is denoted as a two digit value.\nThe first digit represents the zero-indexed week.\nThe second digit represents the zero-index position in [\"Lecture\", \"Lab\", \"Homework\"]"
  },
  {
    "objectID": "11_packages.rjs.html#today-1",
    "href": "11_packages.rjs.html#today-1",
    "title": "Packages",
    "section": "Today",
    "text": "Today\n\nToday is one week from the first day of class, last week.\nToday is one day from the first day of the week, Monday.\nSo I denote today 11"
  },
  {
    "objectID": "11_packages.rjs.html#use-cargo",
    "href": "11_packages.rjs.html#use-cargo",
    "title": "Packages",
    "section": "Use Cargo",
    "text": "Use Cargo\n\nLet’s use cargo to make a package called 11.\n\ncargo new 11\n\nWhat happens?"
  },
  {
    "objectID": "11_packages.rjs.html#problem",
    "href": "11_packages.rjs.html#problem",
    "title": "Packages",
    "section": "Problem",
    "text": "Problem\n\u0016\u0016    Creating binary (application) `11` package\nerror: invalid character `1` in package name: `11`, the name cannot start with a digit\nIf you need a package name to not match the directory name, consider using --name flag.\nIf you need a binary with the name \"11\", use a valid package name, and set the binary name to be different from the package. This can be done by setting the binary filename to `src/bin/11.rs` or change the name in Cargo.toml with:\n\n    [[bin]]\n    name = \"11\"\n    path = \"src/main.rs\""
  },
  {
    "objectID": "11_packages.rjs.html#solution",
    "href": "11_packages.rjs.html#solution",
    "title": "Packages",
    "section": "Solution",
    "text": "Solution\n\nWe can make a folder named 11\nBut not a package named 11.\nWe use the --name flag.\n\nI use the name of these slides, rather than the number, as the package name.\n\ncargo new 11 --name packages\nThis should be allowed."
  },
  {
    "objectID": "11_packages.rjs.html#option-2-vcs",
    "href": "11_packages.rjs.html#option-2-vcs",
    "title": "Packages",
    "section": "Option 2: VCS",
    "text": "Option 2: VCS\n\nIt may be the case that you created a 11 folder outside of your 271rs directory.\n\nI do this often, then plan to move it in latter.\n\nThis can pose a problem."
  },
  {
    "objectID": "11_packages.rjs.html#situation",
    "href": "11_packages.rjs.html#situation",
    "title": "Packages",
    "section": "Situation",
    "text": "Situation\n\ngit clone a 271rs repository, e.g.:\n\ngit clone git@github.com:cd-c89/271rs.git\n- `cargo new 11 --name packages` before `cd 271rs`\n- It would look like this:\n\n```{.bash filename=\"tree\"}\n.\n├── 11\n│   ├── Cargo.toml\n│   └── src\n│       └── main.rs\n└── 271rs\n    ├── LICENSE\n    └── README.md\n\n3 directories, 4 files"
  },
  {
    "objectID": "11_packages.rjs.html#move",
    "href": "11_packages.rjs.html#move",
    "title": "Packages",
    "section": "Move",
    "text": "Move\n\nI’d like to use the mv command to put 11 in 271 rs.\n\nNotation is “mv” then “source” then “destination”\n\nmv 11 271rs\nI have this:\n\n\n\ntree\n\n.\n└── 271rs\n    ├── 11\n    │   ├── Cargo.toml\n    │   └── src\n    │       └── main.rs\n    ├── LICENSE\n    └── README.md\n\n3 directories, 4 files"
  },
  {
    "objectID": "11_packages.rjs.html#status",
    "href": "11_packages.rjs.html#status",
    "title": "Packages",
    "section": "Status",
    "text": "Status\n\nThen I cd into 271rs to add/commit/push\n\n\n\ngit status\n\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        11/\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
  },
  {
    "objectID": "11_packages.rjs.html#add",
    "href": "11_packages.rjs.html#add",
    "title": "Packages",
    "section": "Add",
    "text": "Add\n\nAdd doesn’t work:\n\n\n\ngit add 11\n\nerror: '11/' does not have a commit checked out\nfatal: adding files failed\n\n\nBy default, cargo initializes new projects as a git repository.\nPutting a git repository inside another git repository is non-trivial."
  },
  {
    "objectID": "11_packages.rjs.html#confirm",
    "href": "11_packages.rjs.html#confirm",
    "title": "Packages",
    "section": "Confirm",
    "text": "Confirm\n\nYou can tell by looking for the hidden .git folder in 11.\n\ncd 11\nls -al\n\nYou’ll see something called .git.\nYou can delete it, but this is inelegant."
  },
  {
    "objectID": "11_packages.rjs.html#solution-1",
    "href": "11_packages.rjs.html#solution-1",
    "title": "Packages",
    "section": "Solution",
    "text": "Solution\n\nUse cargo new with the option to have no “version control system” used.\n\ncargo new 11 --name packages --vcs none\n\nYou can confirm there is no hidden .git folder.\nThis can be moved into 271rs or created within 271rs"
  },
  {
    "objectID": "11_packages.rjs.html#exercise-1",
    "href": "11_packages.rjs.html#exercise-1",
    "title": "Packages",
    "section": "Exercise",
    "text": "Exercise\n\nNew Cargo project, in\nA folder named 11, with\nA valid Cargo name (not 11), that is\nIn your course repository and therefore\nHas no cargo managed repository, and\nPresent on your remote GitHub repository\nThe conents of the project are immaterial."
  },
  {
    "objectID": "11_packages.rjs.html#disambiguity",
    "href": "11_packages.rjs.html#disambiguity",
    "title": "Packages",
    "section": "Disambiguity",
    "text": "Disambiguity\n\nI have seen students take extreme liberties with naming folders and assignments.\nI believe no ambiguity exists within the instructions.\nIt is trivial to check the following:\n\nls 271\n\nUnless you are working ahead, a file readout other than the following is wrong, and would be worth no points as it does not constitute submission of assigned work.\n\n01  02  11  LICENSE  README.md"
  },
  {
    "objectID": "11_packages.html",
    "href": "11_packages.html",
    "title": "Packages",
    "section": "",
    "text": "The second homework, “Hi cargo”, is ready after this class.\n\nIt is comically trivial.\nMostly makes sure you have everything set up.\n\nDue Friday, 12 Sept. at 1440 ET.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#announcements",
    "href": "11_packages.html#announcements",
    "title": "Packages",
    "section": "",
    "text": "The second homework, “Hi cargo”, is ready after this class.\n\nIt is comically trivial.\nMostly makes sure you have everything set up.\n\nDue Friday, 12 Sept. at 1440 ET.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#today",
    "href": "11_packages.html#today",
    "title": "Packages",
    "section": "Today",
    "text": "Today\n\nHybrid Day\nBuild system/package manager\n\nTheory behind Cargo\nTrap in Cargo\nUse Cargo",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#interpretation",
    "href": "11_packages.html#interpretation",
    "title": "Packages",
    "section": "Interpretation",
    "text": "Interpretation\n\nWe once again address interpretation vs. compilation\n\nI think of this as programming vs. scripting\nWe can think in terms of languages - Rust/C vs. Python/JavaScript",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#scripts",
    "href": "11_packages.html#scripts",
    "title": "Packages",
    "section": "Scripts",
    "text": "Scripts\n\nI regard a script a:\n\nText file\nWhich describes actions for a computer\nReadable to humans\nAnd readable to a program (like python) which can direct the computer to act\n\n\n\nwhat_up_earth.py\n\nprint(\"what up earth\")\n\nWe note that this is much closer to being a text file that it is to being a program.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#programs",
    "href": "11_packages.html#programs",
    "title": "Packages",
    "section": "Programs",
    "text": "Programs\n\nWe can create programs but we also use existing programs.\nAs an example, consider the Firefox web-browser\n\nIf you use Chrome, keep that to yourself, that’s embarassing.\n\nThis is what “Firefox.exe” looks like on a Window device.\n\n\n\nFirefox.exe\n\nA{Ÿ@€ÿ\u0019w.\u000f·þ9Ï\u000fCñ~¿‰ó€Ë @€ÿ\u001a\u000f¶û\u000fCþD8ßu\u000fé¬%  Aƒù/\u000f„î%  L‹R\bHƒÂ\bHƒÀ\bM…Ò\u000f…wÿÿÿM…À\u000f„Ã\u0002  ID$\u0010¹ÿ   A\u000f·\u0010ƒú-\u000f…“\u0002  IP\u0002MH\u0004fAƒx\u0002-I\u000fDÑD\u000f·\u0002fE…À\u000f„|\u0002  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùc\u000f…P\u0002  D\u000f·B\u0002fE…À\u000f„A\u0002  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùo\u000f…\u0015\u0002  D\u000f·B\u0004fE…À\u000f„\u0006\u0002  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùn\u000f…Ú\u0001  D\u000f·B\u0006fE…À\u000f„Ë\u0001  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùt\u000f…Ÿ\u0001  D\u000f·B\bfE…À\u000f„\u0001  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùe\u000f…d\u0001  D\u000f·B\nfE…À\u000f„U\u0001  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùn\u000f…)\u0001  D\u000f·B\ffE…À\u000f„\u001a\u0001  E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùt\u000f…î   D\u000f·B\u000efE…À\u000f„ß   E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùp\u000f…³   D\u000f·B\u0010fE…À\u000f„¤   E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùru|D\u000f·B\u0012fE…ÀtqE\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùouID\u000f·B\u0014fE…Àt&gt;E\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùcu\u0016fƒz\u0016 \u000f„*\u001c  ë   ƒú/\u000f„i#  L‹ HƒÀ\bM…À\u000f…GýÿÿHŒ$ð\u0001  è)˜  f\u000fïÀL„$ \u0007  fA\u000f@ fA\u000f@\u0010fA\u000f H„$à\u0002  H‰D$ HÇÁÿÿÿÿ1ÒA¹0   è\u001bE\u0005 …À\u000fˆ\u001e#  L‹„$H\u0007  ¹ \u0010  1Òÿ\u0015\u001eû\u0005 H‰ÃH…À\u000f„;#  L´$@\u0007  AÇFà    AÆFø LŒ$à\u0002  AÇ\u0001   \u0002  H‰Ùº\u0001   M‰ðÿ\u0015õú\u0005 L‰ÿ…À\u000f„4#  €¼$8\u0007   \u000f…_#  D‹„$ \u0007  L¼$0\u0001  L‰ùL‰òè\u0019™  A€\u0018 \u000f…X#  L´$ \u0003  AÇFà\u0001   AÆFø 1ÉL‰òA¸ \u0002  ÿ\u00150ù\u0005 =  \u0002  t\b…À\u000f…\u0002!  ÿ\u0015\u000bù\u0005 \u000f·èÍ  \u0007€…À\u000fNèA¼)   @¶\u0001L=t˜\u0005 H‰ØHÿÀHƒø\u0002r    H‰Ùÿ\u0015°÷\u0005 @„ö\u000f…*\"  A€÷\u0001³\u00011íH\n\u0005¤\u0005 ÿ\u0015’ü\u0005 H…ÀL‹d$`\u000f…6#  L‹\u0007M…À\u000f„w\u0002  ID$\u0010¹ÿ   A\u000f·\u0010ƒú-t\u001aƒú/\u000f„»!  L‹ HƒÀ\bM…ÀuâéJ\u0002  IP\u0002MH\u0004fAƒx\u0002-I\u000fDÑD\u000f·\u0002fE…ÀtÓE\u000f·ÈA9ÉD\u000fCÁEH¿E‰ÂA€Ê A€ù\u001aE\u000f¶ÊE\u000fCÈA€ùlu«D\u000f·B\u0002fE…Àt E\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øa\u000f…jÿÿÿD\u000f·B\u0004fE…À\u000f„[ÿÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øu\u000f…%ÿÿÿD\u000f·B\u0006fE…À\u000f„\u0016ÿÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øn\u000f…àþÿÿD\u000f·B\bfE…À\u000f„ÑþÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øc\u000f…›þÿÿD\u000f·B\nfE…À\u000f„ŒþÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øh\u000f…VþÿÿD\u000f·B\ffE…À\u000f„GþÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€øe\u000f…\u0011þÿÿD\u000f·B\u000efE…À\u000f„\u0002þÿÿE\u000f·ÈAºÿ   Aùÿ   E\u000fBÐEB¿E‰ÑA€É A€ø\u001aE\u000f¶ÁE\u000fCÂA€ør\u000f…Ìýÿÿfƒz\u0010 \u000f…ÁýÿÿH‹\bH‰HøHƒÀ\bH…ÉuðAÿÍ°\u0001L‹d$`ë\u00021À„Û\u000f„Æ   A\bÇE1ÉAöÇ\u0001tyL‹\u0007M…ÀtqID$\u0010¹ÿ   A\u000f·\u0010ƒú-uIIP\u0002MP\u0004fAƒx\u0002-I\u000fDÒD\u000f·\u0002fE…Àt6E\u000f·ÐA9ÊD\u000fCÁEP¿E‰ÃA€Ë A€ú\u001aE\u000f¶ÓE\u000fCÐA€úfu\u000eéj   ƒú/\u000f„\u0010$  L‹ HƒÀ\bM…Àu™Aö×E\u000f¶ÇAƒà\u0001HŒ$ð\u0001  Hœ$ \u0007  H‰Úè\u000f˜  @Šs\u0010@„ö\u000f…à#  ƒ¼$ \u0007   I‰ÿu\u00041íë/H\n} \u0005 ÿ\u0015$ù\u0005 H…À\u000f…à%  H\n\n\nI would not regard that as readable to humans (depends on the human)",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#compilation",
    "href": "11_packages.html#compilation",
    "title": "Packages",
    "section": "Compilation",
    "text": "Compilation\n\nCompilation is the process that takes text-based code to whatever we saw on the last slide.\nCan be quite simple - we made hi_world, a program, already.\n\nNotably it didn’t do a lot.\n\nrustc takes a .rs file and makes an executable\n\na program, sort of\n\nExecutables run as command with ./ prefix\n\nThis differs from python3 which runs a script without creating a corresponding program.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#py-vs-.rs",
    "href": "11_packages.html#py-vs-.rs",
    "title": "Packages",
    "section": ".py vs .rs",
    "text": ".py vs .rs\n\n\n\n\n\nflowchart LR\n  A(Python) --&gt; B[fname.py file]\n  B --&gt; C[python fname.py]\n  C --&gt; D{hello world}\n  E(Rust) --&gt; F[fname.rs  file]\n  F --&gt; G[rustc fname.rs]\n  G --&gt; H[./fname]\n  H --&gt; I{hello world}\n\n\n\n\n\n\n\nYou only have to compile once to have the executable forever.\nMost programs are executables, not scripts.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#rustc",
    "href": "11_packages.html#rustc",
    "title": "Packages",
    "section": "Rustc",
    "text": "Rustc\n\nrustc is rarely, if ever, used directly\n\nOver the years (since like, 1960) code has increased in complexity.\n\nMany files (think pgl.py, WordleGraphics.py, EnigmaRotor.py)\nMany libraries (think NumPy, pandas, scikit)\nComplex file systems (01/rustup.md)\n\n\nThe solution was automation.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#build-systems-1",
    "href": "11_packages.html#build-systems-1",
    "title": "Packages",
    "section": "Build Systems",
    "text": "Build Systems\n\nWe don’t have a real equivalence to compilation for Python.\n\nThere is Numba\n\nWe do have a build system equivalent.\n\nI use flit, which is easy.\nI think there’s others… Setuptools? Hatchling?",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#flit",
    "href": "11_packages.html#flit",
    "title": "Packages",
    "section": "Flit",
    "text": "Flit\n\nFlit solves a novel problem for Python programers.\n\nNot: Let’s make some code that I can run.\nInstead: Let’s make code that can be used in code other people run.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#packaging",
    "href": "11_packages.html#packaging",
    "title": "Packages",
    "section": "Packaging",
    "text": "Packaging\n\nNumPy, pandas, and things like CS 151 PGL can be “built” into packages with Flit and friends.\n\nBasically, instead of running e.g. python3 mycode.py\nRun flit init to make a new folder, edit some code, then run flit publish to add it to pip\n\nTakeaway - package management and build systems work real well together.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#wheels",
    "href": "11_packages.html#wheels",
    "title": "Packages",
    "section": "Wheels",
    "text": "Wheels\n\nThe thing that flit and friends create and distribute is not a .py file.\nRather, they are “wheels” which are not human readable.\nA lot like compiled code\nTakeaway - a good way to think of Rust is that we’re writing packages for ourselves.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#cargo",
    "href": "11_packages.html#cargo",
    "title": "Packages",
    "section": "Cargo",
    "text": "Cargo\n\nWith Python, we use python3 (or pip, but perhaps as python3 -m pip).\nrustc is not really the equivalent to that:\nRather, we use cargo, the Rust build and package manager.\ncargo will handle any usage of rustc that we may need.\n\nWe can easily then distribute code across multiple files.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#buildpackage",
    "href": "11_packages.html#buildpackage",
    "title": "Packages",
    "section": "Build+Package",
    "text": "Build+Package\n\nCargo is Rust’s build system (like flit) and package manager (like pip).\nWe will use Cargo instead of rustc for the rest of the term.\n\nMy sense is that this is the industry standard.\n\nWe’ll step through an example, then you’ll do a (very simple) exercise.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#new",
    "href": "11_packages.html#new",
    "title": "Packages",
    "section": "New",
    "text": "New\n\nThe first thing to do with Cargo, as a rule, is great a new package.\n\nThis is kinda like creating a new .py file.\nIt is a bit more like creating a Python project from a template repository.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#do-it",
    "href": "11_packages.html#do-it",
    "title": "Packages",
    "section": "Do it",
    "text": "Do it\n\nTo do so:\n\ncargo new throwaway_example\n\ncargo is, well, Cargo\nnew creates a new package.\nthrowaway_example is the name of the package1.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#examine",
    "href": "11_packages.html#examine",
    "title": "Packages",
    "section": "Examine",
    "text": "Examine\n\nThe most natural thing is to see what has changed.\n\nls\n\nFor me, I see a new directory: throwaway_example\nI change into the directory to examine it.\n\ncd throwaway_example\nls\n\nNot much there:\n\nCargo.toml  src",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#aside-tree",
    "href": "11_packages.html#aside-tree",
    "title": "Packages",
    "section": "Aside: Tree",
    "text": "Aside: Tree\n\nCan also see directory structure.\nInstall tree with your preferred installer (perhaps apt or brew)\n\nsudo apt install tree\n\nThen use tree instead of ls\n\n.\n├── Cargo.toml\n└── src\n    └── main.rs\n\n1 directory, 2 files",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#main.rs",
    "href": "11_packages.html#main.rs",
    "title": "Packages",
    "section": "main.rs",
    "text": "main.rs\n\nCargo creates projects with a default main file.\n\n\n\nmain.rs\n\nfn main() {\n    println!(\"Hello, world!\");\n}\n\n\nThe name “main” is basically mainful to Cargo - it says which, if multiple, .rs files to read first when trying to execute the code in a package.\n\nMake sure you understand that sentence.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#run",
    "href": "11_packages.html#run",
    "title": "Packages",
    "section": "Run",
    "text": "Run\n\ncargo run is probably our closest equivalent to python3 throwaway_example.py or the “Run” button in VS Code.\nOf note, you can not simply do “new” then “run”.\n\n“New” creates a new folder.\n“Run” must be done from within that folder.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#try-it",
    "href": "11_packages.html#try-it",
    "title": "Packages",
    "section": "Try it",
    "text": "Try it\n\nDo this:\n\ncargo run\n\nSee this:\n\n   Compiling throwaway_example v0.1.0 (/home/user/throwaway_example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.56s\n     Running `target/debug/throwaway_example`\nHello, world!",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#again",
    "href": "11_packages.html#again",
    "title": "Packages",
    "section": "Again!",
    "text": "Again!\n\nIf you run again, the process will:\n\nSkip the compile step.\nBe way faster (∞x reported here)\n\n\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/throwaway_example`\nHello, world!\n\n0.56s -&gt; 0.00s",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#its-fast",
    "href": "11_packages.html#its-fast",
    "title": "Packages",
    "section": "It’s fast",
    "text": "It’s fast\n\n0.56s -&gt; 0.00s\nThis is why we use languages which compile.\n\nPython took around .04s, for me.\n\ntime python3 -c \"print('Hello, world')\"\nThe results are:\n\nHello, world\n\nreal    0m0.039s\nuser    0m0.007s\nsys     0m0.008s\n\nGuess how long it takes to compile python, by the way.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#other-files",
    "href": "11_packages.html#other-files",
    "title": "Packages",
    "section": "Other files",
    "text": "Other files\n\nGo ahead and add another .rs file and see what happens.\n\nAdd it to the src directory!\n\nI’ll use this one - I change filename and text, but\n\n\n\nsecondary.rs\n\nfn secondary() {\n    println!(\"Goodbye, space!\");\n}",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#run-it-again",
    "href": "11_packages.html#run-it-again",
    "title": "Packages",
    "section": "Run it again…",
    "text": "Run it again…\n\nNothing changes.\n\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/throwaway_example`\nHello, world!\n\nThis is the same as adding another .py file then not using import or including its code in any other way.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#swap-the-names.",
    "href": "11_packages.html#swap-the-names.",
    "title": "Packages",
    "section": "Swap the names.",
    "text": "Swap the names.\n\nI use mv (move) to change:\n\nmain.rs to old_main.rs\nsecondary.rs to main.rs\n\nThings change!\n\n   Compiling throwaway_example v0.1.0 (/home/user/throwaway_example)\nerror[E0601]: `main` function not found in crate `throwaway_example`\n --&gt; src/main.rs:3:2\n  |\n3 | }\n  |  ^ consider adding a `main` function to `src/main.rs`\n\nFor more information about this error, try `rustc --explain E0601`.\nerror: could not compile `throwaway_example` (bin \"throwaway_example\") due to 1 previous error",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#requirements",
    "href": "11_packages.html#requirements",
    "title": "Packages",
    "section": "Requirements",
    "text": "Requirements\n\nYou need a main.rs with a function named main.\nnvim src/main.rs -&gt; Change “secondary” to “main” -&gt; “cargo run”\n\n   Compiling throwaway_example v0.1.0 (/home/user/throwaway_example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.33s\n     Running `target/debug/throwaway_example`\nGoodbye, space!",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#carry-on-only",
    "href": "11_packages.html#carry-on-only",
    "title": "Packages",
    "section": "Carry-on only",
    "text": "Carry-on only\n\nI try to live me life without baggage.\n\n(I don’t like cargo)\n\nWhy? Well…\n\nI can’t name things the way I want\nI can’t add cargo created directories to repositories.\n\nWell, I can, but it I have to use options.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#option-1-names",
    "href": "11_packages.html#option-1-names",
    "title": "Packages",
    "section": "Option 1: Names",
    "text": "Option 1: Names\n\nIt is uncommon to name a package numerically.\nIt is however, I think, useful in a course.\nIt is also, I think, useful to write packages for a course.\nSo we do so.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#name-scheme",
    "href": "11_packages.html#name-scheme",
    "title": "Packages",
    "section": "Name Scheme",
    "text": "Name Scheme\n\nI have used the following scheme this term:\n\nEach class day is denoted as a two digit value.\nThe first digit represents the zero-indexed week.\nThe second digit represents the zero-index position in [\"Lecture\", \"Lab\", \"Homework\"]",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#today-1",
    "href": "11_packages.html#today-1",
    "title": "Packages",
    "section": "Today",
    "text": "Today\n\nToday is one week from the first day of class, last week.\nToday is one day from the first day of the week, Monday.\nSo I denote today 11",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#use-cargo",
    "href": "11_packages.html#use-cargo",
    "title": "Packages",
    "section": "Use Cargo",
    "text": "Use Cargo\n\nLet’s use cargo to make a package called 11.\n\ncargo new 11\n\nWhat happens?",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#problem",
    "href": "11_packages.html#problem",
    "title": "Packages",
    "section": "Problem",
    "text": "Problem\n\u0016\u0016    Creating binary (application) `11` package\nerror: invalid character `1` in package name: `11`, the name cannot start with a digit\nIf you need a package name to not match the directory name, consider using --name flag.\nIf you need a binary with the name \"11\", use a valid package name, and set the binary name to be different from the package. This can be done by setting the binary filename to `src/bin/11.rs` or change the name in Cargo.toml with:\n\n    [[bin]]\n    name = \"11\"\n    path = \"src/main.rs\"",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#solution",
    "href": "11_packages.html#solution",
    "title": "Packages",
    "section": "Solution",
    "text": "Solution\n\nWe can make a folder named 11\nBut not a package named 11.\nWe use the --name flag.\n\nI use the name of these slides, rather than the number, as the package name.\n\ncargo new 11 --name packages\nThis should be allowed.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#option-2-vcs",
    "href": "11_packages.html#option-2-vcs",
    "title": "Packages",
    "section": "Option 2: VCS",
    "text": "Option 2: VCS\n\nIt may be the case that you created a 11 folder outside of your 271rs directory.\n\nI do this often, then plan to move it in latter.\n\nThis can pose a problem.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#situation",
    "href": "11_packages.html#situation",
    "title": "Packages",
    "section": "Situation",
    "text": "Situation\n\ngit clone a 271rs repository, e.g.:\n\ngit clone git@github.com:cd-c89/271rs.git\n- `cargo new 11 --name packages` before `cd 271rs`\n- It would look like this:\n\n```{.bash filename=\"tree\"}\n.\n├── 11\n│   ├── Cargo.toml\n│   └── src\n│       └── main.rs\n└── 271rs\n    ├── LICENSE\n    └── README.md\n\n3 directories, 4 files",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#move",
    "href": "11_packages.html#move",
    "title": "Packages",
    "section": "Move",
    "text": "Move\n\nI’d like to use the mv command to put 11 in 271 rs.\n\nNotation is “mv” then “source” then “destination”\n\nmv 11 271rs\nI have this:\n\n\n\ntree\n\n.\n└── 271rs\n    ├── 11\n    │   ├── Cargo.toml\n    │   └── src\n    │       └── main.rs\n    ├── LICENSE\n    └── README.md\n\n3 directories, 4 files",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#status",
    "href": "11_packages.html#status",
    "title": "Packages",
    "section": "Status",
    "text": "Status\n\nThen I cd into 271rs to add/commit/push\n\n\n\ngit status\n\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        11/\n\nnothing added to commit but untracked files present (use \"git add\" to track)",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#add",
    "href": "11_packages.html#add",
    "title": "Packages",
    "section": "Add",
    "text": "Add\n\nAdd doesn’t work:\n\n\n\ngit add 11\n\nerror: '11/' does not have a commit checked out\nfatal: adding files failed\n\n\nBy default, cargo initializes new projects as a git repository.\nPutting a git repository inside another git repository is non-trivial.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#confirm",
    "href": "11_packages.html#confirm",
    "title": "Packages",
    "section": "Confirm",
    "text": "Confirm\n\nYou can tell by looking for the hidden .git folder in 11.\n\ncd 11\nls -al\n\nYou’ll see something called .git.\nYou can delete it, but this is inelegant.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#solution-1",
    "href": "11_packages.html#solution-1",
    "title": "Packages",
    "section": "Solution",
    "text": "Solution\n\nUse cargo new with the option to have no “version control system” used.\n\ncargo new 11 --name packages --vcs none\n\nYou can confirm there is no hidden .git folder.\nThis can be moved into 271rs or created within 271rs",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#exercise-1",
    "href": "11_packages.html#exercise-1",
    "title": "Packages",
    "section": "Exercise",
    "text": "Exercise\n\nNew Cargo project, in\nA folder named 11, with\nA valid Cargo name (not 11), that is\nIn your course repository and therefore\nHas no cargo managed repository, and\nPresent on your remote GitHub repository\nThe conents of the project are immaterial.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#disambiguity",
    "href": "11_packages.html#disambiguity",
    "title": "Packages",
    "section": "Disambiguity",
    "text": "Disambiguity\n\nI have seen students take extreme liberties with naming folders and assignments.\nI believe no ambiguity exists within the instructions.\nIt is trivial to check the following:\n\nls 271\n\nUnless you are working ahead, a file readout other than the following is wrong, and would be worth no points as it does not constitute submission of assigned work.\n\n01  02  11  LICENSE  README.md",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "11_packages.html#footnotes",
    "href": "11_packages.html#footnotes",
    "title": "Packages",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nWell, kinda. We’ll get to that.↩︎",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "20_options.rjs.html#announcements",
    "href": "20_options.rjs.html#announcements",
    "title": "Options",
    "section": "Announcements",
    "text": "Announcements\n\nWelcome to Systems in Rust\nAction Items:\n\n“Hi Cargo” is due on Friday\nWe are now ramping for Wordle"
  },
  {
    "objectID": "20_options.rjs.html#today",
    "href": "20_options.rjs.html#today",
    "title": "Options",
    "section": "Today",
    "text": "Today\n\nMutability\nTyping\nParameters\nLoops\nIntro to Ownership"
  },
  {
    "objectID": "20_options.rjs.html#variables",
    "href": "20_options.rjs.html#variables",
    "title": "Options",
    "section": "Variables",
    "text": "Variables\n\nPython variables are, I think a bit sketchy.\nThere is no difference between creating and updating the value of a variable.\n\n\n\nfile.py\n\nx = 10\nx = 11"
  },
  {
    "objectID": "20_options.rjs.html#why-it-matters",
    "href": "20_options.rjs.html#why-it-matters",
    "title": "Options",
    "section": "Why it matters",
    "text": "Why it matters\n\nThis isn’t objectively bad, but isn’t good specifically in the case of languages that track how much memory they use.\nYou cannot determine without examining prior code whether the following statement uses more memory or uses existing memory\n\n\n\nfile.py\n\ny = 10 # Was there a prior y?\n\n\nBackstreet Boys - I Want It That Way (Official HD Video)"
  },
  {
    "objectID": "20_options.rjs.html#alternatives",
    "href": "20_options.rjs.html#alternatives",
    "title": "Options",
    "section": "Alternatives",
    "text": "Alternatives\n\nThe other scripting language, JavaScript, doesn’t even do this:\n\n\n\nscript.js\n\nlet y = 10;\ny = 11 // There was a prior y! (kinda)\n\n\n.rs is a bit more .js-like than .py-like when it comes to variables."
  },
  {
    "objectID": "20_options.rjs.html#rust-let",
    "href": "20_options.rjs.html#rust-let",
    "title": "Options",
    "section": "Rust let",
    "text": "Rust let\n\nLike .js, .rs uses the let formulation to create new variables:\n\n\n\nsrc/main.rs\n\nlet s = \"Imma string in RUST!\"; // Rust comment\n\n\nHowever it differs in a critical way.\nSay we wish to reassign y:\n\n\n\nsrc/main.rs\n\n\u0016\u0016s = \"Anything else.\""
  },
  {
    "objectID": "20_options.rjs.html#immutability",
    "href": "20_options.rjs.html#immutability",
    "title": "Options",
    "section": "Immutability",
    "text": "Immutability\n\nIf we attempt to do so in Rust, we’ll draw a mutability error:\n\n\u0016error[E0384]: cannot assign twice to immutable variable `s`\n --&gt; src/main.rs:3:4\n  |\n2 |    let s = \"Imma string in RUST!\"; // Rust comment\n  |        - first assignment to `s`\n3 |    s = \"Bleeblarbu\";\n  |    ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n  |\n\nAnd get a helpful recommendation:\n\nhelp: consider making this binding mutable\n  |\n2 |    let mut s = \"Imma string in RUST!\"; // Rust comment\n  |        +++"
  },
  {
    "objectID": "20_options.rjs.html#defaults",
    "href": "20_options.rjs.html#defaults",
    "title": "Options",
    "section": "Defaults",
    "text": "Defaults\n\nRust variables default to immutable.\nYou’ve seen this before, sorta:\n\n&gt;&gt;&gt; x = (1,2)\n&gt;&gt;&gt; x[1] = 2\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'tuple' object does not support item assignment\n\nRust variables are like Python tuple elements."
  },
  {
    "objectID": "20_options.rjs.html#defaults-1",
    "href": "20_options.rjs.html#defaults-1",
    "title": "Options",
    "section": "Defaults",
    "text": "Defaults\n\nRust variables default to immutable.\nThis follows a post-language release style development in .js, where programmers are now recommended to use const rather than let for all variables.\n\n\n\nscript.js\n\nconst y = 10; // This reflects recent .js style recommendations.\ny = 11;       // This will throw an error.\n\n\nYou can check in node or in your browser.\n\n&gt; const y = 10;\nundefined\n&gt; y = 11;\nUncaught TypeError: Assignment to constant variable."
  },
  {
    "objectID": "20_options.rjs.html#mutability-1",
    "href": "20_options.rjs.html#mutability-1",
    "title": "Options",
    "section": "Mutability",
    "text": "Mutability\n\nIf a variable positively, absolutely, must be updated for a program to make sense:\n\nCounting words in a file\nCounting visitors to a website\nCounting sheep before hitting a honk shoo / snork mimimi angle\n\nUse the let mut formulation.\n\n.rs let mut :: .js let :: .py []\n.rs let :: .js const :: .py ()"
  },
  {
    "objectID": "20_options.rjs.html#example",
    "href": "20_options.rjs.html#example",
    "title": "Options",
    "section": "Example",
    "text": "Example\n\n\nsrc/main.rs\n\nlet mut sheeps_counted = 0;\nsheeps_counted = 1;\nprintln!(\"Sheeps accounted for counter count: {sheeps_counted}\");\n}\n\n\nThis is allowed.\n\nIt will draw an unused variable warning on the zero, which is for another day."
  },
  {
    "objectID": "20_options.rjs.html#my-advice",
    "href": "20_options.rjs.html#my-advice",
    "title": "Options",
    "section": "My advice",
    "text": "My advice\n\nUse let\nIf you get an error when using let, you should consider changing your code design equally as strongly as you consider adding mut\nYou can do either (just think about both)"
  },
  {
    "objectID": "20_options.rjs.html#today-1",
    "href": "20_options.rjs.html#today-1",
    "title": "Options",
    "section": "Today",
    "text": "Today\n\nMutability\nTyping\nParameters\nLoops\nIntro to Ownership"
  },
  {
    "objectID": "20_options.rjs.html#more-than-hints",
    "href": "20_options.rjs.html#more-than-hints",
    "title": "Options",
    "section": "More than hints",
    "text": "More than hints\n\nIn Rust, the Pythonic type hint formulation is mandatory in all cases where the type of a variable is non-obvious.\n\n\n\nfile.py\n\n# Somehow each of this things is totally allowed\n\u0016x : int\nx = 1.5\ny : float = \"Hi\"\n\n\nIt is also enforced."
  },
  {
    "objectID": "20_options.rjs.html#try-it-v0",
    "href": "20_options.rjs.html#try-it-v0",
    "title": "Options",
    "section": "Try it v0",
    "text": "Try it v0\n\nWe can yeet the accursed Python directly into src/main.rs and just furnish let to make the variable declarations well formed:\n\n\n\nsrc/main.rs\n\n\u0016fn main() {\n    let x : int;\n    x = 1.5;\n    let y : float = \"Hi\";\n}\n\n\nWe will yield a somewhat unremarkable error:\n\nerror[E0412]: cannot find type `int` in this scope\n --&gt; src/main.rs:2:13\n  |\n2 |     let x : int;\n  |             ^^^\n  |             |\n  |             not found in this scope\n  |             help: perhaps you intended to use this type: `i32`"
  },
  {
    "objectID": "20_options.rjs.html#integers",
    "href": "20_options.rjs.html#integers",
    "title": "Options",
    "section": "Integers",
    "text": "Integers\n\nRust numerical types have a fixed size.\nThey are in that respect like NumPy integers\nThey are different in that respect from Python int which is of theoretically infinite size and JavaScript, which only has floats.\nYou can tell by working with large numbers\n\n\u0016&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; x = np.int8(100)\n&gt;&gt;&gt; x * x\n&lt;stdin&gt;:1: RuntimeWarning: overflow encountered in scalar multiply\nnp.int8(16)\n&gt;&gt;&gt; y = 100\n&gt;&gt;&gt; y * y\n10000"
  },
  {
    "objectID": "20_options.rjs.html#signage",
    "href": "20_options.rjs.html#signage",
    "title": "Options",
    "section": "Signage",
    "text": "Signage\n\nIn Rust, as in NumPy, we specify whether integers may be signed (negative) or not.\nThese are usually referred to as “integer” and “unsigned”\n\n\n\n\n\ninteger.py\n\n&gt;&gt;&gt; x = np.int8(100)\n&gt;&gt;&gt; x + x\n&lt;stdin&gt;:1: RuntimeWarning: overflow encountered in scalar add\nnp.int8(-56)\n&gt;&gt;&gt; x - 110\nnp.int8(-10)\n\n\n\n\nunsigned.py\n\n&gt;&gt;&gt; x = np.uint8(100)\n&gt;&gt;&gt; x + x\nnp.uint8(200)\n&gt;&gt;&gt; x - 110\n&lt;stdin&gt;:1: RuntimeWarning: overflow encountered in scalar subtract\nnp.uint8(246)"
  },
  {
    "objectID": "20_options.rjs.html#on-ints",
    "href": "20_options.rjs.html#on-ints",
    "title": "Options",
    "section": "On ints",
    "text": "On ints\n\nUnsigned can be twice as big but can’t be negative.\nThe maximize size is two to the power of “bit length” - the number after int, like 8.\n\nOne lower power for signed values.\n\n&gt;&gt;&gt; x = np.int8(2 ** 7)\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nOverflowError: Python integer 128 out of bounds for int8\n&gt;&gt;&gt; x = np.int8(2 ** 7 - 1)\n&gt;&gt;&gt; x\nnp.int8(127)\nIn Rust, as in NumPy, we must decide how much memory we use before we use it."
  },
  {
    "objectID": "20_options.rjs.html#rust-integers",
    "href": "20_options.rjs.html#rust-integers",
    "title": "Options",
    "section": "Rust integers",
    "text": "Rust integers\n\n\n\nLength\nSigned\nUnsigned\n\n\n\n\n8-bit\ni8\nu8\n\n\n16-bit\ni16\nu16\n\n\n32-bit\ni32\nu32\n\n\n64-bit\ni64\nu64\n\n\n128-bit\ni128\nu128\n\n\narchitecture dependent\nisize\nusize\n\n\n\n\nYou should use u64 unless you have a compelling reason not to."
  },
  {
    "objectID": "20_options.rjs.html#aside",
    "href": "20_options.rjs.html#aside",
    "title": "Options",
    "section": "Aside",
    "text": "Aside\n\nThe case of wanting to use -1 for error handling does not apply to Rust for reasons we’ll cover latter, so always try to get code working with unsigned first.\n64 is just (at 99.9%+ probability) the preferred size for your physical device.\nYou should use the forthcoming “Option” for these matters."
  },
  {
    "objectID": "20_options.rjs.html#does-np.uin64-u64",
    "href": "20_options.rjs.html#does-np.uin64-u64",
    "title": "Options",
    "section": "Does np.uin64 ~= u64",
    "text": "Does np.uin64 ~= u64\n\nWhat happens if you add 1 to these?\n\nMake a hypothesis.\n\nE.g. write a comment.\n\nConduct an experiment.\n\nE.g. alter and run the code.\n\nUpdate your hypothesis, if not supported.\n\n\n\n\n\u0016&gt;&gt;&gt; x = np.uint64(2 ** 64 - 1)\n&gt;&gt;&gt; x\nnp.uint64(18446744073709551615)\n\nfn main() {\n    let x : u64 = 18446744073709551615;\n    println!(\"{x}\");\n}"
  },
  {
    "objectID": "20_options.rjs.html#floats",
    "href": "20_options.rjs.html#floats",
    "title": "Options",
    "section": "Floats",
    "text": "Floats\n\nThere are floats in Rust.\nThere are not floats in the Linux kernel.\n\n\nKernel code is normally prohibited from using floating-point (FP) registers or instructions, including the C float and double data types.\n\n\nTherefore there are not floats in this class.\n\nIf an operating system can be written without floats, so too can your code."
  },
  {
    "objectID": "20_options.rjs.html#booleans",
    "href": "20_options.rjs.html#booleans",
    "title": "Options",
    "section": "Booleans",
    "text": "Booleans\n\nBooleans are called bool (like Python) and stylized all-lowercase (like JavaScript)\n\n\n\nsrc/main.rs\n\nfn main() {\n    let t = true;\n\n    let f: bool = false; // with explicit type annotation\n}\n\n\nOtherwise unremarkable."
  },
  {
    "objectID": "20_options.rjs.html#characters",
    "href": "20_options.rjs.html#characters",
    "title": "Options",
    "section": "Characters",
    "text": "Characters\n\nVs. Python, Rust has a specific character type, distinct from strings of length 1.\nIt uses single quotes, which look like this: ''\nHere is an example:\n\n\n\nsrc/main.rs\n\nfn main() {\n    let c : char = 'a';  // Correct\n    let c : char = \"a\";  // Banned\n}"
  },
  {
    "objectID": "20_options.rjs.html#error-message",
    "href": "20_options.rjs.html#error-message",
    "title": "Options",
    "section": "Error message",
    "text": "Error message\n\u0016error[E0308]: mismatched types\n --&gt; src/main.rs:3:20\n  |\n3 |     let c : char = \"a\";\n  |             ----   ^^^ expected `char`, found `&str`\n  |             |\n  |             expected due to this\n  |\nhelp: if you meant to write a `char` literal, use single quotes\n  |\n3 -     let c : char = \"a\";\n3 +     let c : char = 'a';\n  |\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `scratch` (bin \"scratch\") due to 1 previous error\nuser@DESKTOP-THMS2PJ:~/tmp/scratch$ cat src/main.rs\nfn main() {\n    let c : char = 'a';\n    let c : char = \"a\";\n}"
  },
  {
    "objectID": "20_options.rjs.html#takeaway",
    "href": "20_options.rjs.html#takeaway",
    "title": "Options",
    "section": "Takeaway",
    "text": "Takeaway\n\nI never used Rust characters but ended up using them on Wordle, so just showing them now.\nI don’t expect you to use them pretty much ever, but they motivate the next topic via this line:\n\n  |             ----   ^^^ expected `char`, found `&str`\n\nWhat in the name of FeO is a &str"
  },
  {
    "objectID": "20_options.rjs.html#strings",
    "href": "20_options.rjs.html#strings",
    "title": "Options",
    "section": "“Strings”",
    "text": "“Strings”\n\nThere are kinda not really exactly strings in Rust.\nThis mostly has to do with Rust having unicode support.\nWe won’t really leverage unicode this term since we aren’t writing human-facing applications.\nBut we still deal with the consequences."
  },
  {
    "objectID": "20_options.rjs.html#today-2",
    "href": "20_options.rjs.html#today-2",
    "title": "Options",
    "section": "Today",
    "text": "Today\n\nMutability\nTyping\nParameters\nLoops\nIntro to Ownership"
  },
  {
    "objectID": "20_options.rjs.html#size",
    "href": "20_options.rjs.html#size",
    "title": "Options",
    "section": "Size",
    "text": "Size\n\nVersus the other types in Rust, which we stressed were of fixed size…\nA string is not.\n\n// String of length 0\nlet s = \"\"; \n// Complete text of Bhagavad Gita\nlet t = \"Dhritarashtra said: O Sanjay, after gathering on the holy field of Kurukshetra, and desiring to fight, what did my sons and the sons of Pandu do? ...\n\nAnd in fact, if we implemented Python integers in Rust, they would follow similar rules.\n\nAnything that has no bounded upper size, basically."
  },
  {
    "objectID": "20_options.rjs.html#ownership-rules",
    "href": "20_options.rjs.html#ownership-rules",
    "title": "Options",
    "section": "Ownership Rules",
    "text": "Ownership Rules\n\nEach value in Rust has an owner.\nThere can only be one owner at a time.\nWhen the owner goes out of scope, the value will be dropped."
  },
  {
    "objectID": "20_options.rjs.html#scope",
    "href": "20_options.rjs.html#scope",
    "title": "Options",
    "section": "Scope",
    "text": "Scope\n\nQuoth Rust Book:\n\n    {                      // s is not valid here, since it's not yet declared\n        let s = \"hello\";   // s is valid from this point forward\n\n        // do stuff with s\n    }                      // this scope is now over, and s is no longer valid\n\nYou can experimentally verify each of the claims.\nBasically, the memory associated with s exists at some time points, but not others."
  },
  {
    "objectID": "20_options.rjs.html#capital-s-string",
    "href": "20_options.rjs.html#capital-s-string",
    "title": "Options",
    "section": "Capital S String",
    "text": "Capital S String\n\nWe have thus far used “string literals”, where the string is typed into the program.\nThis is a special case and doesn’t allow working with strings.\nFor that, we use capital S String, which is closer to data structure than a data type in some ways:\n\n    let mut s = String::from(\"hello\");\n\n    s.push_str(\", world!\"); // push_str() appends a literal to a String\n\n    println!(\"{s}\"); // this will print `hello, world!`\n\nIt accepts a push operation a la a queue/stack/list, and must be initialized with a function call.\nA String is mutable, a literal is not."
  },
  {
    "objectID": "20_options.rjs.html#its-confusing",
    "href": "20_options.rjs.html#its-confusing",
    "title": "Options",
    "section": "It’s confusing",
    "text": "It’s confusing\n\nThis leads to some un-Pythonic behavior.\nVersus the immortal u64, our most beloved type, the ignomious String is fickle and fleeting.\nWe compare fixed size and variable size types, which have distinct behavior\n\n\n\n\nThis works.\n\nfn main() {\n    let x = 5;\n    let y = x;\n    println!(\"{x}\");\n}\n\n\nThis doesn’t.\n\nfn main() {\n    let s = String::from(\"6\");\n    let t = s;\n    println!(\"{s}\")\n}"
  },
  {
    "objectID": "20_options.rjs.html#whats-happening",
    "href": "20_options.rjs.html#whats-happening",
    "title": "Options",
    "section": "What’s happening?",
    "text": "What’s happening?\n\nI am unwilling to defend this Rust design decision, though we’ll understand it better over the course of the term.\nBasically, s passes “out of scope” as soon as it is assigned to t.\nThereafter, there is no declared variable of name s.\nBut this only happens to some types (and in my view which types are non-obvious).\n\nIt is potentially infinite types, but it’s unclear that e.g. String::from(\"6\") isn’t a fixed width string of lenth 1 (to me at least)."
  },
  {
    "objectID": "20_options.rjs.html#clone",
    "href": "20_options.rjs.html#clone",
    "title": "Options",
    "section": "Clone",
    "text": "Clone\n\nMy secret inside source with a real job (e.g. not professor) who writes Rust and also thought this was a bit silly:\n\n\nWhenever I use Rust, I just always .clone and when someone asks me about it, I say that’s a performance optimization for latter.\n\n\nRust says the same thing, actually:\n\nhelp: consider cloning the value if the performance cost is acceptable\n  |\n6 |     let t = s.clone();\n  |              ++++++++"
  },
  {
    "objectID": "20_options.rjs.html#example-1",
    "href": "20_options.rjs.html#example-1",
    "title": "Options",
    "section": "Example",
    "text": "Example\n\nIt is reasonable to use .clone on capital S String for e.g. Wordle, as needed.\nAs a challenge, don’t use .clone (you don’t need it)\n\n\n\n\nThis works.\n\nfn main() {\n    let x = 5;\n    let y = x;\n    println!(\"{x}\");\n}\n\n\nThis works.\n\nfn main() {\n    let s = String::from(\"6\");\n    let t = s.clone();\n    println!(\"{s}\")\n}\n\n\nBoth draw warnings for unused variables, but it’s a silly example anyway."
  },
  {
    "objectID": "20_options.rjs.html#why-it-matters-1",
    "href": "20_options.rjs.html#why-it-matters-1",
    "title": "Options",
    "section": "Why it matters?",
    "text": "Why it matters?\n\nYou’ll probably want to decompose capital S String operations into functions.\n\nThis is known as “programming”\n\nYou may want to .clone() a capital S String beforing yeeting it into a helper."
  },
  {
    "objectID": "20_options.rjs.html#example-code",
    "href": "20_options.rjs.html#example-code",
    "title": "Options",
    "section": "Example Code",
    "text": "Example Code\n\n\ncolour.rs\n\n\u0016fn print_red(s:String) {\n    // Some terminal hacking nonsense for colors\n    println!(\"\\u{001b}[31m{s}\\u{001b}[0m\");\n}\n\nfn print_grn(s:String) {\n    // More nonsense but 31 -&gt; 32\n    println!(\"\\u{001b}[32m{s}\\u{001b}[0m\");\n}\n\nfn main() {\n    let s = String::from(\"6\");\n    print_red(s.clone());\n    print_grn(s.clone());\n    println!(\"{s}\")\n}"
  },
  {
    "objectID": "20_options.rjs.html#example-output",
    "href": "20_options.rjs.html#example-output",
    "title": "Options",
    "section": "Example output",
    "text": "Example output\n\nI see something like this, your mileage may vary:\n\n6\n\n\n6\n\n\n6\n\nOn these slides, that’s styled with HTML, in my terminal it is styled with “ANSI Escape Codes”\nMy source is here: Read me!\n\n\n\ncolour.py\n\nprint(\"\\u001b[31mHello, world!\\u001b[0m\")\n\n\nMore in the lab."
  },
  {
    "objectID": "20_options.rjs.html#today-3",
    "href": "20_options.rjs.html#today-3",
    "title": "Options",
    "section": "Today",
    "text": "Today\n\nMutability\nTyping\nParameters\nLoops\nIntro to Ownership"
  },
  {
    "objectID": "20_options.rjs.html#declarations",
    "href": "20_options.rjs.html#declarations",
    "title": "Options",
    "section": "Declarations",
    "text": "Declarations\n\nYou have now seen how functions are declared when they accept arguments.\n\n\n\ncolour.rs\n\n\u0016fn print_red(s:String) {\n    // Some terminal hacking nonsense for colors\n    println!(\"\\u{001b}[31m{s}\\u{001b}[0m\");\n}\n\nfn print_grn(s:String) {\n    // More nonsense but 31 -&gt; 32\n    println!(\"\\u{001b}[32m{s}\\u{001b}[0m\");\n}\n\n\nSame as variables."
  },
  {
    "objectID": "20_options.rjs.html#today-4",
    "href": "20_options.rjs.html#today-4",
    "title": "Options",
    "section": "Today",
    "text": "Today\n\nMutability\nTyping\nParameters\nLoops\nIntro to Ownership"
  },
  {
    "objectID": "20_options.rjs.html#loops-1",
    "href": "20_options.rjs.html#loops-1",
    "title": "Options",
    "section": "3 loops",
    "text": "3 loops\n\nThere are 3 loops in Rust, one of for which I am issuing a partial ban, and also recursion.\n\nloop\nfor\nwhile\nRecursion"
  },
  {
    "objectID": "20_options.rjs.html#loop",
    "href": "20_options.rjs.html#loop",
    "title": "Options",
    "section": "Loop",
    "text": "Loop\n\nRust loop is its infinite loop type.\nI don’t recommend using it.\n\n\n\nsrc/main.rs\n\n// The rust book literally tells us to just run this code?\n\u0016\u0016fn main() {\n    loop {\n        println!(\"again!\");\n    }\n}"
  },
  {
    "objectID": "20_options.rjs.html#if-you-must",
    "href": "20_options.rjs.html#if-you-must",
    "title": "Options",
    "section": "If you must",
    "text": "If you must\n\nIf you must loop, please use:\n\nA named loop, with\nA named break\n\n\n\n\nsrc/main.rs\n\n// I would never do this, but it can be fun.\n\u0016\u0016fn main() {\n    let mut x = 0;\n    `loop_city: loop {\n        println!(\"{x}\");\n        x += 1\n        if x &gt; 10 {\n            break `loop_city;\n        }\n    }\n}"
  },
  {
    "objectID": "20_options.rjs.html#just-recurse",
    "href": "20_options.rjs.html#just-recurse",
    "title": "Options",
    "section": "Just recurse",
    "text": "Just recurse\n\nThis is how I would do that…\n\n\n\nsrc/main.rs\n\n\u0016fn help(x:u64) {\n    if x &lt;= 10 {\n        println!(\"{x}\");\n        help(x + 1);\n    }\n}\n\nfn main() {\n    help(0);\n}\n\n\nBy the way - ! rather than not is logical negation.\n\nSo would be !(x &gt; 10) vs. not (x &gt; 10)"
  },
  {
    "objectID": "20_options.rjs.html#while",
    "href": "20_options.rjs.html#while",
    "title": "Options",
    "section": "while",
    "text": "while\n\nMy second favorite after recursion is while\n\nI finished undergraduate without using a for loop btw.\nYou may not this is identical to the recursive solution.\n\n\n\n\n\nVia while\n\n\n\nsrc/main.rs\n\nfn main() {\n    let mut x = 0;\n    while x &lt;= 10 {\n        println!(\"{x}\");\n        x += 1;\n    }\n}\n\n\n\nVia fn\n\n\n\nsrc/main.rs\n\n// elsewhere help is called on 0\n\u0016fn help(x:u64) {\n    if x &lt;= 10 {\n        println!(\"{x}\");\n        help(x + 1);\n    }\n}"
  },
  {
    "objectID": "20_options.rjs.html#for",
    "href": "20_options.rjs.html#for",
    "title": "Options",
    "section": "for",
    "text": "for\n\nRust for is Pythonic “for each” rather than C/C++/Java/JavaScript “for” which should help you.\nWe also implement a collection type, the array (which is Python tuple-like or NumPy array-like)\n\n\n\nsrc/main.rs\n\nfn main() {\n    let a = [10, 20, 30, 40, 50];\n\n    for element in a {\n        println!(\"the value is: {element}\");\n    }\n}"
  },
  {
    "objectID": "20_options.rjs.html#i-dont-know",
    "href": "20_options.rjs.html#i-dont-know",
    "title": "Options",
    "section": "I don’t know…",
    "text": "I don’t know…\n\nI don’t know if you’ll think of Wordle as loops over elements of a collection:\n\n    for c in guess.chars() {\n        println!(\"{}\", c);\n    }\n\nBut the alternatives are, I think, pretty bleak:\n\n\u0016    for i in 0..5 { // Rust range\n        // Rust strings lack indices\n        // Instead they return either a character or a \"None\"\n        // We have to unwrap that\n        // Rust strings, amirite\n        println!(\"{}\", guess.chars().nth(i).unwrap());\n    }\n\nHelpfully, cargo run told me how to write that."
  },
  {
    "objectID": "20_options.rjs.html#today-5",
    "href": "20_options.rjs.html#today-5",
    "title": "Options",
    "section": "Today",
    "text": "Today\n\nMutability\nTyping\nParameters\nLoops\nIntro to Ownership"
  },
  {
    "objectID": "20_options.rjs.html#missing-pieces",
    "href": "20_options.rjs.html#missing-pieces",
    "title": "Options",
    "section": "Missing pieces",
    "text": "Missing pieces\n\nWe did not discuss the following in detail:\n\nFloats (don’t use them)\nRange (0..5)\nError handling (unwrap)\nString slices (&str)\n\nI think I taught you how to avoid each, however.\nRead more in Rust Book chapters 3 and 4."
  },
  {
    "objectID": "20_options.html",
    "href": "20_options.html",
    "title": "Options",
    "section": "",
    "text": "Welcome to Systems in Rust\nAction Items:\n\n“Hi Cargo” is due on Friday\nWe are now ramping for Wordle",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#announcements",
    "href": "20_options.html#announcements",
    "title": "Options",
    "section": "",
    "text": "Welcome to Systems in Rust\nAction Items:\n\n“Hi Cargo” is due on Friday\nWe are now ramping for Wordle",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#today",
    "href": "20_options.html#today",
    "title": "Options",
    "section": "Today",
    "text": "Today\n\nMutability\nTyping\nParameters\nLoops\nIntro to Ownership",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#variables",
    "href": "20_options.html#variables",
    "title": "Options",
    "section": "Variables",
    "text": "Variables\n\nPython variables are, I think a bit sketchy.\nThere is no difference between creating and updating the value of a variable.\n\n\n\nfile.py\n\nx = 10\nx = 11",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#why-it-matters",
    "href": "20_options.html#why-it-matters",
    "title": "Options",
    "section": "Why it matters",
    "text": "Why it matters\n\nThis isn’t objectively bad, but isn’t good specifically in the case of languages that track how much memory they use.\nYou cannot determine without examining prior code whether the following statement uses more memory or uses existing memory\n\n\n\nfile.py\n\ny = 10 # Was there a prior y?\n\n\nBackstreet Boys - I Want It That Way (Official HD Video)",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#alternatives",
    "href": "20_options.html#alternatives",
    "title": "Options",
    "section": "Alternatives",
    "text": "Alternatives\n\nThe other scripting language, JavaScript, doesn’t even do this:\n\n\n\nscript.js\n\nlet y = 10;\ny = 11 // There was a prior y! (kinda)\n\n\n.rs is a bit more .js-like than .py-like when it comes to variables.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#rust-let",
    "href": "20_options.html#rust-let",
    "title": "Options",
    "section": "Rust let",
    "text": "Rust let\n\nLike .js, .rs uses the let formulation to create new variables:\n\n\n\nsrc/main.rs\n\nlet s = \"Imma string in RUST!\"; // Rust comment\n\n\nHowever it differs in a critical way.\nSay we wish to reassign y:\n\n\n\nsrc/main.rs\n\n\u0016\u0016s = \"Anything else.\"",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#immutability",
    "href": "20_options.html#immutability",
    "title": "Options",
    "section": "Immutability",
    "text": "Immutability\n\nIf we attempt to do so in Rust, we’ll draw a mutability error:\n\n\u0016error[E0384]: cannot assign twice to immutable variable `s`\n --&gt; src/main.rs:3:4\n  |\n2 |    let s = \"Imma string in RUST!\"; // Rust comment\n  |        - first assignment to `s`\n3 |    s = \"Bleeblarbu\";\n  |    ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n  |\n\nAnd get a helpful recommendation:\n\nhelp: consider making this binding mutable\n  |\n2 |    let mut s = \"Imma string in RUST!\"; // Rust comment\n  |        +++",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#defaults",
    "href": "20_options.html#defaults",
    "title": "Options",
    "section": "Defaults",
    "text": "Defaults\n\nRust variables default to immutable.\nYou’ve seen this before, sorta:\n\n&gt;&gt;&gt; x = (1,2)\n&gt;&gt;&gt; x[1] = 2\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'tuple' object does not support item assignment\n\nRust variables are like Python tuple elements.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#defaults-1",
    "href": "20_options.html#defaults-1",
    "title": "Options",
    "section": "Defaults",
    "text": "Defaults\n\nRust variables default to immutable.\nThis follows a post-language release style development in .js, where programmers are now recommended to use const rather than let for all variables.\n\n\n\nscript.js\n\nconst y = 10; // This reflects recent .js style recommendations.\ny = 11;       // This will throw an error.\n\n\nYou can check in node or in your browser.\n\n&gt; const y = 10;\nundefined\n&gt; y = 11;\nUncaught TypeError: Assignment to constant variable.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#mutability-1",
    "href": "20_options.html#mutability-1",
    "title": "Options",
    "section": "Mutability",
    "text": "Mutability\n\nIf a variable positively, absolutely, must be updated for a program to make sense:\n\nCounting words in a file\nCounting visitors to a website\nCounting sheep before hitting a honk shoo / snork mimimi angle\n\nUse the let mut formulation.\n\n.rs let mut :: .js let :: .py []\n.rs let :: .js const :: .py ()",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#example",
    "href": "20_options.html#example",
    "title": "Options",
    "section": "Example",
    "text": "Example\n\n\nsrc/main.rs\n\nlet mut sheeps_counted = 0;\nsheeps_counted = 1;\nprintln!(\"Sheeps accounted for counter count: {sheeps_counted}\");\n}\n\n\nThis is allowed.\n\nIt will draw an unused variable warning on the zero, which is for another day.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#my-advice",
    "href": "20_options.html#my-advice",
    "title": "Options",
    "section": "My advice",
    "text": "My advice\n\nUse let\nIf you get an error when using let, you should consider changing your code design equally as strongly as you consider adding mut\nYou can do either (just think about both)",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#today-1",
    "href": "20_options.html#today-1",
    "title": "Options",
    "section": "Today",
    "text": "Today\n\nMutability\nTyping\nParameters\nLoops\nIntro to Ownership",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#more-than-hints",
    "href": "20_options.html#more-than-hints",
    "title": "Options",
    "section": "More than hints",
    "text": "More than hints\n\nIn Rust, the Pythonic type hint formulation is mandatory in all cases where the type of a variable is non-obvious.\n\n\n\nfile.py\n\n# Somehow each of this things is totally allowed\n\u0016x : int\nx = 1.5\ny : float = \"Hi\"\n\n\nIt is also enforced.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#try-it-v0",
    "href": "20_options.html#try-it-v0",
    "title": "Options",
    "section": "Try it v0",
    "text": "Try it v0\n\nWe can yeet the accursed Python directly into src/main.rs and just furnish let to make the variable declarations well formed:\n\n\n\nsrc/main.rs\n\n\u0016fn main() {\n    let x : int;\n    x = 1.5;\n    let y : float = \"Hi\";\n}\n\n\nWe will yield a somewhat unremarkable error:\n\nerror[E0412]: cannot find type `int` in this scope\n --&gt; src/main.rs:2:13\n  |\n2 |     let x : int;\n  |             ^^^\n  |             |\n  |             not found in this scope\n  |             help: perhaps you intended to use this type: `i32`",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#integers",
    "href": "20_options.html#integers",
    "title": "Options",
    "section": "Integers",
    "text": "Integers\n\nRust numerical types have a fixed size.\nThey are in that respect like NumPy integers\nThey are different in that respect from Python int which is of theoretically infinite size and JavaScript, which only has floats.\nYou can tell by working with large numbers\n\n\u0016&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; x = np.int8(100)\n&gt;&gt;&gt; x * x\n&lt;stdin&gt;:1: RuntimeWarning: overflow encountered in scalar multiply\nnp.int8(16)\n&gt;&gt;&gt; y = 100\n&gt;&gt;&gt; y * y\n10000",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#signage",
    "href": "20_options.html#signage",
    "title": "Options",
    "section": "Signage",
    "text": "Signage\n\nIn Rust, as in NumPy, we specify whether integers may be signed (negative) or not.\nThese are usually referred to as “integer” and “unsigned”\n\n\n\n\n\ninteger.py\n\n&gt;&gt;&gt; x = np.int8(100)\n&gt;&gt;&gt; x + x\n&lt;stdin&gt;:1: RuntimeWarning: overflow encountered in scalar add\nnp.int8(-56)\n&gt;&gt;&gt; x - 110\nnp.int8(-10)\n\n\n\n\nunsigned.py\n\n&gt;&gt;&gt; x = np.uint8(100)\n&gt;&gt;&gt; x + x\nnp.uint8(200)\n&gt;&gt;&gt; x - 110\n&lt;stdin&gt;:1: RuntimeWarning: overflow encountered in scalar subtract\nnp.uint8(246)",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#on-ints",
    "href": "20_options.html#on-ints",
    "title": "Options",
    "section": "On ints",
    "text": "On ints\n\nUnsigned can be twice as big but can’t be negative.\nThe maximize size is two to the power of “bit length” - the number after int, like 8.\n\nOne lower power for signed values.\n\n&gt;&gt;&gt; x = np.int8(2 ** 7)\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nOverflowError: Python integer 128 out of bounds for int8\n&gt;&gt;&gt; x = np.int8(2 ** 7 - 1)\n&gt;&gt;&gt; x\nnp.int8(127)\nIn Rust, as in NumPy, we must decide how much memory we use before we use it.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#rust-integers",
    "href": "20_options.html#rust-integers",
    "title": "Options",
    "section": "Rust integers",
    "text": "Rust integers\n\n\n\nLength\nSigned\nUnsigned\n\n\n\n\n8-bit\ni8\nu8\n\n\n16-bit\ni16\nu16\n\n\n32-bit\ni32\nu32\n\n\n64-bit\ni64\nu64\n\n\n128-bit\ni128\nu128\n\n\narchitecture dependent\nisize\nusize\n\n\n\n\nYou should use u64 unless you have a compelling reason not to.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#aside",
    "href": "20_options.html#aside",
    "title": "Options",
    "section": "Aside",
    "text": "Aside\n\nThe case of wanting to use -1 for error handling does not apply to Rust for reasons we’ll cover latter, so always try to get code working with unsigned first.\n64 is just (at 99.9%+ probability) the preferred size for your physical device.\nYou should use the forthcoming “Option” for these matters.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#does-np.uin64-u64",
    "href": "20_options.html#does-np.uin64-u64",
    "title": "Options",
    "section": "Does np.uin64 ~= u64",
    "text": "Does np.uin64 ~= u64\n\nWhat happens if you add 1 to these?\n\nMake a hypothesis.\n\nE.g. write a comment.\n\nConduct an experiment.\n\nE.g. alter and run the code.\n\nUpdate your hypothesis, if not supported.\n\n\n\n\n\u0016&gt;&gt;&gt; x = np.uint64(2 ** 64 - 1)\n&gt;&gt;&gt; x\nnp.uint64(18446744073709551615)\n\nfn main() {\n    let x : u64 = 18446744073709551615;\n    println!(\"{x}\");\n}",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#floats",
    "href": "20_options.html#floats",
    "title": "Options",
    "section": "Floats",
    "text": "Floats\n\nThere are floats in Rust.\nThere are not floats in the Linux kernel.\n\n\nKernel code is normally prohibited from using floating-point (FP) registers or instructions, including the C float and double data types.\n\n\nTherefore there are not floats in this class.\n\nIf an operating system can be written without floats, so too can your code.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#booleans",
    "href": "20_options.html#booleans",
    "title": "Options",
    "section": "Booleans",
    "text": "Booleans\n\nBooleans are called bool (like Python) and stylized all-lowercase (like JavaScript)\n\n\n\nsrc/main.rs\n\nfn main() {\n    let t = true;\n\n    let f: bool = false; // with explicit type annotation\n}\n\n\nOtherwise unremarkable.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#characters",
    "href": "20_options.html#characters",
    "title": "Options",
    "section": "Characters",
    "text": "Characters\n\nVs. Python, Rust has a specific character type, distinct from strings of length 1.\nIt uses single quotes, which look like this: ''\nHere is an example:\n\n\n\nsrc/main.rs\n\nfn main() {\n    let c : char = 'a';  // Correct\n    let c : char = \"a\";  // Banned\n}",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#error-message",
    "href": "20_options.html#error-message",
    "title": "Options",
    "section": "Error message",
    "text": "Error message\n\u0016error[E0308]: mismatched types\n --&gt; src/main.rs:3:20\n  |\n3 |     let c : char = \"a\";\n  |             ----   ^^^ expected `char`, found `&str`\n  |             |\n  |             expected due to this\n  |\nhelp: if you meant to write a `char` literal, use single quotes\n  |\n3 -     let c : char = \"a\";\n3 +     let c : char = 'a';\n  |\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `scratch` (bin \"scratch\") due to 1 previous error\nuser@DESKTOP-THMS2PJ:~/tmp/scratch$ cat src/main.rs\nfn main() {\n    let c : char = 'a';\n    let c : char = \"a\";\n}",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#takeaway",
    "href": "20_options.html#takeaway",
    "title": "Options",
    "section": "Takeaway",
    "text": "Takeaway\n\nI never used Rust characters but ended up using them on Wordle, so just showing them now.\nI don’t expect you to use them pretty much ever, but they motivate the next topic via this line:\n\n  |             ----   ^^^ expected `char`, found `&str`\n\nWhat in the name of FeO is a &str",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#strings",
    "href": "20_options.html#strings",
    "title": "Options",
    "section": "“Strings”",
    "text": "“Strings”\n\nThere are kinda not really exactly strings in Rust.\nThis mostly has to do with Rust having unicode support.\nWe won’t really leverage unicode this term since we aren’t writing human-facing applications.\nBut we still deal with the consequences.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#today-2",
    "href": "20_options.html#today-2",
    "title": "Options",
    "section": "Today",
    "text": "Today\n\nMutability\nTyping\nParameters\nLoops\nIntro to Ownership",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#size",
    "href": "20_options.html#size",
    "title": "Options",
    "section": "Size",
    "text": "Size\n\nVersus the other types in Rust, which we stressed were of fixed size…\nA string is not.\n\n// String of length 0\nlet s = \"\"; \n// Complete text of Bhagavad Gita\nlet t = \"Dhritarashtra said: O Sanjay, after gathering on the holy field of Kurukshetra, and desiring to fight, what did my sons and the sons of Pandu do? ...\n\nAnd in fact, if we implemented Python integers in Rust, they would follow similar rules.\n\nAnything that has no bounded upper size, basically.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#ownership-rules",
    "href": "20_options.html#ownership-rules",
    "title": "Options",
    "section": "Ownership Rules",
    "text": "Ownership Rules\n\nEach value in Rust has an owner.\nThere can only be one owner at a time.\nWhen the owner goes out of scope, the value will be dropped.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#scope",
    "href": "20_options.html#scope",
    "title": "Options",
    "section": "Scope",
    "text": "Scope\n\nQuoth Rust Book:\n\n    {                      // s is not valid here, since it's not yet declared\n        let s = \"hello\";   // s is valid from this point forward\n\n        // do stuff with s\n    }                      // this scope is now over, and s is no longer valid\n\nYou can experimentally verify each of the claims.\nBasically, the memory associated with s exists at some time points, but not others.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#capital-s-string",
    "href": "20_options.html#capital-s-string",
    "title": "Options",
    "section": "Capital S String",
    "text": "Capital S String\n\nWe have thus far used “string literals”, where the string is typed into the program.\nThis is a special case and doesn’t allow working with strings.\nFor that, we use capital S String, which is closer to data structure than a data type in some ways:\n\n    let mut s = String::from(\"hello\");\n\n    s.push_str(\", world!\"); // push_str() appends a literal to a String\n\n    println!(\"{s}\"); // this will print `hello, world!`\n\nIt accepts a push operation a la a queue/stack/list, and must be initialized with a function call.\nA String is mutable, a literal is not.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#its-confusing",
    "href": "20_options.html#its-confusing",
    "title": "Options",
    "section": "It’s confusing",
    "text": "It’s confusing\n\nThis leads to some un-Pythonic behavior.\nVersus the immortal u64, our most beloved type, the ignomious String is fickle and fleeting.\nWe compare fixed size and variable size types, which have distinct behavior\n\n\n\n\nThis works.\n\nfn main() {\n    let x = 5;\n    let y = x;\n    println!(\"{x}\");\n}\n\n\nThis doesn’t.\n\nfn main() {\n    let s = String::from(\"6\");\n    let t = s;\n    println!(\"{s}\")\n}",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#whats-happening",
    "href": "20_options.html#whats-happening",
    "title": "Options",
    "section": "What’s happening?",
    "text": "What’s happening?\n\nI am unwilling to defend this Rust design decision, though we’ll understand it better over the course of the term.\nBasically, s passes “out of scope” as soon as it is assigned to t.\nThereafter, there is no declared variable of name s.\nBut this only happens to some types (and in my view which types are non-obvious).\n\nIt is potentially infinite types, but it’s unclear that e.g. String::from(\"6\") isn’t a fixed width string of lenth 1 (to me at least).",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#clone",
    "href": "20_options.html#clone",
    "title": "Options",
    "section": "Clone",
    "text": "Clone\n\nMy secret inside source with a real job (e.g. not professor) who writes Rust and also thought this was a bit silly:\n\n\nWhenever I use Rust, I just always .clone and when someone asks me about it, I say that’s a performance optimization for latter.\n\n\nRust says the same thing, actually:\n\nhelp: consider cloning the value if the performance cost is acceptable\n  |\n6 |     let t = s.clone();\n  |              ++++++++",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#example-1",
    "href": "20_options.html#example-1",
    "title": "Options",
    "section": "Example",
    "text": "Example\n\nIt is reasonable to use .clone on capital S String for e.g. Wordle, as needed.\nAs a challenge, don’t use .clone (you don’t need it)\n\n\n\n\nThis works.\n\nfn main() {\n    let x = 5;\n    let y = x;\n    println!(\"{x}\");\n}\n\n\nThis works.\n\nfn main() {\n    let s = String::from(\"6\");\n    let t = s.clone();\n    println!(\"{s}\")\n}\n\n\n\nBoth draw warnings for unused variables, but it’s a silly example anyway.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#why-it-matters-1",
    "href": "20_options.html#why-it-matters-1",
    "title": "Options",
    "section": "Why it matters?",
    "text": "Why it matters?\n\nYou’ll probably want to decompose capital S String operations into functions.\n\nThis is known as “programming”\n\nYou may want to .clone() a capital S String beforing yeeting it into a helper.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#example-code",
    "href": "20_options.html#example-code",
    "title": "Options",
    "section": "Example Code",
    "text": "Example Code\n\n\ncolour.rs\n\n\u0016fn print_red(s:String) {\n    // Some terminal hacking nonsense for colors\n    println!(\"\\u{001b}[31m{s}\\u{001b}[0m\");\n}\n\nfn print_grn(s:String) {\n    // More nonsense but 31 -&gt; 32\n    println!(\"\\u{001b}[32m{s}\\u{001b}[0m\");\n}\n\nfn main() {\n    let s = String::from(\"6\");\n    print_red(s.clone());\n    print_grn(s.clone());\n    println!(\"{s}\")\n}",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#example-output",
    "href": "20_options.html#example-output",
    "title": "Options",
    "section": "Example output",
    "text": "Example output\n\nI see something like this, your mileage may vary:\n\n6\n\n\n6\n\n\n6\n\nOn these slides, that’s styled with HTML, in my terminal it is styled with “ANSI Escape Codes”\nMy source is here: Read me!\n\n\n\ncolour.py\n\nprint(\"\\u001b[31mHello, world!\\u001b[0m\")\n\n\nMore in the lab.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#today-3",
    "href": "20_options.html#today-3",
    "title": "Options",
    "section": "Today",
    "text": "Today\n\nMutability\nTyping\nParameters\nLoops\nIntro to Ownership",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#declarations",
    "href": "20_options.html#declarations",
    "title": "Options",
    "section": "Declarations",
    "text": "Declarations\n\nYou have now seen how functions are declared when they accept arguments.\n\n\n\ncolour.rs\n\n\u0016fn print_red(s:String) {\n    // Some terminal hacking nonsense for colors\n    println!(\"\\u{001b}[31m{s}\\u{001b}[0m\");\n}\n\nfn print_grn(s:String) {\n    // More nonsense but 31 -&gt; 32\n    println!(\"\\u{001b}[32m{s}\\u{001b}[0m\");\n}\n\n\nSame as variables.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#today-4",
    "href": "20_options.html#today-4",
    "title": "Options",
    "section": "Today",
    "text": "Today\n\nMutability\nTyping\nParameters\nLoops\nIntro to Ownership",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#loops-1",
    "href": "20_options.html#loops-1",
    "title": "Options",
    "section": "3 loops",
    "text": "3 loops\n\nThere are 3 loops in Rust, one of for which I am issuing a partial ban, and also recursion.\n\nloop\nfor\nwhile\nRecursion",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#loop",
    "href": "20_options.html#loop",
    "title": "Options",
    "section": "Loop",
    "text": "Loop\n\nRust loop is its infinite loop type.\nI don’t recommend using it.\n\n\n\nsrc/main.rs\n\n// The rust book literally tells us to just run this code?\n\u0016\u0016fn main() {\n    loop {\n        println!(\"again!\");\n    }\n}",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#if-you-must",
    "href": "20_options.html#if-you-must",
    "title": "Options",
    "section": "If you must",
    "text": "If you must\n\nIf you must loop, please use:\n\nA named loop, with\nA named break\n\n\n\n\nsrc/main.rs\n\n// I would never do this, but it can be fun.\n\u0016\u0016fn main() {\n    let mut x = 0;\n    `loop_city: loop {\n        println!(\"{x}\");\n        x += 1\n        if x &gt; 10 {\n            break `loop_city;\n        }\n    }\n}",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#just-recurse",
    "href": "20_options.html#just-recurse",
    "title": "Options",
    "section": "Just recurse",
    "text": "Just recurse\n\nThis is how I would do that…\n\n\n\nsrc/main.rs\n\n\u0016fn help(x:u64) {\n    if x &lt;= 10 {\n        println!(\"{x}\");\n        help(x + 1);\n    }\n}\n\nfn main() {\n    help(0);\n}\n\n\nBy the way - ! rather than not is logical negation.\n\nSo would be !(x &gt; 10) vs. not (x &gt; 10)",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#while",
    "href": "20_options.html#while",
    "title": "Options",
    "section": "while",
    "text": "while\n\nMy second favorite after recursion is while\n\nI finished undergraduate without using a for loop btw.\nYou may not this is identical to the recursive solution.\n\n\n\n\n\nVia while\n\n\n\nsrc/main.rs\n\nfn main() {\n    let mut x = 0;\n    while x &lt;= 10 {\n        println!(\"{x}\");\n        x += 1;\n    }\n}\n\n\n\nVia fn\n\n\n\nsrc/main.rs\n\n// elsewhere help is called on 0\n\u0016fn help(x:u64) {\n    if x &lt;= 10 {\n        println!(\"{x}\");\n        help(x + 1);\n    }\n}",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#for",
    "href": "20_options.html#for",
    "title": "Options",
    "section": "for",
    "text": "for\n\nRust for is Pythonic “for each” rather than C/C++/Java/JavaScript “for” which should help you.\nWe also implement a collection type, the array (which is Python tuple-like or NumPy array-like)\n\n\n\nsrc/main.rs\n\nfn main() {\n    let a = [10, 20, 30, 40, 50];\n\n    for element in a {\n        println!(\"the value is: {element}\");\n    }\n}",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#i-dont-know",
    "href": "20_options.html#i-dont-know",
    "title": "Options",
    "section": "I don’t know…",
    "text": "I don’t know…\n\nI don’t know if you’ll think of Wordle as loops over elements of a collection:\n\n    for c in guess.chars() {\n        println!(\"{}\", c);\n    }\n\nBut the alternatives are, I think, pretty bleak:\n\n\u0016    for i in 0..5 { // Rust range\n        // Rust strings lack indices\n        // Instead they return either a character or a \"None\"\n        // We have to unwrap that\n        // Rust strings, amirite\n        println!(\"{}\", guess.chars().nth(i).unwrap());\n    }\n\nHelpfully, cargo run told me how to write that.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#today-5",
    "href": "20_options.html#today-5",
    "title": "Options",
    "section": "Today",
    "text": "Today\n\nMutability\nTyping\nParameters\nLoops\nIntro to Ownership",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "20_options.html#missing-pieces",
    "href": "20_options.html#missing-pieces",
    "title": "Options",
    "section": "Missing pieces",
    "text": "Missing pieces\n\nWe did not discuss the following in detail:\n\nFloats (don’t use them)\nRange (0..5)\nError handling (unwrap)\nString slices (&str)\n\nI think I taught you how to avoid each, however.\nRead more in Rust Book chapters 3 and 4.",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "22_wordle.html",
    "href": "22_wordle.html",
    "title": "Wordle",
    "section": "",
    "text": "The idea to do Wordle as the first Rust assignment was inspired by the Chapter 2 of the Rust Book, Guessing Game\nThe idea to do Wordle as a programming assignment is inspired by the Nifty Assignment of the same name.\n\n\n\n\n\nWordle exercises the following:\n\nStrings in Rust\nCollection types, like arrays or vectors\nScalar types, like integers or characters\nFile I/O and the UNIX-based file system\nLoops\n\n\n\n\n\n\nTo complete this assignment, you must:\n\nCreate a 22 directory in your 271rs repository.\nThis folder must be a Cargo package.\nIt must leverage no other Cargo packages, namely it may not use packages for randomization.\n\ncargo new 22 --name wordle --vcs none\n\n\n\n\n\nCharacter coloring via ANSI escape codes\nFile I/O for randomization\nFile I/O for input\nConsistency with a randomized answer\nConsistency with word list\nConsistency with prior guesses\nStyling using Box-drawing_characters\n\nThe following is a staged screenshot in VS Code, showing the expected terminal appearance.\n\n\n\nThe following is a staged screenshot in WSL2, showing the expected terminal appearance.",
    "crumbs": [
      "Wordle"
    ]
  },
  {
    "objectID": "22_wordle.html#citation",
    "href": "22_wordle.html#citation",
    "title": "Wordle",
    "section": "",
    "text": "The idea to do Wordle as the first Rust assignment was inspired by the Chapter 2 of the Rust Book, Guessing Game\nThe idea to do Wordle as a programming assignment is inspired by the Nifty Assignment of the same name.",
    "crumbs": [
      "Wordle"
    ]
  },
  {
    "objectID": "22_wordle.html#pre-flight-checks",
    "href": "22_wordle.html#pre-flight-checks",
    "title": "Wordle",
    "section": "",
    "text": "Wordle exercises the following:\n\nStrings in Rust\nCollection types, like arrays or vectors\nScalar types, like integers or characters\nFile I/O and the UNIX-based file system\nLoops",
    "crumbs": [
      "Wordle"
    ]
  },
  {
    "objectID": "22_wordle.html#requirements",
    "href": "22_wordle.html#requirements",
    "title": "Wordle",
    "section": "",
    "text": "To complete this assignment, you must:\n\nCreate a 22 directory in your 271rs repository.\nThis folder must be a Cargo package.\nIt must leverage no other Cargo packages, namely it may not use packages for randomization.\n\ncargo new 22 --name wordle --vcs none",
    "crumbs": [
      "Wordle"
    ]
  },
  {
    "objectID": "22_wordle.html#requirements-1",
    "href": "22_wordle.html#requirements-1",
    "title": "Wordle",
    "section": "",
    "text": "Character coloring via ANSI escape codes\nFile I/O for randomization\nFile I/O for input\nConsistency with a randomized answer\nConsistency with word list\nConsistency with prior guesses\nStyling using Box-drawing_characters\n\nThe following is a staged screenshot in VS Code, showing the expected terminal appearance.\n\n\n\nThe following is a staged screenshot in WSL2, showing the expected terminal appearance.",
    "crumbs": [
      "Wordle"
    ]
  },
  {
    "objectID": "22_wordle.html#nifty-assignment-description",
    "href": "22_wordle.html#nifty-assignment-description",
    "title": "Wordle",
    "section": "Nifty Assignment Description",
    "text": "Nifty Assignment Description\n\nThe object of the Wordle puzzle is to figure out the hidden word for the day using no more than six guesses. When you type in a word and then hit the RETURN or ENTER key, the website gives you information about how close your guess is by coloring the background of the letters. For every letter in your guess that is in its correct position, Wordle colors the [letter green, the “correct color”]. For every letter that appears in the word but is not in the correct position, Wordle colors the [letter yellow, the “present color”]. All letters in the guess that don’t appear in the word are colored [red, the “missing color”]\n\n\nI will assume your familiarity with Wordle, or Read more.",
    "crumbs": [
      "Wordle"
    ]
  },
  {
    "objectID": "22_wordle.html#aside",
    "href": "22_wordle.html#aside",
    "title": "Wordle",
    "section": "Aside",
    "text": "Aside\n\nI take an extremely literal interpretation of the following.\n\n\nFor every letter that appears in the word but is not in the correct position.\n\n\nI implemented this in Python as:\n\nguess[i] in answer\n\nI implemented this in JavaScript as:\n\nanswer.include(guess[i])\n\nI did not engage with any complicated rules involving double letters, as I was unaware of those rules as a casual player and do not find them algorithmically interesting.\nSo, in the case that a guess or an answer contains multiples of any letter, the precise correctness of any usage of the “missing color” (in our case yellow) is left undefined and to the discretion of the student.",
    "crumbs": [
      "Wordle"
    ]
  },
  {
    "objectID": "22_wordle.html#python",
    "href": "22_wordle.html#python",
    "title": "Wordle",
    "section": "Python",
    "text": "Python\n\nThe following Python solution meets all assignment requirements except for usage of /dev/random (I wanted the example to work on Windows).\nIt is not manually written Python, but created by providing a Rust reference solution to an LLM, translating to Python, and editting for correctness.\n\nI did not find LLMs could go the other direction. You may find otherwise.\n\nA few notes:\n\nThe box drawing characters are spaced such that guessed letters have a space between them to the nearest horizontal box drawing character.\nI maintain all letters in lower case. This is implicitly enforced by the requirement that guesses be members of WORDS\nThis is a 5 word Latin word list. You are encouraged to use the actual wordlist, which I can’t find in it’s original form but is present on this webpage (Scroll to bottom).\n\nPlaying using this word list was relatively more challenging, as it omits many common words and plurals.\n\n\n\n\n\nwordle.py\n\n# A list of valid words, truncated for this example.\nWORDS = [\"sator\", \"arepo\", \"tenet\", \"opera\", \"rotas\"]\n\n# ANSI color codes for colored text\n# 31: Red, 32: Green, 33: Yellow\nR = 31  # Red (letter not in word)\nG = 32  # Green (letter in correct position)\nY = 33  # Yellow (letter in word but wrong position)\n\n# Box-drawing characters for the game board\nT = \"┌───┬───┬───┬───┬───┐\"  # Top border\nM = \"├───┼───┼───┼───┼───┤\"  # Middle border\nB = \"└───┴───┴───┴───┴───┘\"  # Bottom border\n\ndef letter(a: str, c: int):\n    \"\"\"\n    Prints a single letter with a specified ANSI color.\n\n    Args:\n        a: The letter to print.\n        c: The ANSI color code.\n    \"\"\"\n    print(f\"│ \\u001b[{c}m{a}\\u001b[0m \", end=\"\")\n\ndef colors(s: str, answer: str):\n    \"\"\"\n    Analyzes a guessed word and prints it with the appropriate colors.\n\n    Args:\n        s: The guessed word.\n        answer: The correct answer word.\n    \"\"\"\n    for i in range(5):\n        char = s[i]\n        color_code = R\n        if answer[i] == char:\n            color_code = G\n        elif char in answer:\n            color_code = Y\n        letter(char, color_code)\n    print(\"│\")\n\ndef game(words: list[str], answer: str):\n    \"\"\"\n    Clears the screen and draws the game board with the current guesses.\n\n    Args:\n        words: A list of guessed words.\n        answer: The correct answer word.\n    \"\"\"\n    print(\"\\u001b[2J\")  # Clear the screen\n    print(T)\n    for i in range(5):\n        colors(words[i], answer)\n        print(M)\n    colors(words[5], answer)\n    print(B)\n\ndef main():\n    \"\"\"\n    The main game loop.\n    \"\"\"\n    words = [\"     \"] * 6\n\n    ###############################################\n    #                                             #\n    # You are required to use /dev/random in Rust #\n    #                                             #\n    ###############################################\n    import random\n    answer = random.choice(WORDS)\n\n    attempts = 0\n\n    print(\"\\u001b[2J\", end=\"\")  # Clear the screen\n    print(\"Use lowercase only btw.\")\n\n    while words[5] == \"     \":\n        guess = input().strip()  # Convert input to lowercase\n        if guess in WORDS:\n            words[attempts] = guess\n            game(words, answer)\n            if guess == answer:\n                print(\"Winner\")\n                return\n            attempts += 1\n        else:\n            print(\"Not a valid word!\")\n\n    print(\"Game over :(\")\n\nif __name__ == \"__main__\":\n    main()",
    "crumbs": [
      "Wordle"
    ]
  },
  {
    "objectID": "31_hamming.html",
    "href": "31_hamming.html",
    "title": "Hamming",
    "section": "",
    "text": "Lab Day\n\nMixed use assignment.\nPractically useful for HW\nTheoretically useful for Final",
    "crumbs": [
      "Hamming"
    ]
  },
  {
    "objectID": "31_hamming.html#announcements",
    "href": "31_hamming.html#announcements",
    "title": "Hamming",
    "section": "",
    "text": "Lab Day\n\nMixed use assignment.\nPractically useful for HW\nTheoretically useful for Final",
    "crumbs": [
      "Hamming"
    ]
  },
  {
    "objectID": "31_hamming.html#homework",
    "href": "31_hamming.html#homework",
    "title": "Hamming",
    "section": "Homework",
    "text": "Homework\n\n“Macros” is ready.\n\nNot too hard; just practice with the operators.\n\nDue Friday, 26 Sept. at 1440 ET.",
    "crumbs": [
      "Hamming"
    ]
  },
  {
    "objectID": "31_hamming.html#citation",
    "href": "31_hamming.html#citation",
    "title": "Hamming",
    "section": "Citation",
    "text": "Citation\n\nI learned the term Hamming distance from Prof. Josh Laison while discussing a possible research collaboration.",
    "crumbs": [
      "Hamming"
    ]
  },
  {
    "objectID": "31_hamming.html#today",
    "href": "31_hamming.html#today",
    "title": "Hamming",
    "section": "Today",
    "text": "Today\n\nHamming\nHamming weight\nHamming distance",
    "crumbs": [
      "Hamming"
    ]
  },
  {
    "objectID": "31_hamming.html#the-person",
    "href": "31_hamming.html#the-person",
    "title": "Hamming",
    "section": "The person",
    "text": "The person\n\nHamming initially wanted to study engineering, but money was scarce during the Great Depression, and the only scholarship offer he received came from the University of Chicago, which had no engineering school. Instead, he became a science student, majoring in mathematics, and received his Bachelor of Science degree in 1937.",
    "crumbs": [
      "Hamming"
    ]
  },
  {
    "objectID": "31_hamming.html#fine-print",
    "href": "31_hamming.html#fine-print",
    "title": "Hamming",
    "section": "Fine print",
    "text": "Fine print\n\nIt is a virtual certainty that Hamming did not discover the concepts of Hamming weight or Hamming distance, both of which have limited use in historical record before Hamming was alive.\nTypically I avoid using terms where someone is named after someone who did not invent it.\nI don’t have alternate name in this case.\n\nIt can be called “edit distance” but there are other edit distances.\n\nIt must be remarked upon that an abstract mathematical concept was named after a US Ivy Leaguer who worked on the Manhattan Project, and that this naming is highly political.",
    "crumbs": [
      "Hamming"
    ]
  },
  {
    "objectID": "31_hamming.html#definition",
    "href": "31_hamming.html#definition",
    "title": "Hamming",
    "section": "Definition",
    "text": "Definition\n\nThe Hamming weight of a string is the number of symbols that are different from the zero-symbol of the alphabet used.\n\n\nThis adopts the formal computer science notion of referring to bit strings as:\n\nwords in the\nlanguages, which is the set of all possible bitstrings\nthat is composed of the symbols, which are the bit values \\(\\{0, 1\\}\\)\n\nSo, Hamming weight of a byte is the number of 1s in that byte.",
    "crumbs": [
      "Hamming"
    ]
  },
  {
    "objectID": "31_hamming.html#your-task",
    "href": "31_hamming.html#your-task",
    "title": "Hamming",
    "section": "Your task",
    "text": "Your task\n\nUsing the bitwise operators, shifts, and addition, write the following functions:\n\nfn weight_u8(byte:u8) -&gt; u64\nfn weight_u64(word:u64) -&gt; u64\nfn weight_bytes(bytes:Vec&lt;u8&gt;) -&gt; u64\nfn weight_words(words:Vec&lt;u64&gt;) -&gt; u64\n\nYou may wish to follow the Rust convention of implementing these in a src/lib.rs file.\n\nYou will need to prefix them as pub fn in src/lib.rs\nYou will need to prefix them with your package name and :: in src/main.rs\n\nI used hamming::weight_u8, for example.\n\n\nThis convention will be required for the homework, but is not required now.",
    "crumbs": [
      "Hamming"
    ]
  },
  {
    "objectID": "31_hamming.html#template-files",
    "href": "31_hamming.html#template-files",
    "title": "Hamming",
    "section": "Template files",
    "text": "Template files\n\nI made a package:\n\ncargo new 31 --name hamming --vcs none\n\nI wrote a library function:\n\n\n\nsrc/lib.rs\n\npub fn weight_u8(byte:u8) -&gt; u64 {\n    let mut cnt : u64 = 0;\n    // This is wrong.\n    cnt += 1;\n    // That was wrong.\n    return cnt;\n\n\nI wrote some tests:\n\n\n\nsrc/main.rs\n\nfn main() {\n    dbg!(hamming::weight_u8(0x33_u8));\n}\n\n\nAfter fixing my function, I saw the following:\n\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/hamming`\n[src/main.rs:2:5] hamming::weight_u8(0x33_u8) = 4",
    "crumbs": [
      "Hamming"
    ]
  },
  {
    "objectID": "31_hamming.html#definition-1",
    "href": "31_hamming.html#definition-1",
    "title": "Hamming",
    "section": "Definition",
    "text": "Definition\n\nIn information theory, the Hamming distance between two strings or vectors of equal length is the number of positions at which the corresponding symbols are different.\n\n\nThe Hamming weight is the Hamming distance from the string of all 0 symbols.",
    "crumbs": [
      "Hamming"
    ]
  },
  {
    "objectID": "31_hamming.html#your-task-1",
    "href": "31_hamming.html#your-task-1",
    "title": "Hamming",
    "section": "Your task",
    "text": "Your task\n\nUsing the bitwise operators, shifts, and addition, write the following functions:\n\nfn distance_u8(b:u8, c:u8) -&gt; u64\nfn distance_u64(w:u64, x:u64) -&gt; u64\nfn distance_bytes(bs:Vec&lt;u8&gt;, cs:Vec&lt;u8&gt;) -&gt; u64\nfn distance_words(ws:Vec&lt;u64&gt;, xs:Vec&lt;u64&gt;) -&gt; u64\n\nYou may change the parameter names if those don’t make sense to you.\n\nThey were procedurally generated.",
    "crumbs": [
      "Hamming"
    ]
  },
  {
    "objectID": "31_hamming.html#today-1",
    "href": "31_hamming.html#today-1",
    "title": "Hamming",
    "section": "Today",
    "text": "Today\n\nHamming\nHamming weight\nHamming distance",
    "crumbs": [
      "Hamming"
    ]
  },
  {
    "objectID": "31_hamming.html#strings-as-bitstrings",
    "href": "31_hamming.html#strings-as-bitstrings",
    "title": "Hamming",
    "section": "Strings as bitstrings",
    "text": "Strings as bitstrings\n\nCompute the Hamming distance between the strings Willamette and Xjmmbnfuuf.\nSuccessfully pronounce Xjmmbnfuuf",
    "crumbs": [
      "Hamming"
    ]
  },
  {
    "objectID": "31_hamming.html#popcnt",
    "href": "31_hamming.html#popcnt",
    "title": "Hamming",
    "section": "POPCNT",
    "text": "POPCNT\n\nRead this paper",
    "crumbs": [
      "Hamming"
    ]
  },
  {
    "objectID": "40_sha2.rjs.html#announcements",
    "href": "40_sha2.rjs.html#announcements",
    "title": "SHA-2",
    "section": "Announcements",
    "text": "Announcements\n\nAction Items:\n\nHow was Macros?\nNext homework coming out now - SHA512\n\nSplit over two weeks\nIntermediate checkpoint recommended not required.\n\nThat is, no 42 directory required."
  },
  {
    "objectID": "40_sha2.rjs.html#today",
    "href": "40_sha2.rjs.html#today",
    "title": "SHA-2",
    "section": "Today",
    "text": "Today\n\nSHA-512\n\nWhy?\nWhat?\nHow?"
  },
  {
    "objectID": "40_sha2.rjs.html#slide-credit",
    "href": "40_sha2.rjs.html#slide-credit",
    "title": "SHA-2",
    "section": "Slide Credit",
    "text": "Slide Credit\n\nSaravanan Vijayakumaran\nsarva@ee.iitb.ac.in\n\nDepartment of Electrical Engineering\n\nIndian Institute of Technology Bombay"
  },
  {
    "objectID": "40_sha2.rjs.html#hash-functions",
    "href": "40_sha2.rjs.html#hash-functions",
    "title": "SHA-2",
    "section": "Hash Functions",
    "text": "Hash Functions\n\nMethods for deterministically compress a long input string to a shorter output called a digest\n\nAlso called “signature”\nCan hash anything stored in computer\n\nThese are also called “compression” or “one-way” hash functions."
  },
  {
    "objectID": "40_sha2.rjs.html#hash-merits",
    "href": "40_sha2.rjs.html#hash-merits",
    "title": "SHA-2",
    "section": "Hash Merits",
    "text": "Hash Merits\n\nPrimary requirement is that it should be infeasible to find collisions,\n\ni.e. no two inputs have same digest.\nIf I download Ubuntu and check the signature, I should know it’s Ubuntu.\nIf Ubuntu and a malware package have the same signature, useless."
  },
  {
    "objectID": "40_sha2.rjs.html#non-cryptographic",
    "href": "40_sha2.rjs.html#non-cryptographic",
    "title": "SHA-2",
    "section": "Non-Cryptographic",
    "text": "Non-Cryptographic\n\nUsed to build hash tables\n\nKey-value stores with \\(\\mathcal{O}(1)\\) lookup time.\nMy hashtable/hashmap slides\n\nExample: Python hash\n\n&gt;&gt;&gt; print(\"\\n\".join([f\"{hash(a):+d}\" for a in \"ABCDE\"]))\n-8631190624005339361\n+5631042488191293803\n-2170806150006979524\n+6678617945331639637\n+8928069711880473582"
  },
  {
    "objectID": "40_sha2.rjs.html#example.tex",
    "href": "40_sha2.rjs.html#example.tex",
    "title": "SHA-2",
    "section": "Example.tex",
    "text": "Example.tex\n\nLet \\(M\\) be the size of some hash table\nTake \\(a \\in \\mathbb{N} : a &lt; M \\land \\gcd(a, M) = 1\\)\n\nThat is, two positive coprime integers.\n\nAny integer value \\(x\\) can be mapped into \\(\\mathbb{N}/(M) = \\{0,1,\\ldots, M-1\\}\\)\n\nh_a(x) = a x \\pmod{M}\n\\[\nh_a(x) = a x \\pmod{M}\n\\]"
  },
  {
    "objectID": "40_sha2.rjs.html#example.py",
    "href": "40_sha2.rjs.html#example.py",
    "title": "SHA-2",
    "section": "Example.py",
    "text": "Example.py\n\nWe can express in a programming language.\nWe note that 257 == 0x101 is prime.\n\nAnd therefore \\(\\forall M : \\gcd(257,M) = 1\\)\n\n\nimport math\nlambda x, a, M : (a * x) % M\na, M = 0x05, 1 &lt;&lt; 0x08\nassert(all((not math.gcd(a, M) == 1) or h(x, a, M) in range(M) for x in range(M)))\nprint('h'+str((0xDA7A,a,M)), '=', h(0xDA7A,a,M))\n\nWe see:\n\nh(55930, 5, 256) = 98"
  },
  {
    "objectID": "40_sha2.rjs.html#example.rs",
    "href": "40_sha2.rjs.html#example.rs",
    "title": "SHA-2",
    "section": "Example.rs",
    "text": "Example.rs\n\nWe note a high performance special case.\nLet \\(w\\) be the bit size used to store numbers\n\nLikely 32 == 0x20 for Rust i32\n\\(W\\) stands for word size\n\nTake \\(W = 2^w\\) and \\(M = 2^m\\)\n\nfn h(x:i32, a:i32, m:i32) -&gt; i32 {\n    return (a * x) &gt;&gt; (i32::BITS * 0x10 - m); \n}"
  },
  {
    "objectID": "40_sha2.rjs.html#collisions",
    "href": "40_sha2.rjs.html#collisions",
    "title": "SHA-2",
    "section": "Collisions",
    "text": "Collisions\n\nA collision occurs if \\[\n\\exists x, x' : x \\neq x' \\land h(x) = h(x')\n\\]\nThat is, this assertion fails:\n\nx_0, x_1 = 1,2\nassert(((x_0 != x_1) and (h(x_0, a, M) == h(x_1, a, M))))\n\nGoal: minimize:non-crypto::avoid:crypto collisions.\n\nAchieve this via a large codomain for \\(h\\)"
  },
  {
    "objectID": "40_sha2.rjs.html#codomain",
    "href": "40_sha2.rjs.html#codomain",
    "title": "SHA-2",
    "section": "Codomain:",
    "text": "Codomain:\n\n“In mathematics, a codomain or set of destination of a function is a set into which all of the output of the function is constrained to fall. It is the set \\(Y\\) in the notation \\(f: X → Y\\). The term range is sometimes ambiguously used to refer to either the codomain or the image of a function.”"
  },
  {
    "objectID": "40_sha2.rjs.html#test-it",
    "href": "40_sha2.rjs.html#test-it",
    "title": "SHA-2",
    "section": "Test it:",
    "text": "Test it:\nh = lambda x, a, M : (a * x) % M\na, M = 0x05, 1 &lt;&lt; 0x08\nassert(set(h(x, a, M) for x in range(M)) == set(range(M)))\n\nAs a rule we shouldn’t try to write proofs/definitions in Python, but…\nSmall \\(M = 2^{0x08} = 256\\) means our computer can handle all possibilities."
  },
  {
    "objectID": "40_sha2.rjs.html#visualize",
    "href": "40_sha2.rjs.html#visualize",
    "title": "SHA-2",
    "section": "Visualize:",
    "text": "Visualize:"
  },
  {
    "objectID": "40_sha2.rjs.html#cryptographic",
    "href": "40_sha2.rjs.html#cryptographic",
    "title": "SHA-2",
    "section": "Cryptographic",
    "text": "Cryptographic\n\nBegin with SHA-2 (Secure Hash Algorithm 2).\n\nA family of cryptographic hash functions.\nBy the U.S. National Security Agency (NSA)\n\nPublished by the U.S. National Institute of Standards and Technology (NIST) in 2001."
  },
  {
    "objectID": "40_sha2.rjs.html#context",
    "href": "40_sha2.rjs.html#context",
    "title": "SHA-2",
    "section": "Context",
    "text": "Context\n\nSHA-1, released in 1995, found to have significant vulnerabilities.\nGrowing concerns about the security of SHA-1 led to the development of SHA-2.\n\nSHA-3 released in 2015, not in wide use.\nFor if weakness in SHA-2 discovered.\nSHA-2 regarded as secure in 2025."
  },
  {
    "objectID": "40_sha2.rjs.html#family",
    "href": "40_sha2.rjs.html#family",
    "title": "SHA-2",
    "section": "Family",
    "text": "Family\n\nSix hash functions release August 2001:\n\nSHA-224\nSHA-256\nSHA-384\nSHA-512\nSHA-512/224\nSHA-512/256"
  },
  {
    "objectID": "40_sha2.rjs.html#adoption-and-usage",
    "href": "40_sha2.rjs.html#adoption-and-usage",
    "title": "SHA-2",
    "section": "Adoption and Usage",
    "text": "Adoption and Usage\n\nSHA-2 has been widely adopted in\n\nDigital signatures\nVersion control systems\nOther stuff"
  },
  {
    "objectID": "40_sha2.rjs.html#sha-2-pledge",
    "href": "40_sha2.rjs.html#sha-2-pledge",
    "title": "SHA-2",
    "section": "SHA-2 Pledge",
    "text": "SHA-2 Pledge\n\nI need a verbal confirmation:\n\nEven though we will implement cryptography…\nWe assume their insecurity as we learn to:\n\nTest our code\nWrite proofs\nUse compilers\n\nWe don’t know what side channel attacks are.\n\nI say: out-of-scope."
  },
  {
    "objectID": "40_sha2.rjs.html#sha-512-overview",
    "href": "40_sha2.rjs.html#sha-512-overview",
    "title": "SHA-2",
    "section": "SHA-512 Overview",
    "text": "SHA-512 Overview\n\nSHA-2 with a 512-bit output length\nAccepts bit strings of length up to \\(2^{128} - 1\\)\n\n~340 undecillion bits\n~42 septillion terabytes"
  },
  {
    "objectID": "40_sha2.rjs.html#two-stages",
    "href": "40_sha2.rjs.html#two-stages",
    "title": "SHA-2",
    "section": "Two Stages",
    "text": "Two Stages\n\nOutput calculation has two stages:\n\nPreprocessing\nHash Computation"
  },
  {
    "objectID": "40_sha2.rjs.html#preprocessing",
    "href": "40_sha2.rjs.html#preprocessing",
    "title": "SHA-2",
    "section": "Preprocessing",
    "text": "Preprocessing\n\nA 512-bit state variable \\(H^{(0)}\\) is initialized:\n\n\\[\n\\begin{align*}\n\\begin{split}\nH_0^{(0)} = \\texttt{0x6a09e667f3bcc908}, \\quad H_1^{(0)} = \\texttt{0xbb67ae8584caa73b},\\\\\nH_2^{(0)} = \\texttt{0x3c6ef372fe94f82b}, \\quad H_3^{(0)} = \\texttt{0xa54ff53a5f1d36f1},\\\\\nH_4^{(0)} = \\texttt{0xa54ff53a5f1d36f1}, \\quad H_5^{(0)} = \\texttt{0x9b05688c2b3e6c1f},\\\\\nH_6^{(0)} = \\texttt{0x1f83d9abfb41bd6b}, \\quad H_7^{(0)} = \\texttt{0x5be0cd19137e2179}.\n\\end{split}\n\\end{align*}\n\\]\n\n“Fractional parts of square roots of first primes”"
  },
  {
    "objectID": "40_sha2.rjs.html#input-padding",
    "href": "40_sha2.rjs.html#input-padding",
    "title": "SHA-2",
    "section": "Input Padding",
    "text": "Input Padding\n\nThe input \\(M\\) is padded to a length that is a multiple of 1024.\nLet \\(M\\) be \\(l\\)-bits long.\nFind the smallest non-negative \\(k\\) such that: \\[\nk + l + 129 \\equiv 0 \\pmod{1024}\n\\]\n\\(\\equiv\\) is pronounced “congruent” (in this context)"
  },
  {
    "objectID": "40_sha2.rjs.html#padding-content",
    "href": "40_sha2.rjs.html#padding-content",
    "title": "SHA-2",
    "section": "Padding Content",
    "text": "Padding Content\n\nAppend \\(k + 129\\) bits to \\(M\\):\n\nA single one (1), followed by\n\\(k\\) zeros (0), followed by\nThe 128-bit representation of \\(l\\). \\[\n\\begin{align*}\n1\\underbrace{000 \\cdots 000}_{k \\textrm{ zeros}}\\underbrace{l}_{\\textrm{ 128 bits}} \\\\\n\\end{align*}\n\\]"
  },
  {
    "objectID": "40_sha2.rjs.html#example.py-1",
    "href": "40_sha2.rjs.html#example.py-1",
    "title": "SHA-2",
    "section": "Example.py",
    "text": "Example.py\n\nPerhaps easier to show with strings.\n\nM = \"Hello I am a message of some length. \" * 3\nl = len(M.encode('utf-8')) * 8\nk = 1024\nl = len(M.encode('utf-8')) * 8\nk = 1024 - (l + 129) % 1024\nprint(\"l=\", l, \"k=\", k, \"pad=\", \"0x8\" + \"0\" * (k//4 - 1) + f\"{l:032x}\") ## 128 // 4 == 32\n\nWe see:\n\nl= 888 k= 7 pad= 0x800000000000000000000000000000378"
  },
  {
    "objectID": "40_sha2.rjs.html#hash-computation",
    "href": "40_sha2.rjs.html#hash-computation",
    "title": "SHA-2",
    "section": "Hash Computation",
    "text": "Hash Computation\n\nPadded input is split into \\(N\\) 1024-bit blocks:\n\nWe note this is 1-indexed, by convention. \\[\nM^{(1)}, M^{(2)}, \\ldots, M^{(N)}\n\\]\n\nWhen testing, expect to have only \\(M^{(1)}\\)\n\n1024 is a lot of bytes to e.g. type in.\nTest more once it works.\nYou know how to type in bits or get random bits!"
  },
  {
    "objectID": "40_sha2.rjs.html#hash-type",
    "href": "40_sha2.rjs.html#hash-type",
    "title": "SHA-2",
    "section": "Hash Type",
    "text": "Hash Type\n\nThe hash function has the following type: \\[\nf: M:\\{0,1\\}^{1024} \\times H:\\{0,1\\}^{512} \\rightarrow H':\\{0,1\\}^{512}\n\\]\nGiven \\(H^{(i-1)}\\), calculate \\(H^{(i)}\\) using: \\[\nH^{(i)} = f(M^{(i)}, H^{(i-1)}), \\quad 1 \\leq i \\leq N.\n\\]\n\n1-indexed"
  },
  {
    "objectID": "40_sha2.rjs.html#words",
    "href": "40_sha2.rjs.html#words",
    "title": "SHA-2",
    "section": "Words",
    "text": "Words\n\nWe specify bitwise operations over exactly 64 bit words.\nIn Rust, we’d useu64\n\nfn rotate(a:u64, b:u64) -&gt; u64 {\n    // Your code here!\n    return a;\n}"
  },
  {
    "objectID": "40_sha2.rjs.html#operations",
    "href": "40_sha2.rjs.html#operations",
    "title": "SHA-2",
    "section": "Operations",
    "text": "Operations\n\nBitwise logical operations\n\nUnary,\nBinary, and\nTernary, and\n\nShift/rotate operations\n\nSimple, and\nComposite"
  },
  {
    "objectID": "40_sha2.rjs.html#words-1",
    "href": "40_sha2.rjs.html#words-1",
    "title": "SHA-2",
    "section": "Words",
    "text": "Words\n\nBitwise logical operations accept 1, 2, or 3 words of size 64 (u64) and produce one word.\n\nTerm these words \\(U\\), \\(V\\), \\(W\\)\n\nShift/rotate operations additionally accept one natural number \\(n\\) &lt; 64.\n\nTerm this \\(n\\)"
  },
  {
    "objectID": "40_sha2.rjs.html#unary-bitwise",
    "href": "40_sha2.rjs.html#unary-bitwise",
    "title": "SHA-2",
    "section": "Unary Bitwise",
    "text": "Unary Bitwise\n\nThere is only one:\n‘bitwise complement’/‘bitwise logical not’: \\[\n\\lnot U\n\\]\nAs from the Bits lecture"
  },
  {
    "objectID": "40_sha2.rjs.html#binary-bitwise",
    "href": "40_sha2.rjs.html#binary-bitwise",
    "title": "SHA-2",
    "section": "Binary Bitwise",
    "text": "Binary Bitwise\n\nThere are four of which we use three (no NAND)\n\\(U \\land V\\), \\(U \\lor V\\), \\(U \\oplus V\\): AND, OR, XOR\nAs from the Bits lecture"
  },
  {
    "objectID": "40_sha2.rjs.html#rust-math",
    "href": "40_sha2.rjs.html#rust-math",
    "title": "SHA-2",
    "section": "Rust Math",
    "text": "Rust Math\n\nRust addition on u64 can already only be conducted modulo \\(2^{64}\\)\n\nWhat else would it be?\nFinite number of bits means finite values.\n\n\n\n\nsrc/main.rs\n\nfn main() {\n    let x : u64 = 18_000_000_000_000_000_000;\n    dbg!(x + x);\n}"
  },
  {
    "objectID": "40_sha2.rjs.html#we-see",
    "href": "40_sha2.rjs.html#we-see",
    "title": "SHA-2",
    "section": "We see",
    "text": "We see\n$ cargo r\n   Compiling bits v0.1.0 (/home/user/tmp/30)\nerror: this arithmetic operation will overflow\n --&gt; src/main.rs:4:10\n  |\n4 |     dbg!(x + x);\n  |          ^^^^^ attempt to compute `18000000000000000000_u64 + 18000000000000000000_u64`, which would overflow\n  |\n  = note: `#[deny(arithmetic_overflow)]` on by default\n\nerror: could not compile `bits` (bin \"bits\") due to 1 previous error"
  },
  {
    "objectID": "40_sha2.rjs.html#ternary-bitwise",
    "href": "40_sha2.rjs.html#ternary-bitwise",
    "title": "SHA-2",
    "section": "Ternary Bitwise",
    "text": "Ternary Bitwise\n\nCHOICE and MEDIAN, expressed logically: \\[\n\\text{CHOICE}(U, V, W) = (U \\land V) \\oplus (\\lnot U \\land W)\n\\] \\[\n\\text{MEDIAN}(U, V, W) = (U \\land V) \\oplus (U \\land W) \\oplus (V \\land W)\n\\]\nThere exist numerous formulations of median.\n\nThis one lifted from GitHub user B-Con"
  },
  {
    "objectID": "40_sha2.rjs.html#shiftsrotates",
    "href": "40_sha2.rjs.html#shiftsrotates",
    "title": "SHA-2",
    "section": "Shifts/Rotates",
    "text": "Shifts/Rotates\n\nCompared to bitwise, they:\n\nStill work on a 64 bit word, but\nAlso work on a value \\(n : 0 \\leq n \\leq 63\\)\nOr,\n\nassert(n in range(64))"
  },
  {
    "objectID": "40_sha2.rjs.html#simple-shiftrotate",
    "href": "40_sha2.rjs.html#simple-shiftrotate",
    "title": "SHA-2",
    "section": "Simple Shift/Rotate",
    "text": "Simple Shift/Rotate\n\nBitwise shift right &gt;&gt; / x86 shrl\n\n\\[\n\\textsf{SHR}^n(U) = \\underbrace{000 \\cdots 000}_{n \\textrm{ zeros}} u_0 u_1 \\cdots u_{62-n} u_{63-n}\n\\]\n\nThe ROTATE macro / x86 ror \\[\n\\textsf{ROTR}^n(U) = \\underbrace{u_{64-n} u_{65-n} \\cdots u_{62} u_{63}}_{n \\textrm{ bits}} u_0 u_1 \\cdots u_{62-n} u_{63-n}\n\\]"
  },
  {
    "objectID": "40_sha2.rjs.html#composites",
    "href": "40_sha2.rjs.html#composites",
    "title": "SHA-2",
    "section": "Composites",
    "text": "Composites\n\nWhile not required…\n…easier to understand SHA256 with composites: \\[\n\\begin{align*}\n\\Sigma_0(U)&= \\textsf{ROTR}^{28}(U) \\oplus \\textsf{ROTR}^{34}(U) \\oplus \\textsf{ROTR}^{39}(U) \\\\\n\\Sigma_1(U)&= \\textsf{ROTR}^{14}(U) \\oplus \\textsf{ROTR}^{18}(U) \\oplus \\textsf{ROTR}^{41}(U) \\\\\n\\sigma_0(U)&= \\textsf{ROTR}^{01}(U) \\oplus \\textsf{ROTR}^{08}(U) \\oplus \\textsf{SHR}^{07}(U) \\\\\n\\sigma_1(U)&= \\textsf{ROTR}^{19}(U) \\oplus \\textsf{ROTR}^{61}(U) \\oplus \\textsf{SHR}^{06}(U)\n\\end{align*}\n\\]\nMacros and helper functions both work well here."
  },
  {
    "objectID": "40_sha2.rjs.html#hash-computation-1",
    "href": "40_sha2.rjs.html#hash-computation-1",
    "title": "SHA-2",
    "section": "Hash Computation",
    "text": "Hash Computation\n\n4 steps for each 1024 bit chunk.\nFirst chunk, also use pre-computed \\(H\\) values.\n\nCalled, say “initial hash values”\nSuccessive chunks use previous chunk’s hash\n\nAll chunks share pre-computed \\(K\\) values.\n\nCalled, say “round contants”\n“Fractional parts of cube roots of first primes”"
  },
  {
    "objectID": "40_sha2.rjs.html#parts",
    "href": "40_sha2.rjs.html#parts",
    "title": "SHA-2",
    "section": "Parts",
    "text": "Parts\n\nPreprocess\nSet Message Schedule Array\n\n80 orking Variables\n8 word sized variables\n\nMain Loop\n\nWord level operations\n\nUpdate hash value"
  },
  {
    "objectID": "40_sha2.rjs.html#set-message-schedule-array",
    "href": "40_sha2.rjs.html#set-message-schedule-array",
    "title": "SHA-2",
    "section": "1. Set Message Schedule Array",
    "text": "1. Set Message Schedule Array\n\n\\(M^{(i)}_j\\) is the \\(j\\)-th 0-indexed 64 bit word of the \\(i\\)-th 1-indexed 1024 bit chunk of message \\(M\\)\n\nA word is 8 letters\nA chunk is short tweet (128 chars)\n\\(M\\) can be, e.g., Linux, the Iliad\n\n\n\\[\nW_j =\n\\begin{cases}\nM^{(i)}_j & 0 \\leq j \\leq 15 \\\\\n\\sigma_1(W_{j-2}) + W_{j-7} + \\sigma_0(W_{j-15}) + W_{j-16} & 16 \\leq j \\leq 79\n\\end{cases}\n\\]"
  },
  {
    "objectID": "40_sha2.rjs.html#set-working-variables",
    "href": "40_sha2.rjs.html#set-working-variables",
    "title": "SHA-2",
    "section": "2. Set Working Variables",
    "text": "2. Set Working Variables\n\nInitialize eight 64-bit words based on the prior hash. \\[\n(A, B, C, D, E, F, G, H) = (H^{(i-1)}_0, \\ldots, H^{(i-1)}_7).\n\\]"
  },
  {
    "objectID": "40_sha2.rjs.html#main-loop",
    "href": "40_sha2.rjs.html#main-loop",
    "title": "SHA-2",
    "section": "3. Main Loop",
    "text": "3. Main Loop\n\nIterate \\(j = 0\\) to \\(79\\):\n\nfor j in range(79):\n\nPrecompute two temporary values (or not) \\[\n\\begin{align}\n\\begin{split}\n& T_1  = H + \\Sigma_1(E) + \\textsf{CHOICE}(E,F,G) + K_j + W_j \\\\\n& T_2  = \\Sigma_0(A) + \\textsf{MEDIAN}(A,B,C) \\\\\n\\end{split}\n\\end{align}\n\\]\nUpdate the working variables \\[\n(A,B,C,D,E,F,G,H)  = (T_1+T_2, A, B, C, D+T_1, E, F, G)\n\\]"
  },
  {
    "objectID": "40_sha2.rjs.html#update-hash-value",
    "href": "40_sha2.rjs.html#update-hash-value",
    "title": "SHA-2",
    "section": "4. Update hash value",
    "text": "4. Update hash value\n\nConclude the work on \\(M^{(i)}\\) by finding \\(H^{(i)}\\)\n\n\\[\nH^{(i)}_j = A + H^{(i-1)}_j, \\quad j = 0, \\ldots, 7\n\\]"
  },
  {
    "objectID": "40_sha2.html",
    "href": "40_sha2.html",
    "title": "SHA-2",
    "section": "",
    "text": "Action Items:\n\nHow was Macros?\nNext homework coming out now - SHA512\n\nSplit over two weeks\nIntermediate checkpoint recommended not required.\n\nThat is, no 42 directory required.",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#announcements",
    "href": "40_sha2.html#announcements",
    "title": "SHA-2",
    "section": "",
    "text": "Action Items:\n\nHow was Macros?\nNext homework coming out now - SHA512\n\nSplit over two weeks\nIntermediate checkpoint recommended not required.\n\nThat is, no 42 directory required.",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#today",
    "href": "40_sha2.html#today",
    "title": "SHA-2",
    "section": "Today",
    "text": "Today\n\nSHA-512\n\nWhy?\nWhat?\nHow?",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#slide-credit",
    "href": "40_sha2.html#slide-credit",
    "title": "SHA-2",
    "section": "Slide Credit",
    "text": "Slide Credit\n\nSaravanan Vijayakumaran\nsarva@ee.iitb.ac.in\n\nDepartment of Electrical Engineering\n\nIndian Institute of Technology Bombay",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#hash-functions",
    "href": "40_sha2.html#hash-functions",
    "title": "SHA-2",
    "section": "Hash Functions",
    "text": "Hash Functions\n\nMethods for deterministically compress a long input string to a shorter output called a digest\n\nAlso called “signature”\nCan hash anything stored in computer\n\nThese are also called “compression” or “one-way” hash functions.",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#hash-merits",
    "href": "40_sha2.html#hash-merits",
    "title": "SHA-2",
    "section": "Hash Merits",
    "text": "Hash Merits\n\nPrimary requirement is that it should be infeasible to find collisions,\n\ni.e. no two inputs have same digest.\nIf I download Ubuntu and check the signature, I should know it’s Ubuntu.\nIf Ubuntu and a malware package have the same signature, useless.",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#non-cryptographic",
    "href": "40_sha2.html#non-cryptographic",
    "title": "SHA-2",
    "section": "Non-Cryptographic",
    "text": "Non-Cryptographic\n\nUsed to build hash tables\n\nKey-value stores with \\(\\mathcal{O}(1)\\) lookup time.\nMy hashtable/hashmap slides\n\nExample: Python hash\n\n&gt;&gt;&gt; print(\"\\n\".join([f\"{hash(a):+d}\" for a in \"ABCDE\"]))\n-8631190624005339361\n+5631042488191293803\n-2170806150006979524\n+6678617945331639637\n+8928069711880473582",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#example.tex",
    "href": "40_sha2.html#example.tex",
    "title": "SHA-2",
    "section": "Example.tex",
    "text": "Example.tex\n\nLet \\(M\\) be the size of some hash table\nTake \\(a \\in \\mathbb{N} : a &lt; M \\land \\gcd(a, M) = 1\\)\n\nThat is, two positive coprime integers.\n\nAny integer value \\(x\\) can be mapped into \\(\\mathbb{N}/(M) = \\{0,1,\\ldots, M-1\\}\\)\n\nh_a(x) = a x \\pmod{M}\n\\[\nh_a(x) = a x \\pmod{M}\n\\]",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#example.py",
    "href": "40_sha2.html#example.py",
    "title": "SHA-2",
    "section": "Example.py",
    "text": "Example.py\n\nWe can express in a programming language.\nWe note that 257 == 0x101 is prime.\n\nAnd therefore \\(\\forall M : \\gcd(257,M) = 1\\)\n\n\nimport math\nlambda x, a, M : (a * x) % M\na, M = 0x05, 1 &lt;&lt; 0x08\nassert(all((not math.gcd(a, M) == 1) or h(x, a, M) in range(M) for x in range(M)))\nprint('h'+str((0xDA7A,a,M)), '=', h(0xDA7A,a,M))\n\nWe see:\n\nh(55930, 5, 256) = 98",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#example.rs",
    "href": "40_sha2.html#example.rs",
    "title": "SHA-2",
    "section": "Example.rs",
    "text": "Example.rs\n\nWe note a high performance special case.\nLet \\(w\\) be the bit size used to store numbers\n\nLikely 32 == 0x20 for Rust i32\n\\(W\\) stands for word size\n\nTake \\(W = 2^w\\) and \\(M = 2^m\\)\n\nfn h(x:i32, a:i32, m:i32) -&gt; i32 {\n    return (a * x) &gt;&gt; (i32::BITS * 0x10 - m); \n}",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#collisions",
    "href": "40_sha2.html#collisions",
    "title": "SHA-2",
    "section": "Collisions",
    "text": "Collisions\n\nA collision occurs if \\[\n\\exists x, x' : x \\neq x' \\land h(x) = h(x')\n\\]\nThat is, this assertion fails:\n\nx_0, x_1 = 1,2\nassert(((x_0 != x_1) and (h(x_0, a, M) == h(x_1, a, M))))\n\nGoal: minimize:non-crypto::avoid:crypto collisions.\n\nAchieve this via a large codomain for \\(h\\)",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#codomain",
    "href": "40_sha2.html#codomain",
    "title": "SHA-2",
    "section": "Codomain:",
    "text": "Codomain:\n\n“In mathematics, a codomain or set of destination of a function is a set into which all of the output of the function is constrained to fall. It is the set \\(Y\\) in the notation \\(f: X → Y\\). The term range is sometimes ambiguously used to refer to either the codomain or the image of a function.”",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#test-it",
    "href": "40_sha2.html#test-it",
    "title": "SHA-2",
    "section": "Test it:",
    "text": "Test it:\nh = lambda x, a, M : (a * x) % M\na, M = 0x05, 1 &lt;&lt; 0x08\nassert(set(h(x, a, M) for x in range(M)) == set(range(M)))\n\nAs a rule we shouldn’t try to write proofs/definitions in Python, but…\nSmall \\(M = 2^{0x08} = 256\\) means our computer can handle all possibilities.",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#visualize",
    "href": "40_sha2.html#visualize",
    "title": "SHA-2",
    "section": "Visualize:",
    "text": "Visualize:",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#cryptographic",
    "href": "40_sha2.html#cryptographic",
    "title": "SHA-2",
    "section": "Cryptographic",
    "text": "Cryptographic\n\nBegin with SHA-2 (Secure Hash Algorithm 2).\n\nA family of cryptographic hash functions.\nBy the U.S. National Security Agency (NSA)\n\nPublished by the U.S. National Institute of Standards and Technology (NIST) in 2001.",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#context",
    "href": "40_sha2.html#context",
    "title": "SHA-2",
    "section": "Context",
    "text": "Context\n\nSHA-1, released in 1995, found to have significant vulnerabilities.\nGrowing concerns about the security of SHA-1 led to the development of SHA-2.\n\nSHA-3 released in 2015, not in wide use.\nFor if weakness in SHA-2 discovered.\nSHA-2 regarded as secure in 2025.",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#family",
    "href": "40_sha2.html#family",
    "title": "SHA-2",
    "section": "Family",
    "text": "Family\n\nSix hash functions release August 2001:\n\nSHA-224\nSHA-256\nSHA-384\nSHA-512\nSHA-512/224\nSHA-512/256",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#adoption-and-usage",
    "href": "40_sha2.html#adoption-and-usage",
    "title": "SHA-2",
    "section": "Adoption and Usage",
    "text": "Adoption and Usage\n\nSHA-2 has been widely adopted in\n\nDigital signatures\nVersion control systems\nOther stuff",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#sha-2-pledge",
    "href": "40_sha2.html#sha-2-pledge",
    "title": "SHA-2",
    "section": "SHA-2 Pledge",
    "text": "SHA-2 Pledge\n\nI need a verbal confirmation:\n\nEven though we will implement cryptography…\nWe assume their insecurity as we learn to:\n\nTest our code\nWrite proofs\nUse compilers\n\nWe don’t know what side channel attacks are.\n\nI say: out-of-scope.",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#sha-512-overview",
    "href": "40_sha2.html#sha-512-overview",
    "title": "SHA-2",
    "section": "SHA-512 Overview",
    "text": "SHA-512 Overview\n\nSHA-2 with a 512-bit output length\nAccepts bit strings of length up to \\(2^{128} - 1\\)\n\n~340 undecillion bits\n~42 septillion terabytes",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#two-stages",
    "href": "40_sha2.html#two-stages",
    "title": "SHA-2",
    "section": "Two Stages",
    "text": "Two Stages\n\nOutput calculation has two stages:\n\nPreprocessing\nHash Computation",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#preprocessing",
    "href": "40_sha2.html#preprocessing",
    "title": "SHA-2",
    "section": "Preprocessing",
    "text": "Preprocessing\n\nA 512-bit state variable \\(H^{(0)}\\) is initialized:\n\n\\[\n\\begin{align*}\n\\begin{split}\nH_0^{(0)} = \\texttt{0x6a09e667f3bcc908}, \\quad H_1^{(0)} = \\texttt{0xbb67ae8584caa73b},\\\\\nH_2^{(0)} = \\texttt{0x3c6ef372fe94f82b}, \\quad H_3^{(0)} = \\texttt{0xa54ff53a5f1d36f1},\\\\\nH_4^{(0)} = \\texttt{0xa54ff53a5f1d36f1}, \\quad H_5^{(0)} = \\texttt{0x9b05688c2b3e6c1f},\\\\\nH_6^{(0)} = \\texttt{0x1f83d9abfb41bd6b}, \\quad H_7^{(0)} = \\texttt{0x5be0cd19137e2179}.\n\\end{split}\n\\end{align*}\n\\]\n\n“Fractional parts of square roots of first primes”",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#input-padding",
    "href": "40_sha2.html#input-padding",
    "title": "SHA-2",
    "section": "Input Padding",
    "text": "Input Padding\n\nThe input \\(M\\) is padded to a length that is a multiple of 1024.\nLet \\(M\\) be \\(l\\)-bits long.\nFind the smallest non-negative \\(k\\) such that: \\[\nk + l + 129 \\equiv 0 \\pmod{1024}\n\\]\n\\(\\equiv\\) is pronounced “congruent” (in this context)",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#padding-content",
    "href": "40_sha2.html#padding-content",
    "title": "SHA-2",
    "section": "Padding Content",
    "text": "Padding Content\n\nAppend \\(k + 129\\) bits to \\(M\\):\n\nA single one (1), followed by\n\\(k\\) zeros (0), followed by\nThe 128-bit representation of \\(l\\). \\[\n\\begin{align*}\n1\\underbrace{000 \\cdots 000}_{k \\textrm{ zeros}}\\underbrace{l}_{\\textrm{ 128 bits}} \\\\\n\\end{align*}\n\\]",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#example.py-1",
    "href": "40_sha2.html#example.py-1",
    "title": "SHA-2",
    "section": "Example.py",
    "text": "Example.py\n\nPerhaps easier to show with strings.\n\nM = \"Hello I am a message of some length. \" * 3\nl = len(M.encode('utf-8')) * 8\nk = 1024\nl = len(M.encode('utf-8')) * 8\nk = 1024 - (l + 129) % 1024\nprint(\"l=\", l, \"k=\", k, \"pad=\", \"0x8\" + \"0\" * (k//4 - 1) + f\"{l:032x}\") ## 128 // 4 == 32\n\nWe see:\n\nl= 888 k= 7 pad= 0x800000000000000000000000000000378",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#hash-computation",
    "href": "40_sha2.html#hash-computation",
    "title": "SHA-2",
    "section": "Hash Computation",
    "text": "Hash Computation\n\nPadded input is split into \\(N\\) 1024-bit blocks:\n\nWe note this is 1-indexed, by convention. \\[\nM^{(1)}, M^{(2)}, \\ldots, M^{(N)}\n\\]\n\nWhen testing, expect to have only \\(M^{(1)}\\)\n\n1024 is a lot of bytes to e.g. type in.\nTest more once it works.\nYou know how to type in bits or get random bits!",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#hash-type",
    "href": "40_sha2.html#hash-type",
    "title": "SHA-2",
    "section": "Hash Type",
    "text": "Hash Type\n\nThe hash function has the following type: \\[\nf: M:\\{0,1\\}^{1024} \\times H:\\{0,1\\}^{512} \\rightarrow H':\\{0,1\\}^{512}\n\\]\nGiven \\(H^{(i-1)}\\), calculate \\(H^{(i)}\\) using: \\[\nH^{(i)} = f(M^{(i)}, H^{(i-1)}), \\quad 1 \\leq i \\leq N.\n\\]\n\n1-indexed",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#words",
    "href": "40_sha2.html#words",
    "title": "SHA-2",
    "section": "Words",
    "text": "Words\n\nWe specify bitwise operations over exactly 64 bit words.\nIn Rust, we’d useu64\n\nfn rotate(a:u64, b:u64) -&gt; u64 {\n    // Your code here!\n    return a;\n}",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#operations",
    "href": "40_sha2.html#operations",
    "title": "SHA-2",
    "section": "Operations",
    "text": "Operations\n\nBitwise logical operations\n\nUnary,\nBinary, and\nTernary, and\n\nShift/rotate operations\n\nSimple, and\nComposite",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#words-1",
    "href": "40_sha2.html#words-1",
    "title": "SHA-2",
    "section": "Words",
    "text": "Words\n\nBitwise logical operations accept 1, 2, or 3 words of size 64 (u64) and produce one word.\n\nTerm these words \\(U\\), \\(V\\), \\(W\\)\n\nShift/rotate operations additionally accept one natural number \\(n\\) &lt; 64.\n\nTerm this \\(n\\)",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#unary-bitwise",
    "href": "40_sha2.html#unary-bitwise",
    "title": "SHA-2",
    "section": "Unary Bitwise",
    "text": "Unary Bitwise\n\nThere is only one:\n‘bitwise complement’/‘bitwise logical not’: \\[\n\\lnot U\n\\]\nAs from the Bits lecture",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#binary-bitwise",
    "href": "40_sha2.html#binary-bitwise",
    "title": "SHA-2",
    "section": "Binary Bitwise",
    "text": "Binary Bitwise\n\nThere are four of which we use three (no NAND)\n\\(U \\land V\\), \\(U \\lor V\\), \\(U \\oplus V\\): AND, OR, XOR\nAs from the Bits lecture",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#rust-math",
    "href": "40_sha2.html#rust-math",
    "title": "SHA-2",
    "section": "Rust Math",
    "text": "Rust Math\n\nRust addition on u64 can already only be conducted modulo \\(2^{64}\\)\n\nWhat else would it be?\nFinite number of bits means finite values.\n\n\n\n\nsrc/main.rs\n\nfn main() {\n    let x : u64 = 18_000_000_000_000_000_000;\n    dbg!(x + x);\n}",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#we-see",
    "href": "40_sha2.html#we-see",
    "title": "SHA-2",
    "section": "We see",
    "text": "We see\n$ cargo r\n   Compiling bits v0.1.0 (/home/user/tmp/30)\nerror: this arithmetic operation will overflow\n --&gt; src/main.rs:4:10\n  |\n4 |     dbg!(x + x);\n  |          ^^^^^ attempt to compute `18000000000000000000_u64 + 18000000000000000000_u64`, which would overflow\n  |\n  = note: `#[deny(arithmetic_overflow)]` on by default\n\nerror: could not compile `bits` (bin \"bits\") due to 1 previous error",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#ternary-bitwise",
    "href": "40_sha2.html#ternary-bitwise",
    "title": "SHA-2",
    "section": "Ternary Bitwise",
    "text": "Ternary Bitwise\n\nCHOICE and MEDIAN, expressed logically: \\[\n\\text{CHOICE}(U, V, W) = (U \\land V) \\oplus (\\lnot U \\land W)\n\\] \\[\n\\text{MEDIAN}(U, V, W) = (U \\land V) \\oplus (U \\land W) \\oplus (V \\land W)\n\\]\nThere exist numerous formulations of median.\n\nThis one lifted from GitHub user B-Con",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#shiftsrotates",
    "href": "40_sha2.html#shiftsrotates",
    "title": "SHA-2",
    "section": "Shifts/Rotates",
    "text": "Shifts/Rotates\n\nCompared to bitwise, they:\n\nStill work on a 64 bit word, but\nAlso work on a value \\(n : 0 \\leq n \\leq 63\\)\nOr,\n\nassert(n in range(64))",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#simple-shiftrotate",
    "href": "40_sha2.html#simple-shiftrotate",
    "title": "SHA-2",
    "section": "Simple Shift/Rotate",
    "text": "Simple Shift/Rotate\n\nBitwise shift right &gt;&gt; / x86 shrl\n\n\\[\n\\textsf{SHR}^n(U) = \\underbrace{000 \\cdots 000}_{n \\textrm{ zeros}} u_0 u_1 \\cdots u_{62-n} u_{63-n}\n\\]\n\nThe ROTATE macro / x86 ror \\[\n\\textsf{ROTR}^n(U) = \\underbrace{u_{64-n} u_{65-n} \\cdots u_{62} u_{63}}_{n \\textrm{ bits}} u_0 u_1 \\cdots u_{62-n} u_{63-n}\n\\]",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#composites",
    "href": "40_sha2.html#composites",
    "title": "SHA-2",
    "section": "Composites",
    "text": "Composites\n\nWhile not required…\n…easier to understand SHA256 with composites: \\[\n\\begin{align*}\n\\Sigma_0(U)&= \\textsf{ROTR}^{28}(U) \\oplus \\textsf{ROTR}^{34}(U) \\oplus \\textsf{ROTR}^{39}(U) \\\\\n\\Sigma_1(U)&= \\textsf{ROTR}^{14}(U) \\oplus \\textsf{ROTR}^{18}(U) \\oplus \\textsf{ROTR}^{41}(U) \\\\\n\\sigma_0(U)&= \\textsf{ROTR}^{01}(U) \\oplus \\textsf{ROTR}^{08}(U) \\oplus \\textsf{SHR}^{07}(U) \\\\\n\\sigma_1(U)&= \\textsf{ROTR}^{19}(U) \\oplus \\textsf{ROTR}^{61}(U) \\oplus \\textsf{SHR}^{06}(U)\n\\end{align*}\n\\]\nMacros and helper functions both work well here.",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#hash-computation-1",
    "href": "40_sha2.html#hash-computation-1",
    "title": "SHA-2",
    "section": "Hash Computation",
    "text": "Hash Computation\n\n4 steps for each 1024 bit chunk.\nFirst chunk, also use pre-computed \\(H\\) values.\n\nCalled, say “initial hash values”\nSuccessive chunks use previous chunk’s hash\n\nAll chunks share pre-computed \\(K\\) values.\n\nCalled, say “round contants”\n“Fractional parts of cube roots of first primes”",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#parts",
    "href": "40_sha2.html#parts",
    "title": "SHA-2",
    "section": "Parts",
    "text": "Parts\n\nPreprocess\nSet Message Schedule Array\n\n80 orking Variables\n8 word sized variables\n\nMain Loop\n\nWord level operations\n\nUpdate hash value",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#set-message-schedule-array",
    "href": "40_sha2.html#set-message-schedule-array",
    "title": "SHA-2",
    "section": "1. Set Message Schedule Array",
    "text": "1. Set Message Schedule Array\n\n\\(M^{(i)}_j\\) is the \\(j\\)-th 0-indexed 64 bit word of the \\(i\\)-th 1-indexed 1024 bit chunk of message \\(M\\)\n\nA word is 8 letters\nA chunk is short tweet (128 chars)\n\\(M\\) can be, e.g., Linux, the Iliad\n\n\n\\[\nW_j =\n\\begin{cases}\nM^{(i)}_j & 0 \\leq j \\leq 15 \\\\\n\\sigma_1(W_{j-2}) + W_{j-7} + \\sigma_0(W_{j-15}) + W_{j-16} & 16 \\leq j \\leq 79\n\\end{cases}\n\\]",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#set-working-variables",
    "href": "40_sha2.html#set-working-variables",
    "title": "SHA-2",
    "section": "2. Set Working Variables",
    "text": "2. Set Working Variables\n\nInitialize eight 64-bit words based on the prior hash. \\[\n(A, B, C, D, E, F, G, H) = (H^{(i-1)}_0, \\ldots, H^{(i-1)}_7).\n\\]",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#main-loop",
    "href": "40_sha2.html#main-loop",
    "title": "SHA-2",
    "section": "3. Main Loop",
    "text": "3. Main Loop\n\nIterate \\(j = 0\\) to \\(79\\):\n\nfor j in range(79):\n\nPrecompute two temporary values (or not) \\[\n\\begin{align}\n\\begin{split}\n& T_1  = H + \\Sigma_1(E) + \\textsf{CHOICE}(E,F,G) + K_j + W_j \\\\\n& T_2  = \\Sigma_0(A) + \\textsf{MEDIAN}(A,B,C) \\\\\n\\end{split}\n\\end{align}\n\\]\nUpdate the working variables \\[\n(A,B,C,D,E,F,G,H)  = (T_1+T_2, A, B, C, D+T_1, E, F, G)\n\\]",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "40_sha2.html#update-hash-value",
    "href": "40_sha2.html#update-hash-value",
    "title": "SHA-2",
    "section": "4. Update hash value",
    "text": "4. Update hash value\n\nConclude the work on \\(M^{(i)}\\) by finding \\(H^{(i)}\\)\n\n\\[\nH^{(i)}_j = A + H^{(i-1)}_j, \\quad j = 0, \\ldots, 7\n\\]",
    "crumbs": [
      "SHA-2"
    ]
  },
  {
    "objectID": "42_sha512.html",
    "href": "42_sha512.html",
    "title": "SHA-512",
    "section": "",
    "text": "To complete this assignment, you must:\n\nCreate a 42 directory in your 271rs repository.\nThis folder must be a Cargo package.\nYou may leverage other Cargo packages, provided you have written them.\n\nMost likely “Macros”\n[Read more]\n\ncargo new 42 --name sha512 --vcs none\n\n\n\n\n\n\nI will provide a reference solution\n\nIt is the command line utility sha512sum which I expect you already have on your system.\n\n$ echo \"hello world\" &gt; hi.txt\n$ sha512sum hi.txt\ndb3974a97f2407b7cae1ae637c0030687a11913274d578492558e39c16c017de84eacdc8c62fe34ee4e12b4b1428817f09b6a2760c3f8a664ceae94d2434a593  hi.txt\n\n\n\n\n\nYou will implement SHA-512 in Rust.\n\n\n\n\n\nCopy/paste or,\n\n\n\ntester.sh\n\ncargo build --release\necho \"15 characters.\" &gt; 15char.txt\necho \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\" &gt; lipsum.txt\ncurl https://github.com/cd-public/books/raw/main/pg1342.txt -o austen.txt 2&gt;/dev/null\necho \" === Finding errors vs. reference implementation. === \"\ndiff &lt;(sha512sum 15char.txt) &lt;(./target/release/sha512 15char.txt)\ndiff &lt;(sha512sum lipsum.txt) &lt;(./target/release/sha512 lipsum.txt)\ndiff &lt;(sha512sum austen.txt) &lt;(./target/release/sha512 austen.txt)\nrm 15char.txt lipsum.txt austen.txt\necho \" === Errors printed. No errors denotes \\\"Perfect!\\\" === \"\n\n\nSave as tester.sh and run in the manner you run other scripts, such as via:\n\n/bin/bash tester.sh",
    "crumbs": [
      "SHA-512"
    ]
  },
  {
    "objectID": "42_sha512.html#requirements",
    "href": "42_sha512.html#requirements",
    "title": "SHA-512",
    "section": "",
    "text": "To complete this assignment, you must:\n\nCreate a 42 directory in your 271rs repository.\nThis folder must be a Cargo package.\nYou may leverage other Cargo packages, provided you have written them.\n\nMost likely “Macros”\n[Read more]\n\ncargo new 42 --name sha512 --vcs none",
    "crumbs": [
      "SHA-512"
    ]
  },
  {
    "objectID": "42_sha512.html#my-responsibility",
    "href": "42_sha512.html#my-responsibility",
    "title": "SHA-512",
    "section": "",
    "text": "I will provide a reference solution\n\nIt is the command line utility sha512sum which I expect you already have on your system.\n\n$ echo \"hello world\" &gt; hi.txt\n$ sha512sum hi.txt\ndb3974a97f2407b7cae1ae637c0030687a11913274d578492558e39c16c017de84eacdc8c62fe34ee4e12b4b1428817f09b6a2760c3f8a664ceae94d2434a593  hi.txt",
    "crumbs": [
      "SHA-512"
    ]
  },
  {
    "objectID": "42_sha512.html#your-responsibility",
    "href": "42_sha512.html#your-responsibility",
    "title": "SHA-512",
    "section": "",
    "text": "You will implement SHA-512 in Rust.",
    "crumbs": [
      "SHA-512"
    ]
  },
  {
    "objectID": "42_sha512.html#test",
    "href": "42_sha512.html#test",
    "title": "SHA-512",
    "section": "",
    "text": "Copy/paste or,\n\n\n\ntester.sh\n\ncargo build --release\necho \"15 characters.\" &gt; 15char.txt\necho \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\" &gt; lipsum.txt\ncurl https://github.com/cd-public/books/raw/main/pg1342.txt -o austen.txt 2&gt;/dev/null\necho \" === Finding errors vs. reference implementation. === \"\ndiff &lt;(sha512sum 15char.txt) &lt;(./target/release/sha512 15char.txt)\ndiff &lt;(sha512sum lipsum.txt) &lt;(./target/release/sha512 lipsum.txt)\ndiff &lt;(sha512sum austen.txt) &lt;(./target/release/sha512 austen.txt)\nrm 15char.txt lipsum.txt austen.txt\necho \" === Errors printed. No errors denotes \\\"Perfect!\\\" === \"\n\n\nSave as tester.sh and run in the manner you run other scripts, such as via:\n\n/bin/bash tester.sh",
    "crumbs": [
      "SHA-512"
    ]
  },
  {
    "objectID": "51_f16.html",
    "href": "51_f16.html",
    "title": "f16",
    "section": "",
    "text": "Enrichment assignment\n\nImplementation of half precision IEEE 754 floating point values\nUse bitwise operations\nUse numeric operations\nCombine them.",
    "crumbs": [
      "f16"
    ]
  },
  {
    "objectID": "51_f16.html#announcements",
    "href": "51_f16.html#announcements",
    "title": "f16",
    "section": "",
    "text": "Enrichment assignment\n\nImplementation of half precision IEEE 754 floating point values\nUse bitwise operations\nUse numeric operations\nCombine them.",
    "crumbs": [
      "f16"
    ]
  },
  {
    "objectID": "51_f16.html#homework",
    "href": "51_f16.html#homework",
    "title": "f16",
    "section": "Homework",
    "text": "Homework\n\nSHA beckons\nDue Friday, 10 Oct. at 1440 ET.\n\nDo not work on this instead of that, after lab section today, until you are done with that.",
    "crumbs": [
      "f16"
    ]
  },
  {
    "objectID": "51_f16.html#citation",
    "href": "51_f16.html#citation",
    "title": "f16",
    "section": "Citation",
    "text": "Citation\n\nBasically I try to take Python.Numpy.float16 as the reference implementation, but break from Python on float16 the same places f32 breaks from numpy.float32.",
    "crumbs": [
      "f16"
    ]
  },
  {
    "objectID": "51_f16.html#today",
    "href": "51_f16.html#today",
    "title": "f16",
    "section": "Today",
    "text": "Today\n\nStruct\nInput/Output\nAddition/Subtraction\nMultiplication/Division\nOptional: Special cases",
    "crumbs": [
      "f16"
    ]
  },
  {
    "objectID": "51_f16.html#aside",
    "href": "51_f16.html#aside",
    "title": "f16",
    "section": "Aside",
    "text": "Aside\n\nFor my money, f16::f16 looks terrible.\n\n\n\nsrc/main.rs\n\nuse f16::*;\n\nfn main() {\n    let x : f16;\n}",
    "crumbs": [
      "f16"
    ]
  },
  {
    "objectID": "51_f16.html#aside-1",
    "href": "51_f16.html#aside-1",
    "title": "f16",
    "section": "Aside",
    "text": "Aside\n\nRust will admonish you for using f16 instead of F16.\n\nwarning: type `f16` should have an upper camel case name\n --&gt; src/lib.rs:1:12\n  |\n1 | pub struct f16 {\n  |            ^^^ help: convert the identifier to upper camel case (notice the capitalization): `F16`\n  |\n  = note: `#[warn(non_camel_case_types)]` on by default\n\nEveryone is a critic!",
    "crumbs": [
      "f16"
    ]
  },
  {
    "objectID": "51_f16.html#aside-2",
    "href": "51_f16.html#aside-2",
    "title": "f16",
    "section": "Aside",
    "text": "Aside\n\nWe aren’t really all the way to teaching structs yet, but feel free to play around with them.\nIn particular, you want to have 3 fields, sign, exp, and mantissa, rather than a single bits field.\nThe internal implementation is up to you with one exception:\n\nOnly use integer operations to emulate floating point operations.\n(That’s what we’re trying to learn how to do here).\n\nYou can read more on struct here: Rust Book 05.01",
    "crumbs": [
      "f16"
    ]
  },
  {
    "objectID": "51_f16.html#aside-3",
    "href": "51_f16.html#aside-3",
    "title": "f16",
    "section": "Aside",
    "text": "Aside\n\nIt is admittedly odd to print values in decimal multpiplied by a power of 2.\nIf you which to print in binary, simply prefix with 0b\n\n0b1.1000000000*10^11\n[src/main.rs:4:5] println_f16(i32_to_f16(12)) = ()\n0b1.1110110000*10^110\n[src/main.rs:5:5] println_f16(i32_to_f16(123)) = ()\n0b1.11010010*10^1010\n[src/main.rs:6:5] println_f16(i32_to_f16(1234)) = ()\n\nI didn’t find this easier (I just yeeted the output into Ye Olde Python III) but you may.",
    "crumbs": [
      "f16"
    ]
  },
  {
    "objectID": "51_f16.html#aside-4",
    "href": "51_f16.html#aside-4",
    "title": "f16",
    "section": "Aside",
    "text": "Aside\n\nSpeaking of yeeting, if you prefer this formulation:\n\n\u0016\u0016    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/bits`\n1.512*2**3\n1.944*2**6\n1.210*2**10\n\nI won’t say anything if you don’t.\n\n&gt;&gt;&gt; 1.512*2**3\n12.096\n&gt;&gt;&gt; 1.944*2**6\n124.416\n&gt;&gt;&gt; 1.210*2**10\n1239.04",
    "crumbs": [
      "f16"
    ]
  },
  {
    "objectID": "51_f16.html#implement-infinities",
    "href": "51_f16.html#implement-infinities",
    "title": "f16",
    "section": "Implement infinities",
    "text": "Implement infinities\n\nEnsure when any value is divided by zero, or any arithmetic results overflows, that the value is set to infinity.\nEnsure infinity is printed consistently, perhaps as inf or as unicode ∞.\nEnsure positive and negative infinity.\nEnsure infinity matches IEEE 754 requirements:\n\nSign: Either.\nExponent: All 1s.\nMantissa: All 0s.",
    "crumbs": [
      "f16"
    ]
  },
  {
    "objectID": "51_f16.html#implement-nan",
    "href": "51_f16.html#implement-nan",
    "title": "f16",
    "section": "Implement NaN",
    "text": "Implement NaN\n\nEnsure when infinities of differing signs are summed (whether via add or sub), NaN is returned.\nEnsure when zero is divided by zero or inf by inf returns NaN or nan (up to you).\nEnsure any operations over NaN and any other value return NaN.\nEnsure NaN is printed consistently.\nEnsure NaN matches IEEE 754 requirements:\n\nSign: Either.\nExponent: All 1s.\nMantissa: Anyting but all 0s.",
    "crumbs": [
      "f16"
    ]
  },
  {
    "objectID": "71_ix_io.html",
    "href": "71_ix_io.html",
    "title": "Numerical I/O",
    "section": "",
    "text": "Scaffolding assignment for ix\n\nBig numbers are hard to type, think of, reason about, etc.\nHard to check your work.",
    "crumbs": [
      "Numerical I/O"
    ]
  },
  {
    "objectID": "71_ix_io.html#announcements",
    "href": "71_ix_io.html#announcements",
    "title": "Numerical I/O",
    "section": "",
    "text": "Scaffolding assignment for ix\n\nBig numbers are hard to type, think of, reason about, etc.\nHard to check your work.",
    "crumbs": [
      "Numerical I/O"
    ]
  },
  {
    "objectID": "71_ix_io.html#homework",
    "href": "71_ix_io.html#homework",
    "title": "Numerical I/O",
    "section": "Homework",
    "text": "Homework\n\nix beckons\nDue Friday, 24 Oct. at 1440 ET.\n\nYou will probably need to finish this to do that.\n\nix vs. eg. i32, i64, can store infinite values, and your job is to make it.",
    "crumbs": [
      "Numerical I/O"
    ]
  },
  {
    "objectID": "71_ix_io.html#today",
    "href": "71_ix_io.html#today",
    "title": "Numerical I/O",
    "section": "Today",
    "text": "Today\n\nStruct\nInput/Output\nAddition/Subtraction\nMultiplication/Division\nOptional: Special cases",
    "crumbs": [
      "Numerical I/O"
    ]
  },
  {
    "objectID": "71_ix_io.html#test-it",
    "href": "71_ix_io.html#test-it",
    "title": "Numerical I/O",
    "section": "Test it",
    "text": "Test it\n\nYou can test the same way we tested f16:\n\n\n\nsrc/main.rs\n\nfn main() {\n    let x : f16::f16;\n}\n\n\nThe first f16 is the crate name, the second is the type name.",
    "crumbs": [
      "Numerical I/O"
    ]
  },
  {
    "objectID": "71_ix_io.html#aside",
    "href": "71_ix_io.html#aside",
    "title": "Numerical I/O",
    "section": "Aside",
    "text": "Aside\n\nFor my money, f16::f16 looks terrible.\n\n\n\nsrc/main.rs\n\nuse f16::*;\n\nfn main() {\n    let x : f16;\n}",
    "crumbs": [
      "Numerical I/O"
    ]
  },
  {
    "objectID": "71_ix_io.html#aside-1",
    "href": "71_ix_io.html#aside-1",
    "title": "Numerical I/O",
    "section": "Aside",
    "text": "Aside\n\nRust admonished you for using f16 instead of F16.\n\nwarning: type `f16` should have an upper camel case name\n --&gt; src/lib.rs:1:12\n  |\n1 | pub struct f16 {\n  |            ^^^ help: convert the identifier to upper camel case (notice the capitalization): `F16`\n  |\n  = note: `#[warn(non_camel_case_types)]` on by default\n\nEveryone is a critic!\n#![allow(non_camel_case_types)]",
    "crumbs": [
      "Numerical I/O"
    ]
  },
  {
    "objectID": "71_ix_io.html#aside-2",
    "href": "71_ix_io.html#aside-2",
    "title": "Numerical I/O",
    "section": "Aside",
    "text": "Aside\n\nYou can read more on struct here: Rust Book 05.01",
    "crumbs": [
      "Numerical I/O"
    ]
  },
  {
    "objectID": "71_ix_io.html#srcmain.rs",
    "href": "71_ix_io.html#srcmain.rs",
    "title": "Numerical I/O",
    "section": "src/main.rs",
    "text": "src/main.rs\n\nMain:\n\nUses the ix implementation from src/lib.rs\nReads command line arguments generated by tester.py\nConverts two command line strings representing numerical hex vlaues into ix instances.\nCaptures the final command line argument to determine which operation to perform.\nCalls the appropriate ix arithmetic function and captures its return value.\n\nI call these &lt;op&gt;_ix for op in add, sub, mul, div, rem\n\nPrints to stdout the returned ix as a hex string.\n\nWhile intended to be used by tester.py, it can also be used manually!\n\n$ cargo run 0x10 0x20 ADD\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/bignum 0x10 0x20 ADD`\n0000000000000030\n\nI do not add a newline after this value.\nYou can, and probably should want to, make your own src/main.rs that does these things, but you are not required to do so.\nI am providing mine as a “spoiler marked” HTML &lt;details&gt; block.\n\n\nMy src/main.rs\n\n\n\nsrc/main.rs\n\nuse bignum::*;\n\nfn main() {\n    let args: Vec&lt;String&gt; = std::env::args().collect();\n    let a = h2i_ix(&args[1]);\n    let b = h2i_ix(&args[2]);\n    match args[3].as_str() {\n        \"ADD\" =&gt; see_ix(&add_ix(&a, &b)),\n        \"SUB\" =&gt; see_ix(&sub_ix(&a, &b)),\n        \"MUL\" =&gt; todo!(),\n        \"DIV\" =&gt; todo!(),\n        \"REM\" =&gt; todo!(),\n        &_    =&gt; println!(\"Operator not recognized: choose from ADD, SUB, MUL, DIV, REM\"),\n    }\n}",
    "crumbs": [
      "Numerical I/O"
    ]
  },
  {
    "objectID": "71_ix_io.html#tester.py",
    "href": "71_ix_io.html#tester.py",
    "title": "Numerical I/O",
    "section": "tester.py",
    "text": "tester.py\n\nTester:\n\nUsing Python’s built-in integers, generates two large random numbers, I generated mine to be between 500 and 512 bits.\nConvert them to hex strings.\nFor each of the debatebly four or five operations, the tester:\n\nUses subprocess to dispatch cargo to run with three command line arguments: the two hex strings and the operation (in all caps).\nCaptures the output of the process.\nComputes the same operation using Python arithmetic operations.\nUses naive string comparison to compare the two values.\n\nOptionally raises a debug message in the event of a difference.\n\n\n\nTo support tester usage, I will provide:\n\nThe tester.py code\nAn example run on a partial ix implementation, with only addition and subtraction completed.\n\nI am spoiler marking both, in case you want to make your own.\n\n\nMy tester.py\n\n\n\ntester.py\n\nDEBUG = 0\nCMD = \"cargo run --\"\n\nimport subprocess, os, random\nfrom operator import add, sub, mul, floordiv as quo, mod as rem\n\nbigone, bigtwo = random.randint(2 ** 500, 2 ** 512), random.randint(2 ** 500, 2 ** 512)\nhexone, hextwo = hex(bigone), hex(bigtwo)\nDEBUG and print(\"\\nhexone =\\n\", hexone, \"\\nhextwo = \\n\", hextwo)\n\nfrom operator import add, sub, mul, floordiv as quo, mod as rem\nops = {'ADD':add,'SUB':sub,'MUL':mul,'QUO':quo,'REM':rem}\nfor op in ops:\n    result = int(subprocess.check_output([\"cargo\", \"run\", hexone, hextwo, op]),16)\n    answer = ops[op](bigone,bigtwo)\n    if result != answer:\n        print(\"Operator\", op, \"failed.\")\n        DEBUG and print(\"Expected:\")\n        DEBUG and print(hex(answer))\n        DEBUG and print(\"Received:\")\n        DEBUG and print(hex(result))\n        exit()\n    else:\n        print(op, \"passes.\")\n\n\n\n\nExample output\n\n\nNote the panic caused by Rust todo!() and the separate, Python subprocess.CalledProcessError after the failure propagates back to the calling script.\n\n$ python3 tester.py\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/bignum 0x2c2e4c34f428560aedbee82a9a7ca5a7071ef9d9b3b23834ef1ce63be90e052e94d1411de3c1191fdb1ebfd39fde41bbfc8b95e3faeae64a0fe21d50b9ce53d8 0x58010ed08d2415a81a17e369a3e00443d922d0219dd66c1b74473511140e1f4f24450840e9e1a7c4bd4cac368d30a4ba5aa075fb65ec92a714c7f73b42122bb0 ADD`\nADD passes.\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/bignum 0x2c2e4c34f428560aedbee82a9a7ca5a7071ef9d9b3b23834ef1ce63be90e052e94d1411de3c1191fdb1ebfd39fde41bbfc8b95e3faeae64a0fe21d50b9ce53d8 0x58010ed08d2415a81a17e369a3e00443d922d0219dd66c1b74473511140e1f4f24450840e9e1a7c4bd4cac368d30a4ba5aa075fb65ec92a714c7f73b42122bb0 SUB`\nSUB passes.\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/bignum 0x2c2e4c34f428560aedbee82a9a7ca5a7071ef9d9b3b23834ef1ce63be90e052e94d1411de3c1191fdb1ebfd39fde41bbfc8b95e3faeae64a0fe21d50b9ce53d8 0x58010ed08d2415a81a17e369a3e00443d922d0219dd66c1b74473511140e1f4f24450840e9e1a7c4bd4cac368d30a4ba5aa075fb65ec92a714c7f73b42122bb0 MUL`\n\nthread 'main' panicked at src/main.rs:10:18:\nnot yet implemented\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nTraceback (most recent call last):\n  File \"/home/user/tmp/ix/tester.py\", line 19, in &lt;module&gt;\n    result = int(subprocess.check_output([\"cargo\", \"run\", hexone, hextwo, op]),16)\n  File \"/usr/lib/python3.10/subprocess.py\", line 421, in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n  File \"/usr/lib/python3.10/subprocess.py\", line 526, in run\n    raise CalledProcessError(retcode, process.args,\nsubprocess.CalledProcessError: Command '['cargo', 'run', '0x2c2e4c34f428560aedbee82a9a7ca5a7071ef9d9b3b23834ef1ce63be90e052e94d1411de3c1191fdb1ebfd39fde41bbfc8b95e3faeae64a0fe21d50b9ce53d8', '0x58010ed08d2415a81a17e369a3e00443d922d0219dd66c1b74473511140e1f4f24450840e9e1a7c4bd4cac368d30a4ba5aa075fb65ec92a714c7f73b42122bb0', 'MUL']' returned non-zero exit status 101.",
    "crumbs": [
      "Numerical I/O"
    ]
  },
  {
    "objectID": "80_eddsa.rjs.html#today",
    "href": "80_eddsa.rjs.html#today",
    "title": "EdDSA",
    "section": "Today",
    "text": "Today\n\nPrivate Key Cryptography\nDigital Signatures\nEdwards-curve Digital Signature Algorithm (EdDSA)\n\nSome math where we need it\nAn aside on side channels if we get bored"
  },
  {
    "objectID": "80_eddsa.rjs.html#motivating-example",
    "href": "80_eddsa.rjs.html#motivating-example",
    "title": "EdDSA",
    "section": "Motivating Example",
    "text": "Motivating Example\n\nCanonical Example is Snowden x Greenwald 2013\n\nSnowden wished to communicate a secret to Greenwald\nSnowden and Greenwald had never met\nSnowden could not transmit the secret in plain text\n\nVs enigma, no prior agreement on how to encrypt/decrypt"
  },
  {
    "objectID": "80_eddsa.rjs.html#reads-cryptobook",
    "href": "80_eddsa.rjs.html#reads-cryptobook",
    "title": "EdDSA",
    "section": "Reads Cryptobook",
    "text": "Reads Cryptobook\n\nA key exchange protocol \\(P\\) is a pair of probabilistic machines \\((A, B)\\) that take turns in sending messages to each other. At the end of the protocol, when both machines terminate, they both obtain the same value \\(k\\). A protocol transcript \\(T_P\\) is the sequence of messages exchanged between the parties in one exe- cution of the protocol."
  },
  {
    "objectID": "80_eddsa.rjs.html#reads-cryptobook-1",
    "href": "80_eddsa.rjs.html#reads-cryptobook-1",
    "title": "EdDSA",
    "section": "Reads Cryptobook",
    "text": "Reads Cryptobook\n\nSince \\(A\\) and \\(B\\) are probabilistic machines, we obtain a different transcript every time we run the protocol. Formally, the transcript \\(T_P\\) of protocol \\(P\\) is a random variable, which is a function of the random bits generated by \\(A\\) and \\(B\\). The eavesdropping adversary \\(E\\) sees the entire transcript \\(T_P\\) and its goal is to figure out the secret \\(k\\)."
  },
  {
    "objectID": "80_eddsa.rjs.html#set-the-stage",
    "href": "80_eddsa.rjs.html#set-the-stage",
    "title": "EdDSA",
    "section": "Set the Stage",
    "text": "Set the Stage\n\nSnowden has e.g. files on a harddrive\n\nThe files contain keywords that cannot be safely transmitted over US-based internet connections.\nSnowden is based in Hawai’i with no access to non-US-based connections.\nSnowden needs to encrypt the files in such as a way that only a trusted destination may read them."
  },
  {
    "objectID": "80_eddsa.rjs.html#first-contact",
    "href": "80_eddsa.rjs.html#first-contact",
    "title": "EdDSA",
    "section": "First Contact",
    "text": "First Contact\n\nSnowden contacts Greenwald to agree to use a secure messaging protocol\n\nUse of such protocols is relatively non-suspicious, used for banking etc.\nIt was enough to raise alarms for Snowden, but not quickly enough to stop him.\n\nGreenwald agrees to a recommended protocol"
  },
  {
    "objectID": "80_eddsa.rjs.html#initialization",
    "href": "80_eddsa.rjs.html#initialization",
    "title": "EdDSA",
    "section": "Initialization",
    "text": "Initialization\n\nGreenwald generates a combination of numerical values on a local computing device.\n\nOne of these is the public-key, which Greenwalk may circulate broadly.\n\nWe see an example of such a technology on the next slide."
  },
  {
    "objectID": "80_eddsa.rjs.html#securedrop",
    "href": "80_eddsa.rjs.html#securedrop",
    "title": "EdDSA",
    "section": "SecureDrop",
    "text": "SecureDrop\n\nEmbed doesn’t work for what are likely obvious reasons:\nLink"
  },
  {
    "objectID": "80_eddsa.rjs.html#safety-note",
    "href": "80_eddsa.rjs.html#safety-note",
    "title": "EdDSA",
    "section": "Safety Note",
    "text": "Safety Note\n\nProbably dropping to The Intercept is not recommended.\nReality Winner is currently incarcerated due to a leak fumbled by The Intercept\nRead more"
  },
  {
    "objectID": "80_eddsa.rjs.html#step-2",
    "href": "80_eddsa.rjs.html#step-2",
    "title": "EdDSA",
    "section": "Step 2",
    "text": "Step 2\n\nGreenwald & co. hold in reserve a private-key\nThey defend it like lives depend on it, as they did for Winner and Snowden.\nSo: not stored in plaintext on a hard-drive\nSo: if on a hard-drive, hard-drive is in a secure site from e.g. federal law enforcement."
  },
  {
    "objectID": "80_eddsa.rjs.html#step-3",
    "href": "80_eddsa.rjs.html#step-3",
    "title": "EdDSA",
    "section": "Step 3",
    "text": "Step 3\n\nSnowden, and hopefully enough others to avoid suspicion, use the public key to encrypt their payload.\nIn addition to e.g. top secret documents, concerned community members could send in less-secret materials such as analysis of policing data with which they would rather not be affiliated.\nJournalists sift through the inputs."
  },
  {
    "objectID": "80_eddsa.rjs.html#its-that-simple",
    "href": "80_eddsa.rjs.html#its-that-simple",
    "title": "EdDSA",
    "section": "It’s that simple",
    "text": "It’s that simple\n\nOkay but like how do we do that:\n\nAny eaves-dropping adversary can see the public key.\nOne-to-one communication of a key is already dangerous\nAll this encryption/decryption needs to be managable by e.g. non-computing specialized journalists."
  },
  {
    "objectID": "80_eddsa.rjs.html#motivating-example-1",
    "href": "80_eddsa.rjs.html#motivating-example-1",
    "title": "EdDSA",
    "section": "Motivating Example",
    "text": "Motivating Example\n\nI have a Bitcoin.\nI can only spend it if other people can:\n\nSee it, to tell I have it\nNot spend it, because it’s mine\n\nI use a digital signature."
  },
  {
    "objectID": "80_eddsa.rjs.html#a-transaction",
    "href": "80_eddsa.rjs.html#a-transaction",
    "title": "EdDSA",
    "section": "A transaction",
    "text": "A transaction\n\nEach owner transfers the coin to the next by digitally signing a hash of the previous transaction and the public key of the next owner and adding these to the end of the coin\n\n\nI own a coin.\nI have a public keys.\nI transfer that a coin to new owner to buy the Grundrisse translated to Quenya\nThis happens over the open internet."
  },
  {
    "objectID": "80_eddsa.rjs.html#signage",
    "href": "80_eddsa.rjs.html#signage",
    "title": "EdDSA",
    "section": "Signage",
    "text": "Signage\n\nTo verify it is (1) my coin and (2) me transferring it, I:\n\nWrite down the transactions details.\nSHA256 hash the message\nEncrypt with my private key\nRelease the hash and cipher (encrypted) text"
  },
  {
    "objectID": "80_eddsa.rjs.html#verify",
    "href": "80_eddsa.rjs.html#verify",
    "title": "EdDSA",
    "section": "Verify",
    "text": "Verify\n\nThe general public:\n\nDecrypts the ciphertext with my public key\nSHA256 hashes the decrypted text\nIf the hash matches our released hash, then it had to be us and the transaction is valid."
  },
  {
    "objectID": "80_eddsa.rjs.html#section",
    "href": "80_eddsa.rjs.html#section",
    "title": "EdDSA",
    "section": "",
    "text": "RSA_Encryption\n\n\ncluster_encryption\n\nEncryption\n\n\ncluster_decryption\n\nDecryption\n\n\n\nmessage\n\nMessage (M)\n\n\n\nencrypt\n\nCiphertext (C)\n\n\n\nmessage-&gt;encrypt\n\n\n\n\n\ninter\n\nEncrypted Transaction\n\n\n\nencrypt-&gt;inter\n\n\n\n\n\npublic_key_ref\n\n\n\nPrivate Key: (n, d)\n\n\n\npublic_key_ref-&gt;encrypt\n\n\n\n\n\nciphertext\n\nCiphertext (C)\n\n\n\ndecrypt\n\nMessage (M)\n\n\n\nciphertext-&gt;decrypt\n\n\n\n\n\noutput\n\nDecrypted Transaction\n\n\n\ndecrypt-&gt;output\n\n\n\n\n\nprivate_key_ref\n\n\n\nPublic Key: (n, e)\n\n\n\nprivate_key_ref-&gt;decrypt\n\n\n\n\n\ninput\n\nUnencrypted Transaction\n\n\n\ninput-&gt;message\n\n\n\n\n\ninter-&gt;ciphertext"
  },
  {
    "objectID": "80_eddsa.rjs.html#eddsa",
    "href": "80_eddsa.rjs.html#eddsa",
    "title": "EdDSA",
    "section": "EdDSA",
    "text": "EdDSA\n\nIn public-key cryptography, Edwards-curve Digital Signature Algorithm (EdDSA) is a digital signature scheme using a variant of Schnorr signature based on twisted Edwards curves.\n\n\nAh, that really clarifies things."
  },
  {
    "objectID": "80_eddsa.rjs.html#iterative-definition",
    "href": "80_eddsa.rjs.html#iterative-definition",
    "title": "EdDSA",
    "section": "Iterative Definition",
    "text": "Iterative Definition\nAn EdDSA signature scheme is a choice."
  },
  {
    "objectID": "80_eddsa.rjs.html#iterative-definition-1",
    "href": "80_eddsa.rjs.html#iterative-definition-1",
    "title": "EdDSA",
    "section": "Iterative Definition",
    "text": "Iterative Definition\nAn EdDSA signature scheme is a choice over:\n\nA finite field \\(\\mathbb{F}_p\\) where we take \\(p\\) to be an odd prime."
  },
  {
    "objectID": "80_eddsa.rjs.html#galois-field",
    "href": "80_eddsa.rjs.html#galois-field",
    "title": "EdDSA",
    "section": "Galois field",
    "text": "Galois field\n\nIn mathematics, a finite field or Galois field (so-named in honor of Évariste Galois) is a field that has a finite number of elements. As with any field, a finite field is a set on which the operations of multiplication, addition, subtraction and division are defined and satisfy certain basic rules. The most common examples of finite fields are the integers mod p \\(p\\) when \\(p\\) is a prime number."
  },
  {
    "objectID": "80_eddsa.rjs.html#recall",
    "href": "80_eddsa.rjs.html#recall",
    "title": "EdDSA",
    "section": "Recall",
    "text": "Recall\n\nTheu\\(n\\)s and i\\(n\\)’s in Rust are rings\n\nThey have addition and multiplication\n\nThey aren’t fields - zero is divisible\n\nSpoiler alert, but \\(2^{\\frac{n}{2}} \\times 2^{\\frac{n}{2}} \\equiv 0 \\pmod{2^n}\\)\n\nSo: not \\(\\mathbb{Z}/2^8\\mathbb{Z}\\)\n\nWhat about \\(\\mathbb{Z}/(2^8+1)\\mathbb{Z}\\)?\n\nThat’s \\(\\mathbb{F}_p\\) where \\(p = 2^8+1\\)"
  },
  {
    "objectID": "80_eddsa.rjs.html#iterative-definition-2",
    "href": "80_eddsa.rjs.html#iterative-definition-2",
    "title": "EdDSA",
    "section": "Iterative Definition",
    "text": "Iterative Definition\nAn EdDSA signature scheme is a choice over:\n\nA finite field \\(\\mathbb{F}_p\\).\nAn elliptic curve \\(E\\) over \\(\\mathbb{F}_p\\)\n\nWe simply as:\n\nA plane curve over\nA finite field\nof form \\(a x^2+y^2= 1+dx^2y^2\\)"
  },
  {
    "objectID": "80_eddsa.rjs.html#plane-curve",
    "href": "80_eddsa.rjs.html#plane-curve",
    "title": "EdDSA",
    "section": "Plane Curve",
    "text": "Plane Curve\n\nIn mathematics, a plane curve is a curve in a plane that may be a Euclidean plane, an affine plane or a projective plane. The most frequently studied cases are smooth plane curves (including piecewise smooth plane curves), and algebraic plane curves. Plane curves also include the Jordan curves (curves that enclose a region of the plane but need not be smooth) and the graphs of continuous functions."
  },
  {
    "objectID": "80_eddsa.rjs.html#graphs-of-continous-functions",
    "href": "80_eddsa.rjs.html#graphs-of-continous-functions",
    "title": "EdDSA",
    "section": "Graphs of Continous Functions",
    "text": "Graphs of Continous Functions\n\nOften express as \\(f(x,y) = 0\\)\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport sympy\nfrom sympy.abc import x, y\n\nr = 1\n\ncurve = sympy.Eq(0,x**2 + y**2 - r)\nfor_y = sympy.solve(curve, y)\nf = sympy.lambdify(x, for_y)\n\nx = np.linspace(-r, r, 1000)\n\n_ = [plt.plot(x, y) for y in f(x)]"
  },
  {
    "objectID": "80_eddsa.rjs.html#iterative-definition-3",
    "href": "80_eddsa.rjs.html#iterative-definition-3",
    "title": "EdDSA",
    "section": "Iterative Definition",
    "text": "Iterative Definition\nAn EdDSA signature scheme is a choice over:\n\nA finite field \\(\\mathbb{F}_p\\).\nAn elliptic curve \\(E\\) over \\(\\mathbb{F}_p\\)\n\nWhose group \\(E(\\mathbb{F}_p)\\) of \\(\\mathbb{F}_p\\)-rational points has order \\(|E(\\mathbb{F}_p)| = 2^C \\ell\\) where \\(\\ell\\) is a large primce and \\(2^c\\) is the cofactor\n\nTake a 400-level math class\nBasically this is a measure of the area within the ellipse."
  },
  {
    "objectID": "80_eddsa.rjs.html#iterative-definition-4",
    "href": "80_eddsa.rjs.html#iterative-definition-4",
    "title": "EdDSA",
    "section": "Iterative Definition",
    "text": "Iterative Definition\nAn EdDSA signature scheme is a choice over:\n\nA finite field \\(\\mathbb{F}_p\\).\nAn elliptic curve \\(E\\) over \\(\\mathbb{F}_p\\)\nA base point \\(B \\in E(\\mathbb{F}_p)\\)\n\nThis is the only parameter set when generating your own keys.\nEverything else is pre-computed.\nBasically a point on the curve."
  },
  {
    "objectID": "80_eddsa.rjs.html#iterative-definition-5",
    "href": "80_eddsa.rjs.html#iterative-definition-5",
    "title": "EdDSA",
    "section": "Iterative Definition",
    "text": "Iterative Definition\nAn EdDSA signature scheme is a choice over:\n\nA finite field \\(\\mathbb{F}_p\\).\nAn elliptic curve \\(E\\) over \\(\\mathbb{F}_p\\)\nA base point \\(B \\in E(\\mathbb{F}_p)\\)\nA hash function \\(H\\) with \\(2b\\)-bit outputs, where \\(2^{b-1} &gt; q\\)\n\nThis just allows machine representation."
  },
  {
    "objectID": "80_eddsa.rjs.html#public-key",
    "href": "80_eddsa.rjs.html#public-key",
    "title": "EdDSA",
    "section": "Public key",
    "text": "Public key\n\n\n\n\n\n\nPublic key\n\n\nAn EdDSA public key is a curve point \\(A \\in E(\\mathbb{F}_p)\\) encoded in \\(b\\) bits"
  },
  {
    "objectID": "80_eddsa.rjs.html#signature-verification",
    "href": "80_eddsa.rjs.html#signature-verification",
    "title": "EdDSA",
    "section": "Signature verification",
    "text": "Signature verification\n\n\n\n\n\n\nSignature verification\n\n\nAn EdDSA signature on a message \\(M\\) by public \\(A\\) is the (ordered) pair \\((R,S)\\) encoded in \\(2b\\) bits, where \\(R\\) is a curve point \\(R \\in E(\\mathbb{F}_p)\\) and \\(S\\) is non-negative integer less than the size of the large prime \\(\\ell\\). \\((R,S)\\) must satisfy the following equation (where \\(\\parallel\\) is string concatenation).\n\\[\n2^c S B = 2^c R + 2^c H(R \\parallel A \\parallel M) A\n\\]"
  },
  {
    "objectID": "80_eddsa.rjs.html#private-key",
    "href": "80_eddsa.rjs.html#private-key",
    "title": "EdDSA",
    "section": "Private key",
    "text": "Private key\n\n\n\n\n\n\nPrivate key\n\n\nAn EdDSA private key is a \\(b\\)-bit string \\(k\\) which should be chosen uniformly at random. The corresponding public key is \\(A = s B\\), where \\(s = H_{0,\\dots,b - 1}(k)\\) is the least significant \\(b\\) bits of \\(H(k)\\) interpreted as an integer."
  },
  {
    "objectID": "80_eddsa.rjs.html#signing",
    "href": "80_eddsa.rjs.html#signing",
    "title": "EdDSA",
    "section": "Signing",
    "text": "Signing\n\n\n\n\n\n\nSigning\n\n\nThe signature on a message \\(M\\) is deterministically computed as \\((R, S)\\) where \\(R = r B\\) for \\(r = H(H_{b,\\dots,2b - 1}(k) \\parallel M)\\), and \\[\nS \\equiv r + H(R \\parallel A \\parallel M) s \\pmod \\ell\n\\] This satisfies the verification equation \\[\n\\begin{align}\n2^c S B &= 2^c (r + H(R \\parallel A \\parallel M) s) B \\\\\n        &= 2^c r B + 2^c H(R \\parallel A \\parallel M) s B \\\\\n        &= 2^c R + 2^c H(R \\parallel A \\parallel M) A.\n\\end{align}\n\\]"
  },
  {
    "objectID": "80_eddsa.rjs.html#ed25519",
    "href": "80_eddsa.rjs.html#ed25519",
    "title": "EdDSA",
    "section": "Ed25519",
    "text": "Ed25519\n\nEdDSA with:\n\nSHA-512\nCurve25519"
  },
  {
    "objectID": "80_eddsa.rjs.html#curve25519",
    "href": "80_eddsa.rjs.html#curve25519",
    "title": "EdDSA",
    "section": "Curve25519",
    "text": "Curve25519\n\nAn unusually fast curve to calculate on modern CPUs\nNot made me the NSA, and released after an NSA released curve was discovered to have a backdoor.\nNamed for being over the prime field \\(2^{255}-19\\) - hence 25519"
  },
  {
    "objectID": "80_eddsa.rjs.html#visualize",
    "href": "80_eddsa.rjs.html#visualize",
    "title": "EdDSA",
    "section": "Visualize",
    "text": "Visualize\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport sympy\nfrom sympy.abc import x, y\n\ncurve = sympy.Eq(y*y, x**3 + 486662*x*x + x)\nfor_y = sympy.solve(curve, y)\nf = sympy.lambdify(x, for_y)\n\nx = np.linspace(-.00001, .00001, 1000)\n\n_ = [plt.plot(x, y) for y in f(x)]"
  },
  {
    "objectID": "80_eddsa.rjs.html#bernstein",
    "href": "80_eddsa.rjs.html#bernstein",
    "title": "EdDSA",
    "section": "Bernstein",
    "text": "Bernstein\n\nDiscovered by a team including Daniel J. Bernstein.\n\n\nThe export of cryptography from the United States was controlled as a munition starting from the Cold War until recategorization in 1996, with further relaxation in the late 1990s. In 1995, Bernstein brought the court case Bernstein v. United States. The ruling in the case declared that software was protected speech under the First Amendment, which contributed to regulatory changes reducing controls on encryption."
  },
  {
    "objectID": "80_eddsa.rjs.html#lange",
    "href": "80_eddsa.rjs.html#lange",
    "title": "EdDSA",
    "section": "Lange",
    "text": "Lange\n\nDiscovered by a team including Tanja Lange.\n\nAcademic and anti-surveillance activist\nEasy to find website with public keys:\n\nPeep these keys!"
  },
  {
    "objectID": "80_eddsa.rjs.html#p",
    "href": "80_eddsa.rjs.html#p",
    "title": "EdDSA",
    "section": "\\(p\\)",
    "text": "\\(p\\)\n\n\\(p = 2^255-19\\) so\n\\(F_p = \\mathbb{F}_{2^{255}-19}\\)"
  },
  {
    "objectID": "80_eddsa.rjs.html#emathbbf_2255-19",
    "href": "80_eddsa.rjs.html#emathbbf_2255-19",
    "title": "EdDSA",
    "section": "\\(E/\\mathbb{F}_{2^{255}-19}\\)",
    "text": "\\(E/\\mathbb{F}_{2^{255}-19}\\)\n\nTake the “twisted Edwards curve”\n\n\\[\n-x^2 + y^2 = 1 - \\frac{121665}{121666}x^2y^2\n\\]"
  },
  {
    "objectID": "80_eddsa.rjs.html#visualize-1",
    "href": "80_eddsa.rjs.html#visualize-1",
    "title": "EdDSA",
    "section": "Visualize",
    "text": "Visualize\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport sympy\nfrom sympy.abc import x, y\n\ncurve = sympy.Eq(-x*x + y*y, 1 - (121665/121666)*x*x*y*y)\nfor_y = sympy.solve(curve, y)\nf = sympy.lambdify(x, for_y)\n\nx = np.linspace(-4, 4, 1000)\n\n_ = [plt.plot(x, y) for y in f(x)]"
  },
  {
    "objectID": "80_eddsa.rjs.html#ed25519-1",
    "href": "80_eddsa.rjs.html#ed25519-1",
    "title": "EdDSA",
    "section": "Ed25519",
    "text": "Ed25519\n\n\\(p = 2^255-19\\) so\n\\(F_p = \\mathbb{F}_{2^{255}-19}\\)\n\\(E/\\mathbb{F}_{2^{255}-19}\\) is \\(-x^2 + y^2 = 1 - \\frac{121665}{121666}x^2y^2\\)"
  },
  {
    "objectID": "80_eddsa.rjs.html#ed25519-2",
    "href": "80_eddsa.rjs.html#ed25519-2",
    "title": "EdDSA",
    "section": "Ed25519",
    "text": "Ed25519\n\n\\(p = 2^255-19\\) so\n\\(F_p = \\mathbb{F}_{2^{255}-19}\\)\n\\(E/\\mathbb{F}_{2^{255}-19}\\) is \\(-x^2 + y^2 = 1 - \\frac{121665}{121666}x^2y^2\\)\n\\(\\ell = 2^{252} + 27742317777372353535851937790883648493\\)"
  },
  {
    "objectID": "80_eddsa.rjs.html#ed25519-3",
    "href": "80_eddsa.rjs.html#ed25519-3",
    "title": "EdDSA",
    "section": "Ed25519",
    "text": "Ed25519\n\n\\(p = 2^255-19\\) so\n\\(F_p = \\mathbb{F}_{2^{255}-19}\\)\n\\(E/\\mathbb{F}_{2^{255}-19}\\) is \\(-x^2 + y^2 = 1 - \\frac{121665}{121666}x^2y^2\\)\n\\(\\ell = 2^{252} + 27742317777372353535851937790883648493\\)\n\\(c = 3\\)"
  },
  {
    "objectID": "80_eddsa.rjs.html#ed25519-4",
    "href": "80_eddsa.rjs.html#ed25519-4",
    "title": "EdDSA",
    "section": "Ed25519",
    "text": "Ed25519\n\n\\(p = 2^255-19\\) so\n\\(F_p = \\mathbb{F}_{2^{255}-19}\\)\n\\(E/\\mathbb{F}_{2^{255}-19}\\) is \\(-x^2 + y^2 = 1 - \\frac{121665}{121666}x^2y^2\\)\n\\(\\ell = 2^{252} + 27742317777372353535851937790883648493\\)\n\\(c = 3\\)"
  },
  {
    "objectID": "80_eddsa.html",
    "href": "80_eddsa.html",
    "title": "EdDSA",
    "section": "",
    "text": "Welcome to Systems in Rust\nAction Items:\n\nMidterms verbal update.\nKeep at ix\nThis unlocks the last and greatest of the cryptographic homeworks so we can get to graph theory.\n\n\n\n\n\nPrivate Key Cryptography\nDigital Signatures\nEdwards-curve Digital Signature Algorithm (EdDSA)\n\nSome math where we need it\nAn aside on side channels if we get bored",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#today",
    "href": "80_eddsa.html#today",
    "title": "EdDSA",
    "section": "",
    "text": "Private Key Cryptography\nDigital Signatures\nEdwards-curve Digital Signature Algorithm (EdDSA)\n\nSome math where we need it\nAn aside on side channels if we get bored",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#motivating-example",
    "href": "80_eddsa.html#motivating-example",
    "title": "EdDSA",
    "section": "Motivating Example",
    "text": "Motivating Example\n\nCanonical Example is Snowden x Greenwald 2013\n\nSnowden wished to communicate a secret to Greenwald\nSnowden and Greenwald had never met\nSnowden could not transmit the secret in plain text\n\nVs enigma, no prior agreement on how to encrypt/decrypt",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#reads-cryptobook",
    "href": "80_eddsa.html#reads-cryptobook",
    "title": "EdDSA",
    "section": "Reads Cryptobook",
    "text": "Reads Cryptobook\n\nA key exchange protocol \\(P\\) is a pair of probabilistic machines \\((A, B)\\) that take turns in sending messages to each other. At the end of the protocol, when both machines terminate, they both obtain the same value \\(k\\). A protocol transcript \\(T_P\\) is the sequence of messages exchanged between the parties in one exe- cution of the protocol.",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#reads-cryptobook-1",
    "href": "80_eddsa.html#reads-cryptobook-1",
    "title": "EdDSA",
    "section": "Reads Cryptobook",
    "text": "Reads Cryptobook\n\nSince \\(A\\) and \\(B\\) are probabilistic machines, we obtain a different transcript every time we run the protocol. Formally, the transcript \\(T_P\\) of protocol \\(P\\) is a random variable, which is a function of the random bits generated by \\(A\\) and \\(B\\). The eavesdropping adversary \\(E\\) sees the entire transcript \\(T_P\\) and its goal is to figure out the secret \\(k\\).",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#set-the-stage",
    "href": "80_eddsa.html#set-the-stage",
    "title": "EdDSA",
    "section": "Set the Stage",
    "text": "Set the Stage\n\nSnowden has e.g. files on a harddrive\n\nThe files contain keywords that cannot be safely transmitted over US-based internet connections.\nSnowden is based in Hawai’i with no access to non-US-based connections.\nSnowden needs to encrypt the files in such as a way that only a trusted destination may read them.",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#first-contact",
    "href": "80_eddsa.html#first-contact",
    "title": "EdDSA",
    "section": "First Contact",
    "text": "First Contact\n\nSnowden contacts Greenwald to agree to use a secure messaging protocol\n\nUse of such protocols is relatively non-suspicious, used for banking etc.\nIt was enough to raise alarms for Snowden, but not quickly enough to stop him.\n\nGreenwald agrees to a recommended protocol",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#initialization",
    "href": "80_eddsa.html#initialization",
    "title": "EdDSA",
    "section": "Initialization",
    "text": "Initialization\n\nGreenwald generates a combination of numerical values on a local computing device.\n\nOne of these is the public-key, which Greenwalk may circulate broadly.\n\nWe see an example of such a technology on the next slide.",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#securedrop",
    "href": "80_eddsa.html#securedrop",
    "title": "EdDSA",
    "section": "SecureDrop",
    "text": "SecureDrop\n\nEmbed doesn’t work for what are likely obvious reasons:\nLink",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#safety-note",
    "href": "80_eddsa.html#safety-note",
    "title": "EdDSA",
    "section": "Safety Note",
    "text": "Safety Note\n\nProbably dropping to The Intercept is not recommended.\nReality Winner is currently incarcerated due to a leak fumbled by The Intercept\nRead more",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#step-2",
    "href": "80_eddsa.html#step-2",
    "title": "EdDSA",
    "section": "Step 2",
    "text": "Step 2\n\nGreenwald & co. hold in reserve a private-key\nThey defend it like lives depend on it, as they did for Winner and Snowden.\nSo: not stored in plaintext on a hard-drive\nSo: if on a hard-drive, hard-drive is in a secure site from e.g. federal law enforcement.",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#step-3",
    "href": "80_eddsa.html#step-3",
    "title": "EdDSA",
    "section": "Step 3",
    "text": "Step 3\n\nSnowden, and hopefully enough others to avoid suspicion, use the public key to encrypt their payload.\nIn addition to e.g. top secret documents, concerned community members could send in less-secret materials such as analysis of policing data with which they would rather not be affiliated.\nJournalists sift through the inputs.",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#its-that-simple",
    "href": "80_eddsa.html#its-that-simple",
    "title": "EdDSA",
    "section": "It’s that simple",
    "text": "It’s that simple\n\nOkay but like how do we do that:\n\nAny eaves-dropping adversary can see the public key.\nOne-to-one communication of a key is already dangerous\nAll this encryption/decryption needs to be managable by e.g. non-computing specialized journalists.",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#motivating-example-1",
    "href": "80_eddsa.html#motivating-example-1",
    "title": "EdDSA",
    "section": "Motivating Example",
    "text": "Motivating Example\n\nI have a Bitcoin.\nI can only spend it if other people can:\n\nSee it, to tell I have it\nNot spend it, because it’s mine\n\nI use a digital signature.",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#a-transaction",
    "href": "80_eddsa.html#a-transaction",
    "title": "EdDSA",
    "section": "A transaction",
    "text": "A transaction\n\nEach owner transfers the coin to the next by digitally signing a hash of the previous transaction and the public key of the next owner and adding these to the end of the coin\n\n\nI own a coin.\nI have a public keys.\nI transfer that a coin to new owner to buy the Grundrisse translated to Quenya\nThis happens over the open internet.",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#signage",
    "href": "80_eddsa.html#signage",
    "title": "EdDSA",
    "section": "Signage",
    "text": "Signage\n\nTo verify it is (1) my coin and (2) me transferring it, I:\n\nWrite down the transactions details.\nSHA256 hash the message\nEncrypt with my private key\nRelease the hash and cipher (encrypted) text",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#verify",
    "href": "80_eddsa.html#verify",
    "title": "EdDSA",
    "section": "Verify",
    "text": "Verify\n\nThe general public:\n\nDecrypts the ciphertext with my public key\nSHA256 hashes the decrypted text\nIf the hash matches our released hash, then it had to be us and the transaction is valid.",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#section",
    "href": "80_eddsa.html#section",
    "title": "EdDSA",
    "section": "",
    "text": "RSA_Encryption\n\n\ncluster_encryption\n\nEncryption\n\n\ncluster_decryption\n\nDecryption\n\n\n\nmessage\n\nMessage (M)\n\n\n\nencrypt\n\nCiphertext (C)\n\n\n\nmessage-&gt;encrypt\n\n\n\n\n\ninter\n\nEncrypted Transaction\n\n\n\nencrypt-&gt;inter\n\n\n\n\n\npublic_key_ref\n\n\n\nPrivate Key: (n, d)\n\n\n\npublic_key_ref-&gt;encrypt\n\n\n\n\n\nciphertext\n\nCiphertext (C)\n\n\n\ndecrypt\n\nMessage (M)\n\n\n\nciphertext-&gt;decrypt\n\n\n\n\n\noutput\n\nDecrypted Transaction\n\n\n\ndecrypt-&gt;output\n\n\n\n\n\nprivate_key_ref\n\n\n\nPublic Key: (n, e)\n\n\n\nprivate_key_ref-&gt;decrypt\n\n\n\n\n\ninput\n\nUnencrypted Transaction\n\n\n\ninput-&gt;message\n\n\n\n\n\ninter-&gt;ciphertext",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#eddsa",
    "href": "80_eddsa.html#eddsa",
    "title": "EdDSA",
    "section": "EdDSA",
    "text": "EdDSA\n\nIn public-key cryptography, Edwards-curve Digital Signature Algorithm (EdDSA) is a digital signature scheme using a variant of Schnorr signature based on twisted Edwards curves.\n\n\nAh, that really clarifies things.",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#iterative-definition",
    "href": "80_eddsa.html#iterative-definition",
    "title": "EdDSA",
    "section": "Iterative Definition",
    "text": "Iterative Definition\nAn EdDSA signature scheme is a choice.",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#iterative-definition-1",
    "href": "80_eddsa.html#iterative-definition-1",
    "title": "EdDSA",
    "section": "Iterative Definition",
    "text": "Iterative Definition\nAn EdDSA signature scheme is a choice over:\n\nA finite field \\(\\mathbb{F}_p\\) where we take \\(p\\) to be an odd prime.",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#galois-field",
    "href": "80_eddsa.html#galois-field",
    "title": "EdDSA",
    "section": "Galois field",
    "text": "Galois field\n\nIn mathematics, a finite field or Galois field (so-named in honor of Évariste Galois) is a field that has a finite number of elements. As with any field, a finite field is a set on which the operations of multiplication, addition, subtraction and division are defined and satisfy certain basic rules. The most common examples of finite fields are the integers mod p \\(p\\) when \\(p\\) is a prime number.",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#recall",
    "href": "80_eddsa.html#recall",
    "title": "EdDSA",
    "section": "Recall",
    "text": "Recall\n\nTheu\\(n\\)s and i\\(n\\)’s in Rust are rings\n\nThey have addition and multiplication\n\nThey aren’t fields - zero is divisible\n\nSpoiler alert, but \\(2^{\\frac{n}{2}} \\times 2^{\\frac{n}{2}} \\equiv 0 \\pmod{2^n}\\)\n\nSo: not \\(\\mathbb{Z}/2^8\\mathbb{Z}\\)\n\nWhat about \\(\\mathbb{Z}/(2^8+1)\\mathbb{Z}\\)?\n\nThat’s \\(\\mathbb{F}_p\\) where \\(p = 2^8+1\\)",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#iterative-definition-2",
    "href": "80_eddsa.html#iterative-definition-2",
    "title": "EdDSA",
    "section": "Iterative Definition",
    "text": "Iterative Definition\nAn EdDSA signature scheme is a choice over:\n\nA finite field \\(\\mathbb{F}_p\\).\nAn elliptic curve \\(E\\) over \\(\\mathbb{F}_p\\)\n\nWe simply as:\n\nA plane curve over\nA finite field\nof form \\(a x^2+y^2= 1+dx^2y^2\\)",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#plane-curve",
    "href": "80_eddsa.html#plane-curve",
    "title": "EdDSA",
    "section": "Plane Curve",
    "text": "Plane Curve\n\nIn mathematics, a plane curve is a curve in a plane that may be a Euclidean plane, an affine plane or a projective plane. The most frequently studied cases are smooth plane curves (including piecewise smooth plane curves), and algebraic plane curves. Plane curves also include the Jordan curves (curves that enclose a region of the plane but need not be smooth) and the graphs of continuous functions.",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#graphs-of-continous-functions",
    "href": "80_eddsa.html#graphs-of-continous-functions",
    "title": "EdDSA",
    "section": "Graphs of Continous Functions",
    "text": "Graphs of Continous Functions\n\nOften express as \\(f(x,y) = 0\\)\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport sympy\nfrom sympy.abc import x, y\n\nr = 1\n\ncurve = sympy.Eq(0,x**2 + y**2 - r)\nfor_y = sympy.solve(curve, y)\nf = sympy.lambdify(x, for_y)\n\nx = np.linspace(-r, r, 1000)\n\n_ = [plt.plot(x, y) for y in f(x)]",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#iterative-definition-3",
    "href": "80_eddsa.html#iterative-definition-3",
    "title": "EdDSA",
    "section": "Iterative Definition",
    "text": "Iterative Definition\nAn EdDSA signature scheme is a choice over:\n\nA finite field \\(\\mathbb{F}_p\\).\nAn elliptic curve \\(E\\) over \\(\\mathbb{F}_p\\)\n\nWhose group \\(E(\\mathbb{F}_p)\\) of \\(\\mathbb{F}_p\\)-rational points has order \\(|E(\\mathbb{F}_p)| = 2^C \\ell\\) where \\(\\ell\\) is a large primce and \\(2^c\\) is the cofactor\n\nTake a 400-level math class\nBasically this is a measure of the area within the ellipse.",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#iterative-definition-4",
    "href": "80_eddsa.html#iterative-definition-4",
    "title": "EdDSA",
    "section": "Iterative Definition",
    "text": "Iterative Definition\nAn EdDSA signature scheme is a choice over:\n\nA finite field \\(\\mathbb{F}_p\\).\nAn elliptic curve \\(E\\) over \\(\\mathbb{F}_p\\)\nA base point \\(B \\in E(\\mathbb{F}_p)\\)\n\nThis is the only parameter set when generating your own keys.\nEverything else is pre-computed.\nBasically a point on the curve.",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#iterative-definition-5",
    "href": "80_eddsa.html#iterative-definition-5",
    "title": "EdDSA",
    "section": "Iterative Definition",
    "text": "Iterative Definition\nAn EdDSA signature scheme is a choice over:\n\nA finite field \\(\\mathbb{F}_p\\).\nAn elliptic curve \\(E\\) over \\(\\mathbb{F}_p\\)\nA base point \\(B \\in E(\\mathbb{F}_p)\\)\nA hash function \\(H\\) with \\(2b\\)-bit outputs, where \\(2^{b-1} &gt; q\\)\n\nThis just allows machine representation.",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#public-key",
    "href": "80_eddsa.html#public-key",
    "title": "EdDSA",
    "section": "Public key",
    "text": "Public key\n\n\n\n\n\n\nPublic key\n\n\n\nAn EdDSA public key is a curve point \\(A \\in E(\\mathbb{F}_p)\\) encoded in \\(b\\) bits",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#signature-verification",
    "href": "80_eddsa.html#signature-verification",
    "title": "EdDSA",
    "section": "Signature verification",
    "text": "Signature verification\n\n\n\n\n\n\nSignature verification\n\n\n\nAn EdDSA signature on a message \\(M\\) by public \\(A\\) is the (ordered) pair \\((R,S)\\) encoded in \\(2b\\) bits, where \\(R\\) is a curve point \\(R \\in E(\\mathbb{F}_p)\\) and \\(S\\) is non-negative integer less than the size of the large prime \\(\\ell\\). \\((R,S)\\) must satisfy the following equation (where \\(\\parallel\\) is string concatenation).\n\\[\n2^c S B = 2^c R + 2^c H(R \\parallel A \\parallel M) A\n\\]",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#private-key",
    "href": "80_eddsa.html#private-key",
    "title": "EdDSA",
    "section": "Private key",
    "text": "Private key\n\n\n\n\n\n\nPrivate key\n\n\n\nAn EdDSA private key is a \\(b\\)-bit string \\(k\\) which should be chosen uniformly at random. The corresponding public key is \\(A = s B\\), where \\(s = H_{0,\\dots,b - 1}(k)\\) is the least significant \\(b\\) bits of \\(H(k)\\) interpreted as an integer.",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#signing",
    "href": "80_eddsa.html#signing",
    "title": "EdDSA",
    "section": "Signing",
    "text": "Signing\n\n\n\n\n\n\nSigning\n\n\n\nThe signature on a message \\(M\\) is deterministically computed as \\((R, S)\\) where \\(R = r B\\) for \\(r = H(H_{b,\\dots,2b - 1}(k) \\parallel M)\\), and \\[\nS \\equiv r + H(R \\parallel A \\parallel M) s \\pmod \\ell\n\\] This satisfies the verification equation \\[\n\\begin{align}\n2^c S B &= 2^c (r + H(R \\parallel A \\parallel M) s) B \\\\\n        &= 2^c r B + 2^c H(R \\parallel A \\parallel M) s B \\\\\n        &= 2^c R + 2^c H(R \\parallel A \\parallel M) A.\n\\end{align}\n\\]",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#ed25519",
    "href": "80_eddsa.html#ed25519",
    "title": "EdDSA",
    "section": "Ed25519",
    "text": "Ed25519\n\nEdDSA with:\n\nSHA-512\nCurve25519",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#curve25519",
    "href": "80_eddsa.html#curve25519",
    "title": "EdDSA",
    "section": "Curve25519",
    "text": "Curve25519\n\nAn unusually fast curve to calculate on modern CPUs\nNot made me the NSA, and released after an NSA released curve was discovered to have a backdoor.\nNamed for being over the prime field \\(2^{255}-19\\) - hence 25519",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#visualize",
    "href": "80_eddsa.html#visualize",
    "title": "EdDSA",
    "section": "Visualize",
    "text": "Visualize\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport sympy\nfrom sympy.abc import x, y\n\ncurve = sympy.Eq(y*y, x**3 + 486662*x*x + x)\nfor_y = sympy.solve(curve, y)\nf = sympy.lambdify(x, for_y)\n\nx = np.linspace(-.00001, .00001, 1000)\n\n_ = [plt.plot(x, y) for y in f(x)]\n\n\n\n&lt;lambdifygenerated-2&gt;:2: RuntimeWarning:\n\ninvalid value encountered in sqrt",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#bernstein",
    "href": "80_eddsa.html#bernstein",
    "title": "EdDSA",
    "section": "Bernstein",
    "text": "Bernstein\n\nDiscovered by a team including Daniel J. Bernstein.\n\n\nThe export of cryptography from the United States was controlled as a munition starting from the Cold War until recategorization in 1996, with further relaxation in the late 1990s. In 1995, Bernstein brought the court case Bernstein v. United States. The ruling in the case declared that software was protected speech under the First Amendment, which contributed to regulatory changes reducing controls on encryption.",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#lange",
    "href": "80_eddsa.html#lange",
    "title": "EdDSA",
    "section": "Lange",
    "text": "Lange\n\nDiscovered by a team including Tanja Lange.\n\nAcademic and anti-surveillance activist\nEasy to find website with public keys:\n\nPeep these keys!",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#p",
    "href": "80_eddsa.html#p",
    "title": "EdDSA",
    "section": "\\(p\\)",
    "text": "\\(p\\)\n\n\\(p = 2^255-19\\) so\n\\(F_p = \\mathbb{F}_{2^{255}-19}\\)",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#emathbbf_2255-19",
    "href": "80_eddsa.html#emathbbf_2255-19",
    "title": "EdDSA",
    "section": "\\(E/\\mathbb{F}_{2^{255}-19}\\)",
    "text": "\\(E/\\mathbb{F}_{2^{255}-19}\\)\n\nTake the “twisted Edwards curve”\n\n\\[\n-x^2 + y^2 = 1 - \\frac{121665}{121666}x^2y^2\n\\]",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#visualize-1",
    "href": "80_eddsa.html#visualize-1",
    "title": "EdDSA",
    "section": "Visualize",
    "text": "Visualize\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport sympy\nfrom sympy.abc import x, y\n\ncurve = sympy.Eq(-x*x + y*y, 1 - (121665/121666)*x*x*y*y)\nfor_y = sympy.solve(curve, y)\nf = sympy.lambdify(x, for_y)\n\nx = np.linspace(-4, 4, 1000)\n\n_ = [plt.plot(x, y) for y in f(x)]",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#ed25519-1",
    "href": "80_eddsa.html#ed25519-1",
    "title": "EdDSA",
    "section": "Ed25519",
    "text": "Ed25519\n\n\\(p = 2^255-19\\) so\n\\(F_p = \\mathbb{F}_{2^{255}-19}\\)\n\\(E/\\mathbb{F}_{2^{255}-19}\\) is \\(-x^2 + y^2 = 1 - \\frac{121665}{121666}x^2y^2\\)",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#ed25519-2",
    "href": "80_eddsa.html#ed25519-2",
    "title": "EdDSA",
    "section": "Ed25519",
    "text": "Ed25519\n\n\\(p = 2^255-19\\) so\n\\(F_p = \\mathbb{F}_{2^{255}-19}\\)\n\\(E/\\mathbb{F}_{2^{255}-19}\\) is \\(-x^2 + y^2 = 1 - \\frac{121665}{121666}x^2y^2\\)\n\\(\\ell = 2^{252} + 27742317777372353535851937790883648493\\)",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#ed25519-3",
    "href": "80_eddsa.html#ed25519-3",
    "title": "EdDSA",
    "section": "Ed25519",
    "text": "Ed25519\n\n\\(p = 2^255-19\\) so\n\\(F_p = \\mathbb{F}_{2^{255}-19}\\)\n\\(E/\\mathbb{F}_{2^{255}-19}\\) is \\(-x^2 + y^2 = 1 - \\frac{121665}{121666}x^2y^2\\)\n\\(\\ell = 2^{252} + 27742317777372353535851937790883648493\\)\n\\(c = 3\\)",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "80_eddsa.html#ed25519-4",
    "href": "80_eddsa.html#ed25519-4",
    "title": "EdDSA",
    "section": "Ed25519",
    "text": "Ed25519\n\n\\(p = 2^255-19\\) so\n\\(F_p = \\mathbb{F}_{2^{255}-19}\\)\n\\(E/\\mathbb{F}_{2^{255}-19}\\) is \\(-x^2 + y^2 = 1 - \\frac{121665}{121666}x^2y^2\\)\n\\(\\ell = 2^{252} + 27742317777372353535851937790883648493\\)\n\\(c = 3\\)",
    "crumbs": [
      "EdDSA"
    ]
  },
  {
    "objectID": "82_ed25519.html",
    "href": "82_ed25519.html",
    "title": "Ed25519",
    "section": "",
    "text": "To complete this assignment, you must:\n\nCreate a 82 directory in your 271rs repository.\nThis folder must be a Cargo package.\n\n\n\n\n\n\nI have adapted the official Python implementation to Python3 and added type hints.\nI provide, below, functions types for all functions used in my implementation.\nI provide a main.rs file which performance constant setup, shows an example of using a big number library, and checks validity using one of the test cases from the official Python implementation.\n\n\n\n\n\nYou will implement all functions of ed25519.py in Rust.\nYou will ensure your code meets validity checks.\n\nThis will be as simple as cargo run provided you use the provided main.rs.\n\n\n\n\n\nYou will need to use cargo add to use external packages.\n\nWhile you may use ix and your own SHA, this is not necessary or required.\n\nBesides using cargo add, you could also manually update the crates Cargo.toml file.\nI will also provide my Cargo.toml file.",
    "crumbs": [
      "Ed25519"
    ]
  },
  {
    "objectID": "82_ed25519.html#requirements",
    "href": "82_ed25519.html#requirements",
    "title": "Ed25519",
    "section": "",
    "text": "To complete this assignment, you must:\n\nCreate a 82 directory in your 271rs repository.\nThis folder must be a Cargo package.",
    "crumbs": [
      "Ed25519"
    ]
  },
  {
    "objectID": "82_ed25519.html#my-responsibility",
    "href": "82_ed25519.html#my-responsibility",
    "title": "Ed25519",
    "section": "",
    "text": "I have adapted the official Python implementation to Python3 and added type hints.\nI provide, below, functions types for all functions used in my implementation.\nI provide a main.rs file which performance constant setup, shows an example of using a big number library, and checks validity using one of the test cases from the official Python implementation.",
    "crumbs": [
      "Ed25519"
    ]
  },
  {
    "objectID": "82_ed25519.html#your-responsibility",
    "href": "82_ed25519.html#your-responsibility",
    "title": "Ed25519",
    "section": "",
    "text": "You will implement all functions of ed25519.py in Rust.\nYou will ensure your code meets validity checks.\n\nThis will be as simple as cargo run provided you use the provided main.rs.\n\n\n\n\n\nYou will need to use cargo add to use external packages.\n\nWhile you may use ix and your own SHA, this is not necessary or required.\n\nBesides using cargo add, you could also manually update the crates Cargo.toml file.\nI will also provide my Cargo.toml file.",
    "crumbs": [
      "Ed25519"
    ]
  },
  {
    "objectID": "82_ed25519.html#main",
    "href": "82_ed25519.html#main",
    "title": "Ed25519",
    "section": "Main",
    "text": "Main\n\n\nsrc/main.rs\n\nuse num::*;\nuse num_bigint::BigInt;\nuse num_traits::Euclid;\n\nfn main() {\n    // --- 1. Constant Setup  ---\n    const B: usize = 256;\n    \n    // q: int = 2**255 - 19\n    let q = BigInt::from(2).pow(255) - BigInt::from(19);\n\n    // l: int = 2**252 + 27742317777372353535851937790883648493\n    let l_suffix = BigInt::parse_bytes(b\"27742317777372353535851937790883648493\", 10).unwrap();\n    let l = BigInt::from(2).pow(252) + l_suffix;\n\n    // d: int = -121665 * inv(121666)\n    let n_d = BigInt::from(-121665);\n    let d_inv = inv(&BigInt::from(121666), &q);\n    let d = (n_d * d_inv).rem_euclid(&q);\n\n    // I: int = expmod(2,(q-1)//4,q)\n    let exponent_i = (&q - BigInt::from(1)) / BigInt::from(4);\n    let i_const = expmod(&BigInt::from(2), &exponent_i, &q);\n    \n    // By : int = 4 * inv(5)\n    let by = (BigInt::from(4) * inv(&BigInt::from(5), &q)).rem_euclid(&q);\n    \n    // Bx : int = xrecover(By)\n    let bx = xrecover(&by, &q, &d, &i_const);\n    \n    // B : List[int] = [Bx % q, By % q]\n    let b_point: Vec&lt;BigInt&gt; = vec![bx.rem_euclid(&q), by.rem_euclid(&q)];\n\n    // println!(\"Ed25519 Constant Initialization Complete.\");\n    \n    // --- 2. Test Case ---\n    // Line 2 of this file. https://ed25519.cr.yp.to/python/sign.input\n    \n    // Secret Key (32-bytes, all zeros)\n    // 4ccd089b28ff96da9db6c346ec114e0f5b8a319f35aba624da8cf6ed4fb8a6fb3d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c\n    let sk = vec![0x4c, 0xcd, 0x08, 0x9b, 0x28, 0xff, 0x96, 0xda, 0x9d, 0xb6, 0xc3, 0x46, 0xec, 0x11, 0x4e, 0x0f, 0x5b, 0x8a, 0x31, 0x9f, 0x35, 0xab, 0xa6, 0x24, 0xda, 0x8c, 0xf6, 0xed, 0x4f, 0xb8, 0xa6, 0xfb, 0x3d, 0x40, 0x17, 0xc3, 0xe8, 0x43, 0x89, 0x5a, 0x92, 0xb7, 0x0a, 0xa7, 0x4d, 0x1b, 0x7e, 0xbc, 0x9c, 0x98, 0x2c, 0xcf, 0x2e, 0xc4, 0x96, 0x8c, 0xc0, 0xcd, 0x55, 0xf1, 0x2a, 0xf4, 0x66, 0x0c];\n\n    // Message (empty string)\n    // 72\n    let m = b\"72\";\n    \n    // 3. Generate Public Key\n    let pk = publickey(&sk, B, &q, &d, &b_point);\n\n    // 4. Create Signature\n    let sig = signature(m, &sk, &pk, B, &q, &l, &d, &b_point);\n    \n    // 5. Verify Signature\n    dbg!(checkvalid(&sig, m, &pk, B, &q, &d, &i_const, &b_point));\n}",
    "crumbs": [
      "Ed25519"
    ]
  },
  {
    "objectID": "82_ed25519.html#cargo",
    "href": "82_ed25519.html#cargo",
    "title": "Ed25519",
    "section": "Cargo",
    "text": "Cargo\n\n\nCargo.toml\n\n[package]\nname = \"num\"\nversion = \"0.1.0\"\nedition = \"2024\"\n\n[dependencies]\nhex = \"0.4.3\"\nnum-bigint = \"0.4.6\"\nnum-integer = \"0.1.46\"\nnum-traits = \"0.2.19\"\nsha2 = \"0.10.9\"",
    "crumbs": [
      "Ed25519"
    ]
  },
  {
    "objectID": "82_ed25519.html#lib",
    "href": "82_ed25519.html#lib",
    "title": "Ed25519",
    "section": "Lib",
    "text": "Lib\n\nIn this case, I do not provide function bodies, but provide types, imports, and constants.\n\n\n\nsrc/lib.rs\n\nuse num_bigint::BigInt;\nuse num_traits::{Zero, One, ToPrimitive, Euclid};\nuse num_integer::Integer;\nuse sha2::{Digest, Sha512};\n\n// --- Global Helpers (No Dependencies) ---\n\n// H(m: bytes) -&gt; bytes\nfn h(m: &[u8]) -&gt; Vec&lt;u8&gt; {\n\n// bit(h: bytes, i: int) -&gt; int\nfn bit(h_val: &[u8], i: usize) -&gt; u8 {\n\n// expmod(b:int,e:int,m:int) -&gt; int\npub fn expmod(b_val: &BigInt, e: &BigInt, m: &BigInt) -&gt; BigInt {\n\n// inv(x:int, q: &BigInt) -&gt; int\npub fn inv(x: &BigInt, q: &BigInt) -&gt; BigInt {\n\n// xrecover helper (nested for local use in setup and decode)\npub fn xrecover(y: &BigInt, q: &BigInt, d: &BigInt, i_const: &BigInt) -&gt; BigInt {\n\n// --- Core Functions (Require Constants) ---\n\nfn edwards(p: &Vec&lt;BigInt&gt;, q_val: &Vec&lt;BigInt&gt;, q: &BigInt, d: &BigInt) -&gt; Vec&lt;BigInt&gt; {\n\nfn scalarmult(p: &Vec&lt;BigInt&gt;, e: &BigInt, q: &BigInt, d: &BigInt) -&gt; Vec&lt;BigInt&gt; {\n\nfn encodeint(y: &BigInt, b: usize) -&gt; Vec&lt;u8&gt; {\n\nfn encodepoint(p: &Vec&lt;BigInt&gt;, b: usize) -&gt; Vec&lt;u8&gt; {\n\npub fn publickey(sk: &[u8], b: usize, q: &BigInt, d: &BigInt, b_point: &Vec&lt;BigInt&gt;) -&gt; Vec&lt;u8&gt; {\n\nfn hint(m: &[u8], b: usize) -&gt; BigInt {\n\npub fn signature(m: &[u8], sk: &[u8], pk: &[u8], b: usize, q: &BigInt, l: &BigInt, d: &BigInt, b_point: &Vec&lt;BigInt&gt;) -&gt; Vec&lt;u8&gt; {\n\nfn isoncurve(p: &Vec&lt;BigInt&gt;, q: &BigInt, d: &BigInt) -&gt; bool {\n\nfn decodeint(s: &[u8], b: usize) -&gt; BigInt {\n\npub fn checkvalid(s: &[u8], m: &[u8], pk: &[u8], b: usize, q: &BigInt, d: &BigInt, i_const: &BigInt, b_point: &Vec&lt;BigInt&gt;) -&gt; bool {",
    "crumbs": [
      "Ed25519"
    ]
  }
]