[
  {
    "objectID": "00_welcome.html",
    "href": "00_welcome.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to Systems in Rust\n\nWhat is in point of fact a systems cryptography course.\nBut it’s in Rust so you have to take it.\n\nAction Items:\n\nAccess the course webpage\nJoin the Discord!\n\nYou should have gotten an email…\n\nSet up Linux/Rust/Git.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#announcements",
    "href": "00_welcome.html#announcements",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to Systems in Rust\n\nWhat is in point of fact a systems cryptography course.\nBut it’s in Rust so you have to take it.\n\nAction Items:\n\nAccess the course webpage\nJoin the Discord!\n\nYou should have gotten an email…\n\nSet up Linux/Rust/Git.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#homework",
    "href": "00_welcome.html#homework",
    "title": "Welcome",
    "section": "Homework",
    "text": "Homework\n\nThe first homework, “Hello”, is ready after this class.\n\nIt is comically trivial.\nMostly makes sure you have everything set up.\n\nDue Friday, 1 Sept. at 1440 ET.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#today",
    "href": "00_welcome.html#today",
    "title": "Welcome",
    "section": "Today",
    "text": "Today\n\nLogistics\nOn Systems\nOn Rust\nOn Git\nCourse Sketch",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#it-me",
    "href": "00_welcome.html#it-me",
    "title": "Welcome",
    "section": "It me",
    "text": "It me\n\nName\n\n(Prof. )?Calvin\n\nCredentials\n\nB.A. Mathematics\nB.S., M.S., Ph.D. Computer Science\n\nPronouns\n\nthey/them",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#the-great-work",
    "href": "00_welcome.html#the-great-work",
    "title": "Welcome",
    "section": "The Great Work",
    "text": "The Great Work\n\nThesis Title\n\nMining Secure Behavior of Hardware Designs\n\nPlain English\n\nJust as there are bugs in code that makes software, modern hardware is also written in code and therefore may contain bugs. I find these bugs.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#course-format",
    "href": "00_welcome.html#course-format",
    "title": "Welcome",
    "section": "Course Format",
    "text": "Course Format\n\nLecture Monday\nLab Wednesday\nHomework due Friday 1440 PM ET\nIn-class midterm week of 10/06\nFinal project due whenever the final is scheduled.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#ungrading",
    "href": "00_welcome.html#ungrading",
    "title": "Welcome",
    "section": "Ungrading++",
    "text": "Ungrading++\n\nYour voices have been heard: &gt; I think failing my systems class was the best thing that happened to me.\n\n\nThis course demanded strong self-motivation due to its lax grading standards, which I did not bring to the table. Thus, I didn’t learn as much as I might’ve if grading mattered more.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#proposal",
    "href": "00_welcome.html#proposal",
    "title": "Welcome",
    "section": "Proposal",
    "text": "Proposal\n\nI will offer two option\n\nUngrading\nSpecification Grading\n\nVote as a class (anonymously)\nI update syllabus before add/drop ends.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#ungrading-1",
    "href": "00_welcome.html#ungrading-1",
    "title": "Welcome",
    "section": "1. Ungrading",
    "text": "1. Ungrading\n\nI provide autograders for all assignments except final.\n\nOr a reference solution with a rubric, if automated testing is too weird.\nI will have a final reference solution but will at most share snippets individually.\n\nYou do whatever you want.\nEnrolled students get an A.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#specification-grading",
    "href": "00_welcome.html#specification-grading",
    "title": "Welcome",
    "section": "2. Specification Grading",
    "text": "2. Specification Grading\n\nAll the rage. I was never fan but tell me what you think.\nBasically, I will assign some stuff but you don’t have to do all of it perfectly.\n\nNo partial credit, everything is yes/no grading.\n\nI took distributions over final, midterm, and Lab/HW",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#it-pays-to-get-as",
    "href": "00_welcome.html#it-pays-to-get-as",
    "title": "Welcome",
    "section": "It pays to get A’s",
    "text": "It pays to get A’s\n\n\n\nGrade\nRequirements\n\n\n\n\nA\nFinal meets spec\n\n\nA\n90% ave HW/Lab/Midterm, Final compiles\n\n\nA-\n90% ave HW/Lab, Midterm/Final compile\n\n\nA-\nMidterm meets spec, Final compiles",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#but-bs-are-the-knees",
    "href": "00_welcome.html#but-bs-are-the-knees",
    "title": "Welcome",
    "section": "But B’s are the Knees",
    "text": "But B’s are the Knees\n\n\n\nGrade\nRequirements\n\n\n\n\nB+\n90% ave HW/Lab, Midterm compiles\n\n\nB\n80% ave HW/Lab, Midterm compiles\n\n\nB-\n80% ave HW/Lab",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#these-may-earn-degrees",
    "href": "00_welcome.html#these-may-earn-degrees",
    "title": "Welcome",
    "section": "These may (???) earn degrees",
    "text": "These may (???) earn degrees\n\n\n\nGrade\nRequirements\n\n\n\n\nC\n80% ave Lab\n\n\nD\n60% ave Lab\n\n\nF\nAnything else",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#lab-grading",
    "href": "00_welcome.html#lab-grading",
    "title": "Welcome",
    "section": "Lab Grading",
    "text": "Lab Grading\n\nA (=100%)\n\nMeets spec by end of class\n\nB (=90%)\n\nCompiles at end of class\n\nCan be turned into an executable.\n\n\nF (=0%)\n\nAnything else",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#hw-grading",
    "href": "00_welcome.html#hw-grading",
    "title": "Welcome",
    "section": "HW Grading",
    "text": "HW Grading\n\nA (=100%)\n\nOn time\nPasses autograder.\n\nB (=90%)\n\nOn time\nCompiles\n\nCan be turned into an executable.\n\n\nF (=0%)\n\nAnything else",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#final",
    "href": "00_welcome.html#final",
    "title": "Welcome",
    "section": "Final",
    "text": "Final\n\nCreate, document, and publish a self-hosting version control system.\nEntire codebase in Rust.\nMinimum specifications:\n\nSupport nested directory structures.\nSupport text-based files (.rs, .py, .txt)\nAllow reverting to named changes (commits).\nCompleted by you and at most a partner.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#late-work-policy",
    "href": "00_welcome.html#late-work-policy",
    "title": "Welcome",
    "section": "Late Work Policy",
    "text": "Late Work Policy\n\nLate work is not accepted.\n\nTurning in anything at all for on 90% of assignments yields B.\nMiss 100% of assignments and midterm but do the final for an A.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#ai-policy",
    "href": "00_welcome.html#ai-policy",
    "title": "Welcome",
    "section": "AI Policy",
    "text": "AI Policy\n\nI would be shocked if it is helpful to you.\nIf you think it is helpful, that is probably not a good sign.\nYou can use it (I wouldn’t)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#collaboration-policy",
    "href": "00_welcome.html#collaboration-policy",
    "title": "Welcome",
    "section": "Collaboration Policy",
    "text": "Collaboration Policy\n\nNon-final:\n\nAny size group via enthusiastic consent.\nTurn in your own code/copy.\n\nFinal:\n\nPartners via enthusiastic consent.\nTurn in your own code/copy.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#vote",
    "href": "00_welcome.html#vote",
    "title": "Welcome",
    "section": "Vote",
    "text": "Vote\n\nIf there’s not a Forms link here I should add one quickly.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#the-hard-part",
    "href": "00_welcome.html#the-hard-part",
    "title": "Welcome",
    "section": "The Hard Part",
    "text": "The Hard Part\n\nAfter ~10 years of systems research I’ve convinced myself only two things really matter:\n\nPointers, and\nRecursion\n\nRecursion isn’t too bad…\n\n&gt;&gt;&gt; exp = lambda b, n : b if n == 1 else b*exp(b,n-1)\n&gt;&gt;&gt; exp(2,8)\n256",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#pointers",
    "href": "00_welcome.html#pointers",
    "title": "Welcome",
    "section": "Pointers",
    "text": "Pointers\n\nPointers are a beast, but without them nothing makes sense!\n\n\n\n&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; def addx():\n...     x += 1\n...\n&gt;&gt;&gt; addx()\nUnboundLocalError:\n&lt;blah blah blah error messages&gt;\n\n&gt;&gt;&gt; x = [1]\n&gt;&gt;&gt; def addx():\n...     x[0] += 1\n...\n&gt;&gt;&gt; addx()\n&gt;&gt;&gt; x\n[2]",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#insight",
    "href": "00_welcome.html#insight",
    "title": "Welcome",
    "section": "Insight",
    "text": "Insight\n\nDefinition:\n\nPointers: Variables that store memory addresses.\nRecursion: Functions calling themselves to solve sub-problems.\n\nImportance:\n\nCore to efficient algorithms and memory management in low-level programming.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#python-and-pointers",
    "href": "00_welcome.html#python-and-pointers",
    "title": "Welcome",
    "section": "Python and Pointers",
    "text": "Python and Pointers\n\nWhy not .py (.js, .java, .cs, .cpp, etc)?\n\nThese languages abstract memory.\nThis abstraction makes computation unclear\nThis lack of clarity:\n\nAdversely impacts education\nComplicates low-level design\nLeads to low performance\n\nGood languages (except Java) but not for us",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#rust-and-pointers",
    "href": "00_welcome.html#rust-and-pointers",
    "title": "Welcome",
    "section": "Rust and Pointers",
    "text": "Rust and Pointers\n\nRust:\n\nObscures pointers, but…\nDoes not obscure memory.\n\nThis is good!\n\nMemory matters, but pointers are historical accident.\n\nYou should probably use Rust in every application where correctness or performance matters.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#rust-and-recursion",
    "href": "00_welcome.html#rust-and-recursion",
    "title": "Welcome",
    "section": "Rust and Recursion",
    "text": "Rust and Recursion\n\nSeparately, Rust is built on one of the most exciting ongoing computer science research efforts:\nLLVM (stands for LLVM)\nBasically, a way of turning human-readable code into machine-executable code.\n\nVery good at turning recursion into iteration and/or vice versa.\n\nSo Rust experiences less costs on recursion than many other languages.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git",
    "href": "00_welcome.html#git",
    "title": "Welcome",
    "section": "Git",
    "text": "Git\n\nIf you don’t know git, you should soon.\nGit corresponds, like the others, to a command: git\n\nIt is common now to use other techniques, but the command remains extremely stable\n\nQuoth GitHub, the first and greatest of the collaboration tools:\n\n\nIf you want a lot of control and flexibility, you can use the command line.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example",
    "href": "00_welcome.html#git-example",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nSo basically, you have things called repositories or “repos”\n\n\n\n\n\n\nflowchart LR\n  A(My ️‍🔥 code repo)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-1",
    "href": "00_welcome.html#git-example-1",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nThen you realize you wrote an infinite loop so you update it\n\n\n\n\n\n\nflowchart LR\n  A(My ️‍🔥 code repo v0 ) --&gt; B(My ️‍🔥 code repo v1)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-2",
    "href": "00_welcome.html#git-example-2",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nThen you come to class and realize your code is on your gaming rig in your apartment.\n\n\n\n\n\n\nflowchart LR\n  A(&lt;s&gt;My ️‍🔥 code repo v0&lt;/s&gt;) --&gt; B(&lt;s&gt;My ️‍🔥 code repo v1&lt;/s&gt;)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-3",
    "href": "00_welcome.html#git-example-3",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nSo you save your code on GitHub\n\nGH = GitHub, GR = Gaming Rig\n\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GH.‍🔥 v0)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-4",
    "href": "00_welcome.html#git-example-4",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nBut you realize you didn’t sanitize your inputs so you update again.\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-5",
    "href": "00_welcome.html#git-example-5",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nThen you have class again and grab the GitHub version onto your LT = Laptop\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-6",
    "href": "00_welcome.html#git-example-6",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nYou notice it has the bug so you fix it again on your laptop in almost the same way\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-7",
    "href": "00_welcome.html#git-example-7",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nAnd save that back to GitHub then head back home to play Nethack on your 12000USD Gaming PC\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-8",
    "href": "00_welcome.html#git-example-8",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nYou realize you also added some ASCII art and try to send that to GitHub\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)\n  G --&gt; H(GH.‍🔥 v2)\n  C --&gt; H",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-9",
    "href": "00_welcome.html#git-example-9",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nTwo arrows into one thing is a merge conflict and out-of-scope for now.\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)\n  G --&gt; H{💥}\n  C --&gt; H",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#git-example-10",
    "href": "00_welcome.html#git-example-10",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nBasically versions of code can live in more than one place.\n\nAh, versions, our old friend…\n\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)\n  G --&gt; H{💥}\n  C --&gt; H",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#visually",
    "href": "00_welcome.html#visually",
    "title": "Welcome",
    "section": "Visually",
    "text": "Visually\n\n\n\n\n\nflowchart LR\n  B(Wordle)\n  B --&gt; C(SHA512)\n  C --&gt; D(Ed25519)\n  B --&gt; F(Graphs)\n  C --&gt; H(Merkle)\n  F --&gt; H\n  F --&gt; G(LCS)\n  H --&gt; I(VCS)\n  G --&gt; I\n  D --&gt; I\n\n\n\n\n\n\n\nLCS = Longest common subsequence, like diff\nVCS = Version Control System, like git",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#sha",
    "href": "00_welcome.html#sha",
    "title": "Welcome",
    "section": "SHA",
    "text": "SHA\n\nSHA Basics:\n\nCryptographic hash function family.\nInput data into fixed-size hash values.\n\nUse Cases:\n\nData integrity.\n\nLearning Objectives:\n\nReason about bits and bytes.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#ed25519",
    "href": "00_welcome.html#ed25519",
    "title": "Welcome",
    "section": "Ed25519",
    "text": "Ed25519\n\nEd25519 Basics:\n\nPublic-key signature system.\nBased on elliptic curve cryptography (specifically, Edwards curves).\nUses SHA-512 and Curve25519.\n\nUse Cases:\n\nConfidentiality and authentication.\n\nLearning Objectives:\n\nReason about numerical computing.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#graphs",
    "href": "00_welcome.html#graphs",
    "title": "Welcome",
    "section": "Graphs",
    "text": "Graphs\n\nIntroduce graphs as a way to:\n\nOrganize files\nCompare files\nTrack changes.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#longest-common-subseq.-lcs",
    "href": "00_welcome.html#longest-common-subseq.-lcs",
    "title": "Welcome",
    "section": "Longest Common Subseq. (LCS)",
    "text": "Longest Common Subseq. (LCS)\n\nLCS Basics:\n\nFind longest sequence of characters in the same relative order in two or more sequences, but not necessarily contiguously.\nOften solved using dynamic programming.\n\nUse Cases:\n\nFile comparison (e.g., diff utility).\n\nLearning Objectives:\n\nLinear data structure.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#merkle-trees",
    "href": "00_welcome.html#merkle-trees",
    "title": "Welcome",
    "section": "Merkle Trees",
    "text": "Merkle Trees\n\nMerkle Trees:\n\nTree structure using SHA for data integrity.\nHashes stored as nodes; pointers link them.\nLeaf nodes are RSA signatures!\n\nMerkle Trees are balanced\n\nHierarchical data structure embedded in linear data structure.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#file-system",
    "href": "00_welcome.html#file-system",
    "title": "Welcome",
    "section": "File System",
    "text": "File System\n\nThe file system a tree that cannot (easily) be embedded in a linear data structure.\n\nr\n├── DESCRIPTION\n├── Makefile\n├── NAMESPACE\n├── R\n│   └── vcd2df.R\n├── man\n│   └── vcd2df.Rd\n├── r\n├── vcd2df.Rcheck\n│   ├── 00_pkg_src\n│   │   └── vcd2df\n│   │       ├── DESCRIPTION\n│   │       ├── NAMESPACE\n│   │       ├── R\n│   │       │   └── vcd2df.R\n│   │       ├── build\n│   │       │   └── vignette.rds\n│   │       ├── inst\n│   │       │   └── doc\n│   │       │       ├── index.R\n│   │       │       ├── index.html\n│   │       │       └── index.qmd\n│   │       ├── man\n│   │       │   └── vcd2df.Rd\n│   │       └── vignettes\n│   │           └── index.qmd\n│   ├── 00check.log\n│   ├── 00install.out\n│   ├── Rdlatex.log\n│   ├── vcd2df\n│   │   ├── DESCRIPTION\n│   │   ├── INDEX\n│   │   ├── Meta\n│   │   │   ├── Rd.rds\n│   │   │   ├── features.rds\n│   │   │   ├── hsearch.rds\n│   │   │   ├── links.rds\n│   │   │   ├── nsInfo.rds\n│   │   │   ├── package.rds\n│   │   │   └── vignette.rds\n│   │   ├── NAMESPACE\n│   │   ├── R\n│   │   │   ├── vcd2df\n│   │   │   ├── vcd2df.rdb\n│   │   │   └── vcd2df.rdx\n│   │   ├── doc\n│   │   │   ├── index.R\n│   │   │   ├── index.html\n│   │   │   └── index.qmd\n│   │   ├── help\n│   │   │   ├── AnIndex\n│   │   │   ├── aliases.rds\n│   │   │   ├── paths.rds\n│   │   │   ├── vcd2df.rdb\n│   │   │   └── vcd2df.rdx\n│   │   └── html\n│   │       ├── 00Index.html\n│   │       └── R.css\n│   ├── vcd2df-Ex.R\n│   ├── vcd2df-Ex.Rout\n│   ├── vcd2df-Ex.pdf\n│   ├── vcd2df-manual.log\n│   └── vcd2df-manual.pdf\n├── vcd2df_1.0.1.tar.gz\n└── vignettes\n    └── index.qmd",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.html#vim",
    "href": "00_welcome.html#vim",
    "title": "Welcome",
    "section": "Vim",
    "text": "Vim\n\nYou should use vim or another console-based editor as a component of your learning in this class.\nThis will not be assessed (how can it be) but will likely be expected in a non-trivial subset of settings this course material will be useful.\nI will live-code in either vim or helix",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "00_welcome.rjs.html#announcements",
    "href": "00_welcome.rjs.html#announcements",
    "title": "Welcome",
    "section": "Announcements",
    "text": "Announcements\n\nWelcome to Systems in Rust\n\nWhat is in point of fact a systems cryptography course.\nBut it’s in Rust so you have to take it.\n\nAction Items:\n\nAccess the course webpage\nJoin the Discord!\n\nYou should have gotten an email…\n\nSet up Linux/Rust/Git."
  },
  {
    "objectID": "00_welcome.rjs.html#homework",
    "href": "00_welcome.rjs.html#homework",
    "title": "Welcome",
    "section": "Homework",
    "text": "Homework\n\nThe first homework, “Hello”, is ready after this class.\n\nIt is comically trivial.\nMostly makes sure you have everything set up.\n\nDue Friday, 1 Sept. at 1440 ET."
  },
  {
    "objectID": "00_welcome.rjs.html#today",
    "href": "00_welcome.rjs.html#today",
    "title": "Welcome",
    "section": "Today",
    "text": "Today\n\nLogistics\nOn Systems\nOn Rust\nOn Git\nCourse Sketch"
  },
  {
    "objectID": "00_welcome.rjs.html#it-me",
    "href": "00_welcome.rjs.html#it-me",
    "title": "Welcome",
    "section": "It me",
    "text": "It me\n\nName\n\n(Prof. )?Calvin\n\nCredentials\n\nB.A. Mathematics\nB.S., M.S., Ph.D. Computer Science\n\nPronouns\n\nthey/them"
  },
  {
    "objectID": "00_welcome.rjs.html#the-great-work",
    "href": "00_welcome.rjs.html#the-great-work",
    "title": "Welcome",
    "section": "The Great Work",
    "text": "The Great Work\n\nThesis Title\n\nMining Secure Behavior of Hardware Designs\n\nPlain English\n\nJust as there are bugs in code that makes software, modern hardware is also written in code and therefore may contain bugs. I find these bugs."
  },
  {
    "objectID": "00_welcome.rjs.html#course-format",
    "href": "00_welcome.rjs.html#course-format",
    "title": "Welcome",
    "section": "Course Format",
    "text": "Course Format\n\nLecture Monday\nLab Wednesday\nHomework due Friday 1440 PM ET\nIn-class midterm week of 10/06\nFinal project due whenever the final is scheduled."
  },
  {
    "objectID": "00_welcome.rjs.html#ungrading",
    "href": "00_welcome.rjs.html#ungrading",
    "title": "Welcome",
    "section": "Ungrading++",
    "text": "Ungrading++\n\nYour voices have been heard: &gt; I think failing my systems class was the best thing that happened to me.\n\n\nThis course demanded strong self-motivation due to its lax grading standards, which I did not bring to the table. Thus, I didn’t learn as much as I might’ve if grading mattered more."
  },
  {
    "objectID": "00_welcome.rjs.html#proposal",
    "href": "00_welcome.rjs.html#proposal",
    "title": "Welcome",
    "section": "Proposal",
    "text": "Proposal\n\nI will offer two option\n\nUngrading\nSpecification Grading\n\nVote as a class (anonymously)\nI update syllabus before add/drop ends."
  },
  {
    "objectID": "00_welcome.rjs.html#ungrading-1",
    "href": "00_welcome.rjs.html#ungrading-1",
    "title": "Welcome",
    "section": "1. Ungrading",
    "text": "1. Ungrading\n\nI provide autograders for all assignments except final.\n\nOr a reference solution with a rubric, if automated testing is too weird.\nI will have a final reference solution but will at most share snippets individually.\n\nYou do whatever you want.\nEnrolled students get an A."
  },
  {
    "objectID": "00_welcome.rjs.html#specification-grading",
    "href": "00_welcome.rjs.html#specification-grading",
    "title": "Welcome",
    "section": "2. Specification Grading",
    "text": "2. Specification Grading\n\nAll the rage. I was never fan but tell me what you think.\nBasically, I will assign some stuff but you don’t have to do all of it perfectly.\n\nNo partial credit, everything is yes/no grading.\n\nI took distributions over final, midterm, and Lab/HW"
  },
  {
    "objectID": "00_welcome.rjs.html#it-pays-to-get-as",
    "href": "00_welcome.rjs.html#it-pays-to-get-as",
    "title": "Welcome",
    "section": "It pays to get A’s",
    "text": "It pays to get A’s\n\n\n\nGrade\nRequirements\n\n\n\n\nA\nFinal meets spec\n\n\nA\n90% ave HW/Lab/Midterm, Final compiles\n\n\nA-\n90% ave HW/Lab, Midterm/Final compile\n\n\nA-\nMidterm meets spec, Final compiles"
  },
  {
    "objectID": "00_welcome.rjs.html#but-bs-are-the-knees",
    "href": "00_welcome.rjs.html#but-bs-are-the-knees",
    "title": "Welcome",
    "section": "But B’s are the Knees",
    "text": "But B’s are the Knees\n\n\n\nGrade\nRequirements\n\n\n\n\nB+\n90% ave HW/Lab, Midterm compiles\n\n\nB\n80% ave HW/Lab, Midterm compiles\n\n\nB-\n80% ave HW/Lab"
  },
  {
    "objectID": "00_welcome.rjs.html#these-may-earn-degrees",
    "href": "00_welcome.rjs.html#these-may-earn-degrees",
    "title": "Welcome",
    "section": "These may (???) earn degrees",
    "text": "These may (???) earn degrees\n\n\n\nGrade\nRequirements\n\n\n\n\nC\n80% ave Lab\n\n\nD\n60% ave Lab\n\n\nF\nAnything else"
  },
  {
    "objectID": "00_welcome.rjs.html#lab-grading",
    "href": "00_welcome.rjs.html#lab-grading",
    "title": "Welcome",
    "section": "Lab Grading",
    "text": "Lab Grading\n\nA (=100%)\n\nMeets spec by end of class\n\nB (=90%)\n\nCompiles at end of class\n\nCan be turned into an executable.\n\n\nF (=0%)\n\nAnything else"
  },
  {
    "objectID": "00_welcome.rjs.html#hw-grading",
    "href": "00_welcome.rjs.html#hw-grading",
    "title": "Welcome",
    "section": "HW Grading",
    "text": "HW Grading\n\nA (=100%)\n\nOn time\nPasses autograder.\n\nB (=90%)\n\nOn time\nCompiles\n\nCan be turned into an executable.\n\n\nF (=0%)\n\nAnything else"
  },
  {
    "objectID": "00_welcome.rjs.html#final",
    "href": "00_welcome.rjs.html#final",
    "title": "Welcome",
    "section": "Final",
    "text": "Final\n\nCreate, document, and publish a self-hosting version control system.\nEntire codebase in Rust.\nMinimum specifications:\n\nSupport nested directory structures.\nSupport text-based files (.rs, .py, .txt)\nAllow reverting to named changes (commits).\nCompleted by you and at most a partner."
  },
  {
    "objectID": "00_welcome.rjs.html#late-work-policy",
    "href": "00_welcome.rjs.html#late-work-policy",
    "title": "Welcome",
    "section": "Late Work Policy",
    "text": "Late Work Policy\n\nLate work is not accepted.\n\nTurning in anything at all for on 90% of assignments yields B.\nMiss 100% of assignments and midterm but do the final for an A."
  },
  {
    "objectID": "00_welcome.rjs.html#ai-policy",
    "href": "00_welcome.rjs.html#ai-policy",
    "title": "Welcome",
    "section": "AI Policy",
    "text": "AI Policy\n\nI would be shocked if it is helpful to you.\nIf you think it is helpful, that is probably not a good sign.\nYou can use it (I wouldn’t)"
  },
  {
    "objectID": "00_welcome.rjs.html#collaboration-policy",
    "href": "00_welcome.rjs.html#collaboration-policy",
    "title": "Welcome",
    "section": "Collaboration Policy",
    "text": "Collaboration Policy\n\nNon-final:\n\nAny size group via enthusiastic consent.\nTurn in your own code/copy.\n\nFinal:\n\nPartners via enthusiastic consent.\nTurn in your own code/copy."
  },
  {
    "objectID": "00_welcome.rjs.html#vote",
    "href": "00_welcome.rjs.html#vote",
    "title": "Welcome",
    "section": "Vote",
    "text": "Vote\n\nIf there’s not a Forms link here I should add one quickly."
  },
  {
    "objectID": "00_welcome.rjs.html#the-hard-part",
    "href": "00_welcome.rjs.html#the-hard-part",
    "title": "Welcome",
    "section": "The Hard Part",
    "text": "The Hard Part\n\nAfter ~10 years of systems research I’ve convinced myself only two things really matter:\n\nPointers, and\nRecursion\n\nRecursion isn’t too bad…\n\n&gt;&gt;&gt; exp = lambda b, n : b if n == 1 else b*exp(b,n-1)\n&gt;&gt;&gt; exp(2,8)\n256"
  },
  {
    "objectID": "00_welcome.rjs.html#pointers",
    "href": "00_welcome.rjs.html#pointers",
    "title": "Welcome",
    "section": "Pointers",
    "text": "Pointers\n\nPointers are a beast, but without them nothing makes sense!\n\n\n\n&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; def addx():\n...     x += 1\n...\n&gt;&gt;&gt; addx()\nUnboundLocalError:\n&lt;blah blah blah error messages&gt;\n\n&gt;&gt;&gt; x = [1]\n&gt;&gt;&gt; def addx():\n...     x[0] += 1\n...\n&gt;&gt;&gt; addx()\n&gt;&gt;&gt; x\n[2]"
  },
  {
    "objectID": "00_welcome.rjs.html#insight",
    "href": "00_welcome.rjs.html#insight",
    "title": "Welcome",
    "section": "Insight",
    "text": "Insight\n\nDefinition:\n\nPointers: Variables that store memory addresses.\nRecursion: Functions calling themselves to solve sub-problems.\n\nImportance:\n\nCore to efficient algorithms and memory management in low-level programming."
  },
  {
    "objectID": "00_welcome.rjs.html#python-and-pointers",
    "href": "00_welcome.rjs.html#python-and-pointers",
    "title": "Welcome",
    "section": "Python and Pointers",
    "text": "Python and Pointers\n\nWhy not .py (.js, .java, .cs, .cpp, etc)?\n\nThese languages abstract memory.\nThis abstraction makes computation unclear\nThis lack of clarity:\n\nAdversely impacts education\nComplicates low-level design\nLeads to low performance\n\nGood languages (except Java) but not for us"
  },
  {
    "objectID": "00_welcome.rjs.html#rust-and-pointers",
    "href": "00_welcome.rjs.html#rust-and-pointers",
    "title": "Welcome",
    "section": "Rust and Pointers",
    "text": "Rust and Pointers\n\nRust:\n\nObscures pointers, but…\nDoes not obscure memory.\n\nThis is good!\n\nMemory matters, but pointers are historical accident.\n\nYou should probably use Rust in every application where correctness or performance matters."
  },
  {
    "objectID": "00_welcome.rjs.html#rust-and-recursion",
    "href": "00_welcome.rjs.html#rust-and-recursion",
    "title": "Welcome",
    "section": "Rust and Recursion",
    "text": "Rust and Recursion\n\nSeparately, Rust is built on one of the most exciting ongoing computer science research efforts:\nLLVM (stands for LLVM)\nBasically, a way of turning human-readable code into machine-executable code.\n\nVery good at turning recursion into iteration and/or vice versa.\n\nSo Rust experiences less costs on recursion than many other languages."
  },
  {
    "objectID": "00_welcome.rjs.html#git",
    "href": "00_welcome.rjs.html#git",
    "title": "Welcome",
    "section": "Git",
    "text": "Git\n\nIf you don’t know git, you should soon.\nGit corresponds, like the others, to a command: git\n\nIt is common now to use other techniques, but the command remains extremely stable\n\nQuoth GitHub, the first and greatest of the collaboration tools:\n\n\nIf you want a lot of control and flexibility, you can use the command line."
  },
  {
    "objectID": "00_welcome.rjs.html#git-example",
    "href": "00_welcome.rjs.html#git-example",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nSo basically, you have things called repositories or “repos”\n\n\n\n\n\n\nflowchart LR\n  A(My ️‍🔥 code repo)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-1",
    "href": "00_welcome.rjs.html#git-example-1",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nThen you realize you wrote an infinite loop so you update it\n\n\n\n\n\n\nflowchart LR\n  A(My ️‍🔥 code repo v0 ) --&gt; B(My ️‍🔥 code repo v1)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-2",
    "href": "00_welcome.rjs.html#git-example-2",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nThen you come to class and realize your code is on your gaming rig in your apartment.\n\n\n\n\n\n\nflowchart LR\n  A(&lt;s&gt;My ️‍🔥 code repo v0&lt;/s&gt;) --&gt; B(&lt;s&gt;My ️‍🔥 code repo v1&lt;/s&gt;)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-3",
    "href": "00_welcome.rjs.html#git-example-3",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nSo you save your code on GitHub\n\nGH = GitHub, GR = Gaming Rig\n\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GH.‍🔥 v0)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-4",
    "href": "00_welcome.rjs.html#git-example-4",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nBut you realize you didn’t sanitize your inputs so you update again.\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-5",
    "href": "00_welcome.rjs.html#git-example-5",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nThen you have class again and grab the GitHub version onto your LT = Laptop\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-6",
    "href": "00_welcome.rjs.html#git-example-6",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nYou notice it has the bug so you fix it again on your laptop in almost the same way\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-7",
    "href": "00_welcome.rjs.html#git-example-7",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nAnd save that back to GitHub then head back home to play Nethack on your 12000USD Gaming PC\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-8",
    "href": "00_welcome.rjs.html#git-example-8",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nYou realize you also added some ASCII art and try to send that to GitHub\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)\n  G --&gt; H(GH.‍🔥 v2)\n  C --&gt; H"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-9",
    "href": "00_welcome.rjs.html#git-example-9",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nTwo arrows into one thing is a merge conflict and out-of-scope for now.\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)\n  G --&gt; H{💥}\n  C --&gt; H"
  },
  {
    "objectID": "00_welcome.rjs.html#git-example-10",
    "href": "00_welcome.rjs.html#git-example-10",
    "title": "Welcome",
    "section": "Git Example",
    "text": "Git Example\n\nBasically versions of code can live in more than one place.\n\nAh, versions, our old friend…\n\n\n\n\n\n\n\nflowchart LR\n  A(GR.️‍🔥 v0) --&gt; B(GR.️‍🔥 v1)\n  B --&gt; C(GR.️‍🔥 v2)\n  B --&gt; D(GH.‍🔥 v0)\n  D --&gt; E(LT.‍🔥 v0)\n  E --&gt; F(LT.‍🔥 v1)\n  F --&gt; G(GH.‍🔥 v1)\n  G --&gt; H{💥}\n  C --&gt; H"
  },
  {
    "objectID": "00_welcome.rjs.html#visually",
    "href": "00_welcome.rjs.html#visually",
    "title": "Welcome",
    "section": "Visually",
    "text": "Visually\n\n\n\n\n\nflowchart LR\n  B(Wordle)\n  B --&gt; C(SHA512)\n  C --&gt; D(Ed25519)\n  B --&gt; F(Graphs)\n  C --&gt; H(Merkle)\n  F --&gt; H\n  F --&gt; G(LCS)\n  H --&gt; I(VCS)\n  G --&gt; I\n  D --&gt; I\n\n\n\n\n\n\n\nLCS = Longest common subsequence, like diff\nVCS = Version Control System, like git"
  },
  {
    "objectID": "00_welcome.rjs.html#sha",
    "href": "00_welcome.rjs.html#sha",
    "title": "Welcome",
    "section": "SHA",
    "text": "SHA\n\nSHA Basics:\n\nCryptographic hash function family.\nInput data into fixed-size hash values.\n\nUse Cases:\n\nData integrity.\n\nLearning Objectives:\n\nReason about bits and bytes."
  },
  {
    "objectID": "00_welcome.rjs.html#ed25519",
    "href": "00_welcome.rjs.html#ed25519",
    "title": "Welcome",
    "section": "Ed25519",
    "text": "Ed25519\n\nEd25519 Basics:\n\nPublic-key signature system.\nBased on elliptic curve cryptography (specifically, Edwards curves).\nUses SHA-512 and Curve25519.\n\nUse Cases:\n\nConfidentiality and authentication.\n\nLearning Objectives:\n\nReason about numerical computing."
  },
  {
    "objectID": "00_welcome.rjs.html#graphs",
    "href": "00_welcome.rjs.html#graphs",
    "title": "Welcome",
    "section": "Graphs",
    "text": "Graphs\n\nIntroduce graphs as a way to:\n\nOrganize files\nCompare files\nTrack changes."
  },
  {
    "objectID": "00_welcome.rjs.html#longest-common-subseq.-lcs",
    "href": "00_welcome.rjs.html#longest-common-subseq.-lcs",
    "title": "Welcome",
    "section": "Longest Common Subseq. (LCS)",
    "text": "Longest Common Subseq. (LCS)\n\nLCS Basics:\n\nFind longest sequence of characters in the same relative order in two or more sequences, but not necessarily contiguously.\nOften solved using dynamic programming.\n\nUse Cases:\n\nFile comparison (e.g., diff utility).\n\nLearning Objectives:\n\nLinear data structure."
  },
  {
    "objectID": "00_welcome.rjs.html#merkle-trees",
    "href": "00_welcome.rjs.html#merkle-trees",
    "title": "Welcome",
    "section": "Merkle Trees",
    "text": "Merkle Trees\n\nMerkle Trees:\n\nTree structure using SHA for data integrity.\nHashes stored as nodes; pointers link them.\nLeaf nodes are RSA signatures!\n\nMerkle Trees are balanced\n\nHierarchical data structure embedded in linear data structure."
  },
  {
    "objectID": "00_welcome.rjs.html#file-system",
    "href": "00_welcome.rjs.html#file-system",
    "title": "Welcome",
    "section": "File System",
    "text": "File System\n\nThe file system a tree that cannot (easily) be embedded in a linear data structure.\n\nr\n├── DESCRIPTION\n├── Makefile\n├── NAMESPACE\n├── R\n│   └── vcd2df.R\n├── man\n│   └── vcd2df.Rd\n├── r\n├── vcd2df.Rcheck\n│   ├── 00_pkg_src\n│   │   └── vcd2df\n│   │       ├── DESCRIPTION\n│   │       ├── NAMESPACE\n│   │       ├── R\n│   │       │   └── vcd2df.R\n│   │       ├── build\n│   │       │   └── vignette.rds\n│   │       ├── inst\n│   │       │   └── doc\n│   │       │       ├── index.R\n│   │       │       ├── index.html\n│   │       │       └── index.qmd\n│   │       ├── man\n│   │       │   └── vcd2df.Rd\n│   │       └── vignettes\n│   │           └── index.qmd\n│   ├── 00check.log\n│   ├── 00install.out\n│   ├── Rdlatex.log\n│   ├── vcd2df\n│   │   ├── DESCRIPTION\n│   │   ├── INDEX\n│   │   ├── Meta\n│   │   │   ├── Rd.rds\n│   │   │   ├── features.rds\n│   │   │   ├── hsearch.rds\n│   │   │   ├── links.rds\n│   │   │   ├── nsInfo.rds\n│   │   │   ├── package.rds\n│   │   │   └── vignette.rds\n│   │   ├── NAMESPACE\n│   │   ├── R\n│   │   │   ├── vcd2df\n│   │   │   ├── vcd2df.rdb\n│   │   │   └── vcd2df.rdx\n│   │   ├── doc\n│   │   │   ├── index.R\n│   │   │   ├── index.html\n│   │   │   └── index.qmd\n│   │   ├── help\n│   │   │   ├── AnIndex\n│   │   │   ├── aliases.rds\n│   │   │   ├── paths.rds\n│   │   │   ├── vcd2df.rdb\n│   │   │   └── vcd2df.rdx\n│   │   └── html\n│   │       ├── 00Index.html\n│   │       └── R.css\n│   ├── vcd2df-Ex.R\n│   ├── vcd2df-Ex.Rout\n│   ├── vcd2df-Ex.pdf\n│   ├── vcd2df-manual.log\n│   └── vcd2df-manual.pdf\n├── vcd2df_1.0.1.tar.gz\n└── vignettes\n    └── index.qmd"
  },
  {
    "objectID": "00_welcome.rjs.html#vim",
    "href": "00_welcome.rjs.html#vim",
    "title": "Welcome",
    "section": "Vim",
    "text": "Vim\n\nYou should use vim or another console-based editor as a component of your learning in this class.\nThis will not be assessed (how can it be) but will likely be expected in a non-trivial subset of settings this course material will be useful.\nI will live-code in either vim or helix"
  },
  {
    "objectID": "01_rustup.html",
    "href": "01_rustup.html",
    "title": "Rustup",
    "section": "",
    "text": "Lab Day\n\nSet up environment",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#announcements",
    "href": "01_rustup.html#announcements",
    "title": "Rustup",
    "section": "",
    "text": "Lab Day\n\nSet up environment",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#homework",
    "href": "01_rustup.html#homework",
    "title": "Rustup",
    "section": "Homework",
    "text": "Homework\n\nThe first homework, “Hi world”, is ready after this class.\n\nIt is comically trivial.\nMostly makes sure you have everything set up.\n\nDue Friday, 1 Sept. at 1440 ET.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#today",
    "href": "01_rustup.html#today",
    "title": "Rustup",
    "section": "Today",
    "text": "Today\n\nSet up your operating system, if it is not UNIX-based.\nInstall Rust.\nInstall Git\nBonus!\n\nInstall Vim, Neovim, or Helix.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#windows",
    "href": "01_rustup.html#windows",
    "title": "Rustup",
    "section": "Windows",
    "text": "Windows\n\nWindows usage is not supported in the course.\nIf you are using Windows, you must:\n\nUse Windows Subsystem for Linux (Recommended)\nUse Docker or Podman\nUse Git Bash or Mingw in some other way (Discouraged)\nUse Cygwin (Discouraged)\n\n\n\n\nWSL 2\n\nWindows Subsystem for Linux\nFollow this guide\nNotes:\n\nUse WSL 2. It is the default.\nI recommend using Ubuntu distribution. You will be asked.\nI prefer Windows Terminal.\n\nWindows key -&gt; “Terminal” -&gt; Enter -&gt; wsl\n\n\n\n\n\n\nDocker or Podman\n\nBoth will require WSL 2, but install for you\nDocker has better Windows support, I believe Podman is seeing more use.\nFollow this guide.\nNotes:\n\nUse WSL 2 backend.\nYou are responsible for teaching yourself containers.\nSlides for last year.\n\n\n\n\n\nGit Bash\n\nI have set up guide for Git Bash for another course\nThis seemed like it could work. I won’t be checking.\n\n\n\n\nCygwin\n\nI have no idea how Cygwin works but it’s pretty cool.\nBasically no longer in use due to WSL 2 and Docker.\nFollow this guide",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#rustup",
    "href": "01_rustup.html#rustup",
    "title": "Rustup",
    "section": "Rustup",
    "text": "Rustup\n\nOn your UNIX-based OS:\n\nLinux\nMacOS\nWSL 2\nFreeBSD\n\nOpen the command line and run the following:\n\ncurl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n\nRead more",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#verify",
    "href": "01_rustup.html#verify",
    "title": "Rustup",
    "section": "Verify",
    "text": "Verify\n\nTo ensure you have a Rust installation, run:\n\nrustc --version\n\nAt time of slide creation, I saw this version:\n\nrustc 1.87.0 (17067e9ac 2025-05-09)",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#git-installation",
    "href": "01_rustup.html#git-installation",
    "title": "Rustup",
    "section": "Git Installation",
    "text": "Git Installation\n\nEnsure you have a Git installation:\n\nWindows:\n\nLaunch WSL\n\nwsl ~\n\nInstall git within WSL\n\nsudo apt install git\nMacOS:\n\nLaunch the terminal and then:\n\nxcode-select --install",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#verify-1",
    "href": "01_rustup.html#verify-1",
    "title": "Rustup",
    "section": "Verify",
    "text": "Verify\n\nVerify install via:\n\ngit --version\n\nI had:\n\ngit version 2.34.1",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#account",
    "href": "01_rustup.html#account",
    "title": "Rustup",
    "section": "Account",
    "text": "Account\n\nEnsure you have an account on GitHub.\nRead More",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#repository",
    "href": "01_rustup.html#repository",
    "title": "Rustup",
    "section": "Repository",
    "text": "Repository\n\nCreate a repository for this class.\nRequirements\n\nName is 271rs\nUse this template\nMay be public or private to you and me (cd-public).\n\nRead more\n\nMust email me a link to your repository from your @willamette.edu email.\n\nhttps://github.com/cd-example/271rs",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#remote",
    "href": "01_rustup.html#remote",
    "title": "Rustup",
    "section": "Remote",
    "text": "Remote\n\nWe have now created a remote repository on GitHub.\n\nRemote as in “not on our computer we are using right now”\nAs in “on a web server somewhere”\n\nNo we will make a local repository on our own computer.\nThen connect them!",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#security-concession",
    "href": "01_rustup.html#security-concession",
    "title": "Rustup",
    "section": "Security Concession",
    "text": "Security Concession\n\nWe will use SSH, the “Secure Shell Protocol”\nIt is supported by git/GitHub and all major operating systems.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#keygen",
    "href": "01_rustup.html#keygen",
    "title": "Rustup",
    "section": "Keygen",
    "text": "Keygen\n\nSSH is based around having “keys”\n\nUnder the hood, these are special numbers with special properties related to primes, basically.\n\nWe generate a special unique key we can use as a password or signature.\n\nssh-keygen",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#prompts",
    "href": "01_rustup.html#prompts",
    "title": "Rustup",
    "section": "Prompts",
    "text": "Prompts\n\nThis example uses (1) the default location and (2) no passphrase.\n\nThis is less secure but easier to manage.\nWork in a passphrase as soon as you can!\n\n\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/home/calvin/.ssh/id_ed25519): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/calvin/.ssh/id_ed25519\n$ cat ~/.ssh/id_ed25519.pub \nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIE5cnx/tgBp8v/LnuHz28evmnRPrnlz3cvYaAAM4G0ik calvin@calvin-Precision-3490\n\nYou now have a key! Let’s find a lock.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#github-1",
    "href": "01_rustup.html#github-1",
    "title": "Rustup",
    "section": "GitHub",
    "text": "GitHub\n\nThe purpose of this exercise is to connect to GitHub!\nWe will mostly use git for that, but we can check if we have a connection easily:\n\nssh -T git@github.com\n\nRead more",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#example",
    "href": "01_rustup.html#example",
    "title": "Rustup",
    "section": "Example",
    "text": "Example\n\nThis is what I see:\n\nThe authenticity of host 'github.com (140.82.116.3)' can't be established.\nED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])?\n\nBefore saying “yes” or “no” compare versus the “public SSH key fingerprints”\n\nCheck them here\n\nBy default, the modern keygen uses “Ed25519” so compare those keys, and click “yes” if they match!",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#connecting",
    "href": "01_rustup.html#connecting",
    "title": "Rustup",
    "section": "Connecting",
    "text": "Connecting\n\nAfter confirming the key correctness, you will likely see this.\n\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added 'github.com' (ED25519) to the list of known hosts.\ngit@github.com: Permission denied (publickey).",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#one-way",
    "href": "01_rustup.html#one-way",
    "title": "Rustup",
    "section": "One Way",
    "text": "One Way\n\nNow we have instructed our computer to trust GitHub.\nTo save our code to GitHub, we must also get GitHub to trust our computer.\nWe generated our key, now we must match it to our lock on GitHub!",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#github-pt-1",
    "href": "01_rustup.html#github-pt-1",
    "title": "Rustup",
    "section": "GitHub pt 1",
    "text": "GitHub pt 1\n\nWe follow this guide\nReturn to GitHub and in the top right click your profile.\n\nFor me, a picture of myself.\n\nScroll down to “Settings” and click.\n\nLast in 2nd grouping, for me.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#github-pt-2",
    "href": "01_rustup.html#github-pt-2",
    "title": "Rustup",
    "section": "GitHub pt 2",
    "text": "GitHub pt 2\n\nWithin settings left-side menu click “SSH and GPG keys”\n\nMiddle of 2nd group (Access) for me.\n\nWithin the center block click New SSH key in the top right of the block.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#prompt",
    "href": "01_rustup.html#prompt",
    "title": "Rustup",
    "section": "Prompt",
    "text": "Prompt\n\nI get a page “Add new SSH Key”.\nI provide a title (like “For 271rs class” or “Laptop”)\nNow we’ll get our key from our system to use.\nRecall we previously generated a key to the default location, like /home/calvin/.ssh/id_ed25519\n\nIf you don’t remember, just type ssh-keygen and it’ll show you.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#copypaste",
    "href": "01_rustup.html#copypaste",
    "title": "Rustup",
    "section": "Copy/Paste",
    "text": "Copy/Paste\n\nTo get the key for GitHub, we can can\n\ncat that file in the command line\nCopy from the command line\nPaste into the GitHub “Key” field\nClick Add SSH key",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#ssh-test",
    "href": "01_rustup.html#ssh-test",
    "title": "Rustup",
    "section": "SSH Test",
    "text": "SSH Test\n\nAfter adding the key to the account, I confirm via SSH like so:\n\nssh -T git@github.com\n\nI see the following:\n\nHi cd-public! You've successfully authenticated, but GitHub does not provide shell access.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#clone-pt1",
    "href": "01_rustup.html#clone-pt1",
    "title": "Rustup",
    "section": "Clone pt1",
    "text": "Clone pt1\n\nNavigate to the repository webpage, like github.com/cd-example/271rs\nFind the &lt;&gt; Code button in the top right.\nClick it:\n\nSelect the top “local” tab (for or local repository)\nSelect the SSH option (for our SSH key)\nCopy the name, like\n\n\n\ngit@github.com:cd-example/271rs",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#clone-pt2",
    "href": "01_rustup.html#clone-pt2",
    "title": "Rustup",
    "section": "Clone pt2",
    "text": "Clone pt2\n\nWithin terminal, where you keep files for this class.\n\nProbably just do\n\ncd ~\ngit clone git@github.com:cd-example/271rs \nVerify by listing the contents of the 271rs directory via:\n\nls 271rs\n\nYou should see a README.md and a LICENSE",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#enter-the-repository",
    "href": "01_rustup.html#enter-the-repository",
    "title": "Rustup",
    "section": "Enter the Repository",
    "text": "Enter the Repository\n\nTo change the directory within which you are working in the commandline from your home to the repository for this class, do:\n\ncd 271rs\n\nVerify the change via\n\npwd\n\nThis will give the full address of your class folder, ending in 271rs",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#today-1",
    "href": "01_rustup.html#today-1",
    "title": "Rustup",
    "section": "Today",
    "text": "Today\n\nTo complete the lab today, add a 01/rustup.md file to your 271rs\nSend me a link to a 271rs repository I have permission to view.\n\nTo be clear:\n\nI must receive an email with a hyperlink to a GitHub repository.\nI must have view access to public repository or a repository on which I am added as a collaborator.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#names-matter",
    "href": "01_rustup.html#names-matter",
    "title": "Rustup",
    "section": "Names Matter",
    "text": "Names Matter\n\nYour submission will be tested be a script.\n\nThe file must be named rustup.md\nIt must be in a folder named 01\nThe repository must be named 271rs\nNo other arrangement constitutes a lab submission.\nThe contents of rustup.md are not relevant.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#file-editor",
    "href": "01_rustup.html#file-editor",
    "title": "Rustup",
    "section": "File Editor",
    "text": "File Editor\n\nLet’s make a new file.\nI recommend using vim, neovim, or helix.\nProbably already have it on MacOS.\nOn WSL install via\n\nsudo apt install vim",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#file-editting",
    "href": "01_rustup.html#file-editting",
    "title": "Rustup",
    "section": "File Editting",
    "text": "File Editting\n\nTo create said file, type vim then the name of the file.\nIf you just cloned 271rs, there will be a 271rs folder into which you should create a 01 folder.\n\nStands for week 0, day 1 ```{.bash} vim 01/rustup.md",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#using-vim",
    "href": "01_rustup.html#using-vim",
    "title": "Rustup",
    "section": "Using vim",
    "text": "Using vim\n\nThere’s more to life that using vim but basically:\n\nPress i to enter “insert mode” (so you can type)\nWhen you are done typing, press ESC then type :x to save and exit.\nRead more\n\nJust type some notes you have from today.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#check-status",
    "href": "01_rustup.html#check-status",
    "title": "Rustup",
    "section": "Check Status",
    "text": "Check Status\n\nYou have now added a new file to your repository.\nI consult status often, yours will likely look like this:\n\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        01/rustup.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#add",
    "href": "01_rustup.html#add",
    "title": "Rustup",
    "section": "Add",
    "text": "Add\n\nThe first thing we not is that there are “Untracked files”\nWhile we made a hello.py and have it in our hello-world directory, it isn’t yet “tracked” by git!\nBy default, git only keeps track of what we tell it to!\nSo, we tell it to track our code!\n\ngit add 01/rustup.md",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#status",
    "href": "01_rustup.html#status",
    "title": "Rustup",
    "section": "Status",
    "text": "Status\n\nI check status again\n\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   01_rustup.md",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#commit",
    "href": "01_rustup.html#commit",
    "title": "Rustup",
    "section": "Commit",
    "text": "Commit\n\nWith git now aware of hello.py, we need to commit or changes for git to save them.\n\nSimilar to saving files to the file system.\nThere are, of course, ways to automate this.\n\nThis probably won’t work at first (next slide!) but try:\n\ngit commit -a -m \"first commit\"",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#a--m",
    "href": "01_rustup.html#a--m",
    "title": "Rustup",
    "section": "“-a -m”",
    "text": "“-a -m”\n\nCommits require a commit message (like a version name or number) so specify with -m\nUsually I provide -a to commit “all” files.\nI usually make some effort to make my life easier with specific commit messages, perhaps listing:\n\nWhat I’m trying to do\nWhy?",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#config",
    "href": "01_rustup.html#config",
    "title": "Rustup",
    "section": "Config",
    "text": "Config\n\nIf you haven’t used git on your system before, you’ll have to tell git who you are.\n\nIn git there are no anonymous changes - you have to sign every change you make.\n\nYou’ll be prompted to provide something like this:\n\ngit config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#my-name",
    "href": "01_rustup.html#my-name",
    "title": "Rustup",
    "section": "My name",
    "text": "My name\n\nI often include which computer I’m using in my name and also don’t use a real email address.\n\nMy GitHub account is already attached to an email address, so I use a throwaway for commits.\n\n\ngit config --global user.email \"prof_calvin@c89&gt;rs.edu\"\ngit config --global user.name \"Calvin for Class\"",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#looping-back",
    "href": "01_rustup.html#looping-back",
    "title": "Rustup",
    "section": "Looping Back",
    "text": "Looping Back\n\nOnce you have provided your identity, you can successfuly complete a commit.\n\ngit commit -a -m \"first commit\"\n\nThis will:\n\nMark current code as a version, named by your commit message.\n\nThis won’t:\n\nDo anything to GitHub.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#push",
    "href": "01_rustup.html#push",
    "title": "Rustup",
    "section": "Push",
    "text": "Push\n\nA commit saves changing on your computer.\nTo save on GitHub, push changes to the cloud\n\ngit push\n\nAfter a moment and some diagnostic text, you should be able to see your code on GitHub, possibly after refreshing the page!",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#diagnostics",
    "href": "01_rustup.html#diagnostics",
    "title": "Rustup",
    "section": "Diagnostics",
    "text": "Diagnostics\n\nFor example, you might see the following:\n\nEnumerating objects: 27, done.\nCounting objects: 100% (27/27), done.\nDelta compression using up to 22 threads\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (16/16), 98.54 KiB | 2.46 MiB/s, done.\nTotal 16 (delta 11), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (11/11), completed with 10 local objects.\nTo github.com:cd-example/271rs.git\n   adaa3a7..ba3c794  main -&gt; main",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#verify-2",
    "href": "01_rustup.html#verify-2",
    "title": "Rustup",
    "section": "Verify",
    "text": "Verify\n\nEnsure you have a 01/rustup.md\nEmail me.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#easier-after",
    "href": "01_rustup.html#easier-after",
    "title": "Rustup",
    "section": "Easier After",
    "text": "Easier After\n\nA lot of what we did, we only have to do once:\n\ngit config\nssh-keygen\nset origin\n\nMany are special cases:\n\nOnly have to make new repositories for… new repositories (likely projects)\nOnly have to git add for new files.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#quick-example",
    "href": "01_rustup.html#quick-example",
    "title": "Rustup",
    "section": "Quick Example",
    "text": "Quick Example\n\nLet’s add 02/hi_world.rs\nWe’ll create a new file at the command line.\n\nvim 02/hi_world.rs\n\nAdd any text\n\n\n\nhi_world.rs\n\nWait I don't know rust yet.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#add-commit-push",
    "href": "01_rustup.html#add-commit-push",
    "title": "Rustup",
    "section": "Add, Commit, Push",
    "text": "Add, Commit, Push\n\nTo get the code onto Github, add to the repo:\n\ngit add hi_world.rs \n\nCommit changes to a version:\n\ngit commit -a -m \"You say hello, I say goodbye\"\n\nPush to GitHub\n\ngit push\n\nAnd that’s that!",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#altogether",
    "href": "01_rustup.html#altogether",
    "title": "Rustup",
    "section": "Altogether",
    "text": "Altogether\n\nFor a single copy/paste\n\ngit add bye.py\ngit commit -a -m \"You say hello, I say goodbye\"\ngit push\n\nIf it works, you’ll see the change on GitHub!",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#again",
    "href": "01_rustup.html#again",
    "title": "Rustup",
    "section": "Again",
    "text": "Again\n\nPerhaps we wish to be more correct with a well-formed Rust comment.\n\n\n\nbye.py\n\n// TODO: Homework 0 \n\n\nWe’ll learn Rust latter.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#no-add",
    "href": "01_rustup.html#no-add",
    "title": "Rustup",
    "section": "No Add",
    "text": "No Add\n\nDon’t need an add this time!\n\ngit commit -a -m \"Rust comment\"\ngit push",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.html#pulling",
    "href": "01_rustup.html#pulling",
    "title": "Rustup",
    "section": "Pulling",
    "text": "Pulling\n\nTo get remote changes reflected locally, simply use\n\ngit pull\n\nThis will be how assignment feedback is distributed.\nJust git pull every time you start working, basically.\nAlso good when you are working on multiple devices.",
    "crumbs": [
      "Rustup"
    ]
  },
  {
    "objectID": "01_rustup.rjs.html#announcements",
    "href": "01_rustup.rjs.html#announcements",
    "title": "Rustup",
    "section": "Announcements",
    "text": "Announcements\n\nLab Day\n\nSet up environment"
  },
  {
    "objectID": "01_rustup.rjs.html#homework",
    "href": "01_rustup.rjs.html#homework",
    "title": "Rustup",
    "section": "Homework",
    "text": "Homework\n\nThe first homework, “Hi world”, is ready after this class.\n\nIt is comically trivial.\nMostly makes sure you have everything set up.\n\nDue Friday, 1 Sept. at 1440 ET."
  },
  {
    "objectID": "01_rustup.rjs.html#today",
    "href": "01_rustup.rjs.html#today",
    "title": "Rustup",
    "section": "Today",
    "text": "Today\n\nSet up your operating system, if it is not UNIX-based.\nInstall Rust.\nInstall Git\nBonus!\n\nInstall Vim, Neovim, or Helix."
  },
  {
    "objectID": "01_rustup.rjs.html#windows",
    "href": "01_rustup.rjs.html#windows",
    "title": "Rustup",
    "section": "Windows",
    "text": "Windows\n\nWindows usage is not supported in the course.\nIf you are using Windows, you must:\n\nUse Windows Subsystem for Linux (Recommended)\nUse Docker or Podman\nUse Git Bash or Mingw in some other way (Discouraged)\nUse Cygwin (Discouraged)"
  },
  {
    "objectID": "01_rustup.rjs.html#rustup",
    "href": "01_rustup.rjs.html#rustup",
    "title": "Rustup",
    "section": "Rustup",
    "text": "Rustup\n\nOn your UNIX-based OS:\n\nLinux\nMacOS\nWSL 2\nFreeBSD\n\nOpen the command line and run the following:\n\ncurl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n\nRead more"
  },
  {
    "objectID": "01_rustup.rjs.html#verify",
    "href": "01_rustup.rjs.html#verify",
    "title": "Rustup",
    "section": "Verify",
    "text": "Verify\n\nTo ensure you have a Rust installation, run:\n\nrustc --version\n\nAt time of slide creation, I saw this version:\n\nrustc 1.87.0 (17067e9ac 2025-05-09)"
  },
  {
    "objectID": "01_rustup.rjs.html#git-installation",
    "href": "01_rustup.rjs.html#git-installation",
    "title": "Rustup",
    "section": "Git Installation",
    "text": "Git Installation\n\nEnsure you have a Git installation:\n\nWindows:\n\nLaunch WSL\n\nwsl ~\n\nInstall git within WSL\n\nsudo apt install git\nMacOS:\n\nLaunch the terminal and then:\n\nxcode-select --install"
  },
  {
    "objectID": "01_rustup.rjs.html#verify-1",
    "href": "01_rustup.rjs.html#verify-1",
    "title": "Rustup",
    "section": "Verify",
    "text": "Verify\n\nVerify install via:\n\ngit --version\n\nI had:\n\ngit version 2.34.1"
  },
  {
    "objectID": "01_rustup.rjs.html#account",
    "href": "01_rustup.rjs.html#account",
    "title": "Rustup",
    "section": "Account",
    "text": "Account\n\nEnsure you have an account on GitHub.\nRead More"
  },
  {
    "objectID": "01_rustup.rjs.html#repository",
    "href": "01_rustup.rjs.html#repository",
    "title": "Rustup",
    "section": "Repository",
    "text": "Repository\n\nCreate a repository for this class.\nRequirements\n\nName is 271rs\nUse this template\nMay be public or private to you and me (cd-public).\n\nRead more\n\nMust email me a link to your repository from your @willamette.edu email.\n\nhttps://github.com/cd-example/271rs"
  },
  {
    "objectID": "01_rustup.rjs.html#remote",
    "href": "01_rustup.rjs.html#remote",
    "title": "Rustup",
    "section": "Remote",
    "text": "Remote\n\nWe have now created a remote repository on GitHub.\n\nRemote as in “not on our computer we are using right now”\nAs in “on a web server somewhere”\n\nNo we will make a local repository on our own computer.\nThen connect them!"
  },
  {
    "objectID": "01_rustup.rjs.html#security-concession",
    "href": "01_rustup.rjs.html#security-concession",
    "title": "Rustup",
    "section": "Security Concession",
    "text": "Security Concession\n\nWe will use SSH, the “Secure Shell Protocol”\nIt is supported by git/GitHub and all major operating systems."
  },
  {
    "objectID": "01_rustup.rjs.html#keygen",
    "href": "01_rustup.rjs.html#keygen",
    "title": "Rustup",
    "section": "Keygen",
    "text": "Keygen\n\nSSH is based around having “keys”\n\nUnder the hood, these are special numbers with special properties related to primes, basically.\n\nWe generate a special unique key we can use as a password or signature.\n\nssh-keygen"
  },
  {
    "objectID": "01_rustup.rjs.html#prompts",
    "href": "01_rustup.rjs.html#prompts",
    "title": "Rustup",
    "section": "Prompts",
    "text": "Prompts\n\nThis example uses (1) the default location and (2) no passphrase.\n\nThis is less secure but easier to manage.\nWork in a passphrase as soon as you can!\n\n\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/home/calvin/.ssh/id_ed25519): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/calvin/.ssh/id_ed25519\n$ cat ~/.ssh/id_ed25519.pub \nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIE5cnx/tgBp8v/LnuHz28evmnRPrnlz3cvYaAAM4G0ik calvin@calvin-Precision-3490\n\nYou now have a key! Let’s find a lock."
  },
  {
    "objectID": "01_rustup.rjs.html#github-1",
    "href": "01_rustup.rjs.html#github-1",
    "title": "Rustup",
    "section": "GitHub",
    "text": "GitHub\n\nThe purpose of this exercise is to connect to GitHub!\nWe will mostly use git for that, but we can check if we have a connection easily:\n\nssh -T git@github.com\n\nRead more"
  },
  {
    "objectID": "01_rustup.rjs.html#example",
    "href": "01_rustup.rjs.html#example",
    "title": "Rustup",
    "section": "Example",
    "text": "Example\n\nThis is what I see:\n\nThe authenticity of host 'github.com (140.82.116.3)' can't be established.\nED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])?\n\nBefore saying “yes” or “no” compare versus the “public SSH key fingerprints”\n\nCheck them here\n\nBy default, the modern keygen uses “Ed25519” so compare those keys, and click “yes” if they match!"
  },
  {
    "objectID": "01_rustup.rjs.html#connecting",
    "href": "01_rustup.rjs.html#connecting",
    "title": "Rustup",
    "section": "Connecting",
    "text": "Connecting\n\nAfter confirming the key correctness, you will likely see this.\n\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added 'github.com' (ED25519) to the list of known hosts.\ngit@github.com: Permission denied (publickey)."
  },
  {
    "objectID": "01_rustup.rjs.html#one-way",
    "href": "01_rustup.rjs.html#one-way",
    "title": "Rustup",
    "section": "One Way",
    "text": "One Way\n\nNow we have instructed our computer to trust GitHub.\nTo save our code to GitHub, we must also get GitHub to trust our computer.\nWe generated our key, now we must match it to our lock on GitHub!"
  },
  {
    "objectID": "01_rustup.rjs.html#github-pt-1",
    "href": "01_rustup.rjs.html#github-pt-1",
    "title": "Rustup",
    "section": "GitHub pt 1",
    "text": "GitHub pt 1\n\nWe follow this guide\nReturn to GitHub and in the top right click your profile.\n\nFor me, a picture of myself.\n\nScroll down to “Settings” and click.\n\nLast in 2nd grouping, for me."
  },
  {
    "objectID": "01_rustup.rjs.html#github-pt-2",
    "href": "01_rustup.rjs.html#github-pt-2",
    "title": "Rustup",
    "section": "GitHub pt 2",
    "text": "GitHub pt 2\n\nWithin settings left-side menu click “SSH and GPG keys”\n\nMiddle of 2nd group (Access) for me.\n\nWithin the center block click New SSH key in the top right of the block."
  },
  {
    "objectID": "01_rustup.rjs.html#prompt",
    "href": "01_rustup.rjs.html#prompt",
    "title": "Rustup",
    "section": "Prompt",
    "text": "Prompt\n\nI get a page “Add new SSH Key”.\nI provide a title (like “For 271rs class” or “Laptop”)\nNow we’ll get our key from our system to use.\nRecall we previously generated a key to the default location, like /home/calvin/.ssh/id_ed25519\n\nIf you don’t remember, just type ssh-keygen and it’ll show you."
  },
  {
    "objectID": "01_rustup.rjs.html#copypaste",
    "href": "01_rustup.rjs.html#copypaste",
    "title": "Rustup",
    "section": "Copy/Paste",
    "text": "Copy/Paste\n\nTo get the key for GitHub, we can can\n\ncat that file in the command line\nCopy from the command line\nPaste into the GitHub “Key” field\nClick Add SSH key"
  },
  {
    "objectID": "01_rustup.rjs.html#ssh-test",
    "href": "01_rustup.rjs.html#ssh-test",
    "title": "Rustup",
    "section": "SSH Test",
    "text": "SSH Test\n\nAfter adding the key to the account, I confirm via SSH like so:\n\nssh -T git@github.com\n\nI see the following:\n\nHi cd-public! You've successfully authenticated, but GitHub does not provide shell access."
  },
  {
    "objectID": "01_rustup.rjs.html#clone-pt1",
    "href": "01_rustup.rjs.html#clone-pt1",
    "title": "Rustup",
    "section": "Clone pt1",
    "text": "Clone pt1\n\nNavigate to the repository webpage, like github.com/cd-example/271rs\nFind the &lt;&gt; Code button in the top right.\nClick it:\n\nSelect the top “local” tab (for or local repository)\nSelect the SSH option (for our SSH key)\nCopy the name, like\n\n\n\ngit@github.com:cd-example/271rs"
  },
  {
    "objectID": "01_rustup.rjs.html#clone-pt2",
    "href": "01_rustup.rjs.html#clone-pt2",
    "title": "Rustup",
    "section": "Clone pt2",
    "text": "Clone pt2\n\nWithin terminal, where you keep files for this class.\n\nProbably just do\n\ncd ~\ngit clone git@github.com:cd-example/271rs \nVerify by listing the contents of the 271rs directory via:\n\nls 271rs\n\nYou should see a README.md and a LICENSE"
  },
  {
    "objectID": "01_rustup.rjs.html#enter-the-repository",
    "href": "01_rustup.rjs.html#enter-the-repository",
    "title": "Rustup",
    "section": "Enter the Repository",
    "text": "Enter the Repository\n\nTo change the directory within which you are working in the commandline from your home to the repository for this class, do:\n\ncd 271rs\n\nVerify the change via\n\npwd\n\nThis will give the full address of your class folder, ending in 271rs"
  },
  {
    "objectID": "01_rustup.rjs.html#today-1",
    "href": "01_rustup.rjs.html#today-1",
    "title": "Rustup",
    "section": "Today",
    "text": "Today\n\nTo complete the lab today, add a 01/rustup.md file to your 271rs\nSend me a link to a 271rs repository I have permission to view.\n\nTo be clear:\n\nI must receive an email with a hyperlink to a GitHub repository.\nI must have view access to public repository or a repository on which I am added as a collaborator."
  },
  {
    "objectID": "01_rustup.rjs.html#names-matter",
    "href": "01_rustup.rjs.html#names-matter",
    "title": "Rustup",
    "section": "Names Matter",
    "text": "Names Matter\n\nYour submission will be tested be a script.\n\nThe file must be named rustup.md\nIt must be in a folder named 01\nThe repository must be named 271rs\nNo other arrangement constitutes a lab submission.\nThe contents of rustup.md are not relevant."
  },
  {
    "objectID": "01_rustup.rjs.html#file-editor",
    "href": "01_rustup.rjs.html#file-editor",
    "title": "Rustup",
    "section": "File Editor",
    "text": "File Editor\n\nLet’s make a new file.\nI recommend using vim, neovim, or helix.\nProbably already have it on MacOS.\nOn WSL install via\n\nsudo apt install vim"
  },
  {
    "objectID": "01_rustup.rjs.html#file-editting",
    "href": "01_rustup.rjs.html#file-editting",
    "title": "Rustup",
    "section": "File Editting",
    "text": "File Editting\n\nTo create said file, type vim then the name of the file.\nIf you just cloned 271rs, there will be a 271rs folder into which you should create a 01 folder.\n\nStands for week 0, day 1 ```{.bash} vim 01/rustup.md"
  },
  {
    "objectID": "01_rustup.rjs.html#using-vim",
    "href": "01_rustup.rjs.html#using-vim",
    "title": "Rustup",
    "section": "Using vim",
    "text": "Using vim\n\nThere’s more to life that using vim but basically:\n\nPress i to enter “insert mode” (so you can type)\nWhen you are done typing, press ESC then type :x to save and exit.\nRead more\n\nJust type some notes you have from today."
  },
  {
    "objectID": "01_rustup.rjs.html#check-status",
    "href": "01_rustup.rjs.html#check-status",
    "title": "Rustup",
    "section": "Check Status",
    "text": "Check Status\n\nYou have now added a new file to your repository.\nI consult status often, yours will likely look like this:\n\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        01/rustup.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
  },
  {
    "objectID": "01_rustup.rjs.html#add",
    "href": "01_rustup.rjs.html#add",
    "title": "Rustup",
    "section": "Add",
    "text": "Add\n\nThe first thing we not is that there are “Untracked files”\nWhile we made a hello.py and have it in our hello-world directory, it isn’t yet “tracked” by git!\nBy default, git only keeps track of what we tell it to!\nSo, we tell it to track our code!\n\ngit add 01/rustup.md"
  },
  {
    "objectID": "01_rustup.rjs.html#status",
    "href": "01_rustup.rjs.html#status",
    "title": "Rustup",
    "section": "Status",
    "text": "Status\n\nI check status again\n\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   01_rustup.md"
  },
  {
    "objectID": "01_rustup.rjs.html#commit",
    "href": "01_rustup.rjs.html#commit",
    "title": "Rustup",
    "section": "Commit",
    "text": "Commit\n\nWith git now aware of hello.py, we need to commit or changes for git to save them.\n\nSimilar to saving files to the file system.\nThere are, of course, ways to automate this.\n\nThis probably won’t work at first (next slide!) but try:\n\ngit commit -a -m \"first commit\""
  },
  {
    "objectID": "01_rustup.rjs.html#a--m",
    "href": "01_rustup.rjs.html#a--m",
    "title": "Rustup",
    "section": "“-a -m”",
    "text": "“-a -m”\n\nCommits require a commit message (like a version name or number) so specify with -m\nUsually I provide -a to commit “all” files.\nI usually make some effort to make my life easier with specific commit messages, perhaps listing:\n\nWhat I’m trying to do\nWhy?"
  },
  {
    "objectID": "01_rustup.rjs.html#config",
    "href": "01_rustup.rjs.html#config",
    "title": "Rustup",
    "section": "Config",
    "text": "Config\n\nIf you haven’t used git on your system before, you’ll have to tell git who you are.\n\nIn git there are no anonymous changes - you have to sign every change you make.\n\nYou’ll be prompted to provide something like this:\n\ngit config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\""
  },
  {
    "objectID": "01_rustup.rjs.html#my-name",
    "href": "01_rustup.rjs.html#my-name",
    "title": "Rustup",
    "section": "My name",
    "text": "My name\n\nI often include which computer I’m using in my name and also don’t use a real email address.\n\nMy GitHub account is already attached to an email address, so I use a throwaway for commits.\n\n\ngit config --global user.email \"prof_calvin@c89&gt;rs.edu\"\ngit config --global user.name \"Calvin for Class\""
  },
  {
    "objectID": "01_rustup.rjs.html#looping-back",
    "href": "01_rustup.rjs.html#looping-back",
    "title": "Rustup",
    "section": "Looping Back",
    "text": "Looping Back\n\nOnce you have provided your identity, you can successfuly complete a commit.\n\ngit commit -a -m \"first commit\"\n\nThis will:\n\nMark current code as a version, named by your commit message.\n\nThis won’t:\n\nDo anything to GitHub."
  },
  {
    "objectID": "01_rustup.rjs.html#push",
    "href": "01_rustup.rjs.html#push",
    "title": "Rustup",
    "section": "Push",
    "text": "Push\n\nA commit saves changing on your computer.\nTo save on GitHub, push changes to the cloud\n\ngit push\n\nAfter a moment and some diagnostic text, you should be able to see your code on GitHub, possibly after refreshing the page!"
  },
  {
    "objectID": "01_rustup.rjs.html#diagnostics",
    "href": "01_rustup.rjs.html#diagnostics",
    "title": "Rustup",
    "section": "Diagnostics",
    "text": "Diagnostics\n\nFor example, you might see the following:\n\nEnumerating objects: 27, done.\nCounting objects: 100% (27/27), done.\nDelta compression using up to 22 threads\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (16/16), 98.54 KiB | 2.46 MiB/s, done.\nTotal 16 (delta 11), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (11/11), completed with 10 local objects.\nTo github.com:cd-example/271rs.git\n   adaa3a7..ba3c794  main -&gt; main"
  },
  {
    "objectID": "01_rustup.rjs.html#verify-2",
    "href": "01_rustup.rjs.html#verify-2",
    "title": "Rustup",
    "section": "Verify",
    "text": "Verify\n\nEnsure you have a 01/rustup.md\nEmail me."
  },
  {
    "objectID": "01_rustup.rjs.html#easier-after",
    "href": "01_rustup.rjs.html#easier-after",
    "title": "Rustup",
    "section": "Easier After",
    "text": "Easier After\n\nA lot of what we did, we only have to do once:\n\ngit config\nssh-keygen\nset origin\n\nMany are special cases:\n\nOnly have to make new repositories for… new repositories (likely projects)\nOnly have to git add for new files."
  },
  {
    "objectID": "01_rustup.rjs.html#quick-example",
    "href": "01_rustup.rjs.html#quick-example",
    "title": "Rustup",
    "section": "Quick Example",
    "text": "Quick Example\n\nLet’s add 02/hi_world.rs\nWe’ll create a new file at the command line.\n\nvim 02/hi_world.rs\n\nAdd any text\n\n\n\nhi_world.rs\n\nWait I don't know rust yet."
  },
  {
    "objectID": "01_rustup.rjs.html#add-commit-push",
    "href": "01_rustup.rjs.html#add-commit-push",
    "title": "Rustup",
    "section": "Add, Commit, Push",
    "text": "Add, Commit, Push\n\nTo get the code onto Github, add to the repo:\n\ngit add hi_world.rs \n\nCommit changes to a version:\n\ngit commit -a -m \"You say hello, I say goodbye\"\n\nPush to GitHub\n\ngit push\n\nAnd that’s that!"
  },
  {
    "objectID": "01_rustup.rjs.html#altogether",
    "href": "01_rustup.rjs.html#altogether",
    "title": "Rustup",
    "section": "Altogether",
    "text": "Altogether\n\nFor a single copy/paste\n\ngit add bye.py\ngit commit -a -m \"You say hello, I say goodbye\"\ngit push\n\nIf it works, you’ll see the change on GitHub!"
  },
  {
    "objectID": "01_rustup.rjs.html#again",
    "href": "01_rustup.rjs.html#again",
    "title": "Rustup",
    "section": "Again",
    "text": "Again\n\nPerhaps we wish to be more correct with a well-formed Rust comment.\n\n\n\nbye.py\n\n// TODO: Homework 0 \n\n\nWe’ll learn Rust latter."
  },
  {
    "objectID": "01_rustup.rjs.html#no-add",
    "href": "01_rustup.rjs.html#no-add",
    "title": "Rustup",
    "section": "No Add",
    "text": "No Add\n\nDon’t need an add this time!\n\ngit commit -a -m \"Rust comment\"\ngit push"
  },
  {
    "objectID": "01_rustup.rjs.html#pulling",
    "href": "01_rustup.rjs.html#pulling",
    "title": "Rustup",
    "section": "Pulling",
    "text": "Pulling\n\nTo get remote changes reflected locally, simply use\n\ngit pull\n\nThis will be how assignment feedback is distributed.\nJust git pull every time you start working, basically.\nAlso good when you are working on multiple devices."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Systems in Rust",
    "section": "",
    "text": "CS 271 “Systems in Rust”\n\nCalled:\n\nCS 271: Systems Programming\nCS 271: Sys Programming, Computer Arch\n\nThe first semester class in a:\n\nCompiled language, with\nNo garbage collector.\n\nTerm these “systems” languages.\n\nSuitable to write an operating system.\n\nTaught this year in Rust.\n\nSo to me, “Systems in Rust”\n\n\n\nMW 1310-1440\n\n\nProf. Calvin\n\n\nSyllabus TBD\n\nUngrade++\nLec/Lab/HW\n\n\n\n\nCalendar\n\n\n\nWeek\nDate (M)\nLecture (M)\nLab (W)\nHW (F)\n\n\n\n\n0x0\n08/25\nWelcome\nRustup\nHi world\n\n\n0x1\n09/01\nOff\nCargo\nHi cargo\n\n\n0x2\n09/08\nOptions\nGuess\nWordle\n\n\n0x3\n09/15\nBits\nHamming\nSigmas\n\n\n0x4\n09/22\nSHA2\nEndian\nChunk\n\n\n0x5\n09/29\nIEEE754\nConstants\nSHA512\n\n\n0x6\n10/06\nReview\nMidterm\nOff\n\n\n0x7\n10/13\nBigInt\nBigAdd\nu512\n\n\n0x8\n10/20\nECDSA\nPython\nECDSA\n\n\n0x9\n10/27\nStacks\nList\nTree\n\n\n0xA\n11/03\nGraphs\nBFS\nDjikstra\n\n\n0xB\n11/10\nMerkle\n\n\n\n\n0xC\n11/17\nVCS\n\n\n\n\n0xD\n11/24\nSpectre\nOff\n\n\n\n0xE\n11/24\nMeltdown\nHypers\nVCS.rs\n\n\n\nThink I need string edit distance or patches somewhere.\nHamming teases it at least."
  }
]